{"version":3,"file":"3779.43a8cc003d43f61a7eaf.js","mappings":"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","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useFullscreen.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.module.scss?b72e","webpack://telegram-t/./src/components/main/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/components/main/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/main/WebAppModal.tsx","webpack://telegram-t/./src/components/main/WebAppModal.module.scss?73f6","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftOption.module.scss?a171","webpack://telegram-t/./src/components/main/premium/GiftOption.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.module.scss?1c3e","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/middle/composer/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.module.scss?d7cd","webpack://telegram-t/./src/components/common/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/components/middle/MessageLanguageModal.tsx","webpack://telegram-t/./src/components/middle/MessageLanguageModal.module.scss?f702","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/ui/TextArea.tsx","webpack://telegram-t/./src/components/ui/Draggable.tsx","webpack://telegram-t/./src/components/ui/Draggable.module.scss?804f","webpack://telegram-t/./src/components/common/ManageUsernames.module.scss?3086","webpack://telegram-t/./src/components/common/ManageUsernames.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/ui/SelectAvatar.module.scss?3384","webpack://telegram-t/./src/components/ui/SelectAvatar.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.module.scss?24c7","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.tsx","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/ReactionSelectorReaction.tsx","webpack://telegram-t/./src/components/middle/message/ReactionSelector.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://telegram-t/./src/hooks/useScrolledState.ts","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/ManageTopic.module.scss?04dd","webpack://telegram-t/./src/components/right/CreateTopic.tsx","webpack://telegram-t/./src/components/right/EditTopic.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/hooks/useManagePermissions.ts","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/ui/AvatarEditable.tsx"],"sourcesContent":["import type { ApiDimensions, ApiMessage } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition__slide--active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition__slide--active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition__slide--active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition__slide--active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition__slide--active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media, ${MESSAGE_CONTENT_SELECTOR} .thumbnail`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      ghost.classList.add('circle');\n      if (origin === MediaViewerOrigin.SuggestedAvatar) {\n        ghost.classList.add('transition-circle');\n      }\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import { useLayoutEffect, useCallback, useState } from '../lib/teact/teact';\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/environment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nexport default function usePictureInPicture(\n  elRef: RefType,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isInPictureInPicture, setIsInPictureInPicture] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsInPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      onLeave();\n      setIsInPictureInPicture(false);\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isInPictureInPicture];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import type {\n  ApiMessage, ApiChat, ApiUser, ApiDimensions,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  getVideoAvatarMediaHash,\n  getChatAvatarHash,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n  getMessageFileName,\n  getMessageDocument,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getMessageFileSize, getMessageActionPhoto,\n} from '../../../global/helpers';\nimport { useMemo } from '../../../lib/teact/teact';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport { MediaViewerOrigin } from '../../../types';\nimport { VIDEO_AVATAR_FULL_DIMENSIONS, AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\ntype UseMediaProps = {\n  mediaId?: number;\n  message?: ApiMessage;\n  avatarOwner?: ApiChat | ApiUser;\n  origin?: MediaViewerOrigin;\n  lastSyncTime?: number;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  message,\n  mediaId = 0,\n  avatarOwner,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const actionPhoto = message ? getMessageActionPhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const avatarMedia = avatarOwner?.photos?.[mediaId];\n  const isVideoAvatar = Boolean(avatarMedia?.isVideo || actionPhoto?.isVideo);\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto || actionPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaHash = useMemo(() => (isFull?: boolean) => {\n    if (avatarOwner) {\n      if (avatarMedia) {\n        if (avatarMedia.isVideo && isFull) {\n          return getVideoAvatarMediaHash(avatarMedia);\n        } else if (mediaId === 0) {\n          // Show preloaded avatar if this is the first media (when user clicks on profile info avatar)\n          return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n        } else {\n          return `photo${avatarMedia.id}?size=c`;\n        }\n      } else {\n        return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n      }\n    }\n    if (actionPhoto && isVideoAvatar && isFull) {\n      return `videoAvatar${actionPhoto.id}?size=u`;\n    }\n    return message && getMessageMediaHash(message, isFull ? 'full' : 'preview');\n  }, [avatarOwner, actionPhoto, isVideoAvatar, message, avatarMedia, mediaId]);\n\n  const pictogramBlobUrl = useMedia(\n    message\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocumentPhoto || isDocumentVideo)\n    && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'full'),\n    undefined,\n    delay,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    !isVideo ? previewBlobUrl || pictogramBlobUrl || bestImageData : undefined\n  );\n\n  const fileName = message\n    ? getMessageFileName(message)\n    : avatarOwner\n      ? `avatar${avatarOwner!.id}.${avatarOwner?.hasVideoAvatar ? 'mp4' : 'jpg'}`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto || actionPhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto || actionPhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n  }\n\n  return {\n    getMediaHash,\n    photo,\n    video,\n    webPagePhoto,\n    actionPhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocumentPhoto,\n    isDocumentVideo,\n    fileName,\n    bestImageData,\n    bestData,\n    dimensions,\n    isFromSharedMedia,\n    avatarPhoto: avatarMedia,\n    isVideoAvatar,\n    loadProgress,\n    videoSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport useSyncEffect from './useSyncEffect';\nimport useBlur from './useBlur';\nimport { imgToCanvas } from '../util/files';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useSyncEffect(() => {\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: NoneToVoidFunction;\n  onConfirm?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onConfirm,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [onConfirm, album, message.id, deleteMessages, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [onConfirm, album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n            {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport { isUserId } from '../../global/helpers';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete dialog-buttons-column\"\n      title={lang('AreYouSure')}\n    >\n      <div className=\"dialog-buttons mt-2\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n          {lang('Preview.DeletePhoto')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import React, {\n  memo,\n  useCallback,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiMessage, ApiPhoto, ApiChat, ApiUser,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { MenuItemProps } from '../ui/MenuItem';\n\nimport {\n  selectIsDownloading,\n  selectIsMessageProtected,\n  selectAllowedMessageActions,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n} from '../../global/selectors';\nimport { getMessageMediaFormat, getMessageMediaHash, isUserId } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport DeleteMessageModal from '../common/DeleteMessageModal';\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  avatarOwnerId?: string;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  zoomLevelChange: number;\n  message?: ApiMessage;\n  canUpdateMedia?: boolean;\n  isSingleMedia?: boolean;\n  avatarPhoto?: ApiPhoto;\n  avatarOwner?: ApiChat | ApiUser;\n  fileName?: string;\n  canReport?: boolean;\n  selectMedia: (mediaId?: number) => void;\n  onReport: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  setZoomLevelChange: (change: number) => void;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  message,\n  avatarPhoto,\n  avatarOwnerId,\n  fileName,\n  isChatProtected,\n  isDownloading,\n  isProtected,\n  canReport,\n  zoomLevelChange,\n  canDelete,\n  canUpdate,\n  messageListType,\n  selectMedia,\n  onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n  setZoomLevelChange,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    message && getMessageMediaFormat(message, 'download'),\n  );\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const handleZoomOut = useCallback(() => {\n    const change = zoomLevelChange < 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change - 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const handleZoomIn = useCallback(() => {\n    const change = zoomLevelChange > 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change + 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const handleUpdate = useCallback(() => {\n    if (!avatarPhoto || !avatarOwnerId) return;\n    if (isUserId(avatarOwnerId)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwnerId, photo: avatarPhoto });\n    }\n    selectMedia(0);\n  }, [avatarPhoto, avatarOwnerId, selectMedia, updateProfilePhoto, updateChatPhoto]);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModals() {\n    return message\n      ? (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          message={message}\n        />\n      )\n      : (avatarOwnerId && avatarPhoto) ? (\n        <DeleteProfilePhotoModal\n          isOpen={isDeleteModalOpen}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          profileId={avatarOwnerId}\n          photo={avatarPhoto}\n        />\n      ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon-download\" />\n      </Button>\n    );\n  }\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (!message?.isForwardingAllowed && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'cancel' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReport) {\n      menuItems.push({\n        icon: 'report',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModal,\n        children: lang('Delete'),\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon}\n              href={href}\n              download={download}\n              onClick={onClick}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModals()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {message?.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <i className=\"icon-forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon-flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <i className=\"icon-copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModal}\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      {canDelete && renderDeleteModals()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    message, canUpdateMedia, avatarPhoto, avatarOwner,\n  }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarHash);\n    const canDeleteAvatar = canUpdateMedia && !!avatarPhoto;\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && !!avatarPhoto && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n\n    return {\n      isDownloading,\n      isProtected,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      avatarOwnerId: avatarOwner?.id,\n    };\n  },\n)(MediaViewerActions));\n","import { useLayoutEffect, useState, useEffect } from '../lib/teact/teact';\nimport { IS_IOS } from '../util/environment';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreen(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || IS_IOS)) {\n      return;\n    }\n    safeRequestFullscreen(elRef.current);\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n    safeExitFullscreen();\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const video = elRef.current;\n    const listener = () => {\n      const isEnabled = Boolean(prop && document[prop]);\n      setIsFullscreen(isEnabled);\n      // In Firefox fullscreen video controls are not visible by default, so we force them manually\n      video!.controls = isEnabled;\n    };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && !IS_IOS) {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nexport const useFullscreenStatus = () => {\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  useEffect(() => {\n    const listener = () => {\n      setIsFullscreen(checkIfFullscreen());\n    };\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n    };\n  }, []);\n\n  return isFullscreen;\n};\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n  return '';\n}\n\nexport function checkIfFullscreen() {\n  const fullscreenProp = getBrowserFullscreenElementProp();\n  return Boolean(fullscreenProp && document[fullscreenProp]);\n}\n\nexport function safeRequestFullscreen(video: HTMLVideoElement) {\n  if (video.requestFullscreen) {\n    video.requestFullscreen();\n  } else if (video.webkitRequestFullscreen) {\n    video.webkitRequestFullscreen();\n  } else if (video.webkitEnterFullscreen) {\n    video.webkitEnterFullscreen();\n  } else if (video.mozRequestFullScreen) {\n    video.mozRequestFullScreen();\n  }\n}\n\nexport function safeExitFullscreen() {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document.mozCancelFullScreen) {\n    document.mozCancelFullScreen();\n  } else if (document.webkitCancelFullScreen) {\n    document.webkitCancelFullScreen();\n  } else if (document.webkitExitFullscreen) {\n    document.webkitExitFullscreen();\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick, isProtected,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useRef, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport type { BufferedRange } from '../../hooks/useBuffering';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\nimport { captureEvents } from '../../util/captureEvents';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isVisible: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void ;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  setVisibility: (isVisible: boolean) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  bufferedRanges,\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isVisible,\n  isBuffered,\n  volume,\n  isMuted,\n  playbackRate,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  setVisibility,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const isSeekingRef = useRef<boolean>(false);\n  const isSeeking = isSeekingRef.current;\n\n  const { isMobile } = useAppLayout();\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) return undefined;\n    let timeout: number | undefined;\n    if (!isVisible || !isPlaying || isSeeking || isPlaybackMenuOpen) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlaying, isVisible, isSeeking, setVisibility, isPlaybackMenuOpen]);\n\n  useEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeekingRef.current && seekerRef.current) {\n      const {\n        width,\n        left,\n      } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      onSeek(Math.max(Math.min(duration * ((clientX - left) / width), duration), 0));\n    }\n  }, [duration, onSeek]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    isSeekingRef.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeekingRef.current = false;\n  }, []);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isVisible) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [isVisible, handleStartSeek, handleSeek, handleStopSeek]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      {renderSeekLine(currentTime, duration, bufferedRanges, seekerRef)}\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={isPlaying ? 'icon-pause' : 'icon-play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <i className=\"icon-pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(\n  currentTime: number, duration: number, bufferedRanges: BufferedRange[], seekerRef: React.RefObject<HTMLDivElement>,\n) {\n  const percentagePlayed = (currentTime / duration) * 100;\n\n  return (\n    <div className=\"player-seekline\" ref={seekerRef}>\n      <div className=\"player-seekline-track\">\n        {bufferedRanges.map(({ start, end }) => (\n          <div\n            className=\"player-seekline-buffered\"\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n        <div\n          className=\"player-seekline-played\"\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/environment';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreen from '../../hooks/useFullscreen';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  areControlsVisible: boolean;\n  shouldCloseOnClick?: boolean;\n  toggleControls: (isVisible: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n  isClickDisabled?: boolean;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\nconst MAX_LOOP_DURATION = 30; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  toggleControls,\n  areControlsVisible,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n\n  const handleEnterFullscreen = useCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  }, [setMediaViewerHidden]);\n\n  const handleLeaveFullscreen = useCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  }, [setMediaViewerHidden]);\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const handleVideoMove = useCallback(() => {\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleVideoLeave = useCallback((e) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (e.clientX < bounds.left || e.clientX > bounds.right || e.clientY < bounds.top || e.clientY > bounds.bottom) {\n      toggleControls(false);\n    }\n  }, [toggleControls]);\n\n  const {\n    isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlaying && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  }, [isPlaying]);\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isClickDisabled) {\n      return;\n    }\n\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  }, [onClose, shouldCloseOnClick, togglePlayState, isClickDisabled]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const handleVolumeChange = useCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  }, [setMediaViewerVolume]);\n\n  const handleVolumeMuted = useCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  }, [isMuted, setMediaViewerMuted]);\n\n  const handlePlaybackRateChange = useCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  }, [setMediaViewerPlaybackRate]);\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if ((e.key === 'Enter' || e.key === ' ') && !isInPictureInPicture) {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const duration = videoRef.current?.duration || 0;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={!IS_TOUCH_ENV ? handleVideoMove : undefined}\n      onMouseOut={!IS_TOUCH_ENV ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isGif || duration <= MAX_LOOP_DURATION}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={duration}\n          isVisible={areControlsVisible}\n          setVisibility={toggleControls}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiDimensions, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectChat, selectChatMessage, selectTabState, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../global/selectors';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\nimport buildClassName from '../../util/buildClassName';\nimport { useMediaProps } from './hooks/useMediaProps';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  mediaId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  animationLevel: AnimationLevel;\n  onClose: () => void;\n  onFooterClick: () => void;\n  setControlsVisible?: (isVisible: boolean) => void;\n  areControlsVisible: boolean;\n  isMoving?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  mediaId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    mediaId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    origin,\n    animationLevel,\n    areControlsVisible,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    isHidden,\n    onClose,\n    onFooterClick,\n    setControlsVisible,\n    isMoving,\n  } = props;\n\n  const lang = useLang();\n\n  const isGhostAnimation = animationLevel === 2;\n\n  const {\n    isVideo,\n    isPhoto,\n    actionPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isVideoAvatar,\n    videoSize,\n    loadProgress,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  const toggleControls = useCallback((isVisible) => {\n    setControlsVisible?.(isVisible);\n  }, [setControlsVisible]);\n\n  if (avatarOwner || actionPhoto) {\n    if (!isVideoAvatar) {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={mediaId}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={videoSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            areControlsVisible={areControlsVisible}\n            toggleControls={toggleControls}\n            isProtected={isProtected}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n          />\n        </div>\n      );\n    }\n  }\n\n  if (!message) return undefined;\n  const textParts = message.content.action?.type === 'suggestProfilePhoto'\n    ? lang('Conversation.SuggestedPhotoTitle')\n    : renderMessageText(message);\n  const hasFooter = Boolean(textParts);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter, true),\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={mediaId}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          areControlsVisible={areControlsVisible}\n          isMediaViewerOpen={isOpen && isActive}\n          toggleControls={toggleControls}\n          noPlay={!isActive}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isHidden={IS_TOUCH_ENV ? !areControlsVisible : false}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n    } = selectTabState(global).mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        origin,\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { AnimationLevel, MediaViewerOrigin } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useTimeout from '../../hooks/useTimeout';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  mediaId?: number;\n  getMediaId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMedia: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  animationLevel: AnimationLevel;\n  onClose: () => void;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n  zoomLevelChange: number;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_MESSAGE = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: Function | undefined;\nlet cancelZoomAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  mediaId,\n  getMediaId,\n  selectMedia,\n  isVideo,\n  isGif,\n  isPhoto,\n  isOpen,\n  hasFooter,\n  zoomLevelChange,\n  animationLevel,\n  isHidden,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  const transformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isActiveRef = useRef(true);\n  const isReleasedRef = useRef(false);\n  const [activeMediaId, setActiveMediaId] = useState<number | undefined>(mediaId);\n  const prevZoomLevelChange = usePrevious(zoomLevelChange);\n  const hasZoomChanged = prevZoomLevelChange !== undefined && prevZoomLevelChange !== zoomLevelChange;\n  const forceUpdate = useForceUpdate();\n  const [areControlsVisible, setControlsVisible] = useState(false);\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const { onClose } = rest;\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const setTransform = useCallback((value: Transform) => {\n    transformRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const selectMediaDebounced = useDebouncedCallback(selectMedia, [selectMedia], DEBOUNCE_MESSAGE, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n  const setIsActiveDebounced = useDebouncedCallback((value: boolean) => {\n    isActiveRef.current = value;\n    forceUpdate();\n  }, [forceUpdate], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = isGif && !IS_IOS;\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!areControlsVisible);\n  }, [clickXThreshold, areControlsVisible, windowHeight, windowWidth]);\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION + 100);\n\n  useEffect(() => {\n    setActiveMediaId(mediaId);\n  }, [mediaId]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeMediaId === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let initialContentRect: DOMRect;\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const mId = getMediaId(activeMediaId, direction);\n      if (mId !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        transformRef.current.x += offset;\n        isActiveRef.current = false;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (animationLevel === 0) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      if (transformRef.current.scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (transformRef.current.scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ):[Transform, boolean, boolean] => {\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const absX = Math.abs(transformRef.current.x);\n      const absY = Math.abs(transformRef.current.y);\n      const {\n        scale,\n        x,\n        y,\n      } = transformRef.current;\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const mId = getMediaId(activeMediaId, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (mId !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        transformRef.current.x += offset;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: transformRef.current.x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: transformRef.current?.scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (transformRef.current.scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        const { x, y, scale } = transformRef.current;\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRect = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n        const threshold = 10;\n        const tolerance = 1.5;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > threshold || absOffsetX / absOffsetY > tolerance) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            isActiveRef.current = false;\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > threshold || absOffsetY / absOffsetX > tolerance) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [\n    onClose,\n    setTransform,\n    getMediaId,\n    activeMediaId,\n    windowWidth,\n    windowHeight,\n    clickXThreshold,\n    shouldCloseOnVideo,\n    selectMediaDebounced,\n    setIsActiveDebounced,\n    clearSwipeDirectionDebounced,\n    animationLevel,\n    setIsMouseDown,\n    isHidden,\n    isFullscreen,\n  ]);\n\n  useEffect(() => {\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    const { scale } = transformRef.current;\n    const dir = zoomLevelChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [zoomLevelChange, hasZoomChanged, isHidden, isFullscreen]);\n\n  if (activeMediaId === undefined) return undefined;\n\n  const nextMediaId = getMediaId(activeMediaId, 1);\n  const prevMediaId = getMediaId(activeMediaId, -1);\n  const hasPrev = prevMediaId !== undefined;\n  const hasNext = nextMediaId !== undefined;\n  const offsetX = transformRef.current.x;\n  const offsetY = transformRef.current.y;\n  const { scale } = transformRef.current;\n  const isMoving = isMouseDown && scale > 1;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      {hasPrev && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(-windowWidth + offsetX - SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            isMoving={isMoving}\n            areControlsVisible={areControlsVisible}\n            mediaId={prevMediaId}\n          />\n        </div>\n      )}\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n        style={getAnimationStyle(offsetX, offsetY, scale)}\n      >\n        <MediaViewerContent\n          /* eslint-disable-next-line react/jsx-props-no-spreading */\n          {...rest}\n          mediaId={activeMediaId}\n          animationLevel={animationLevel}\n          isActive={isActiveRef.current}\n          setControlsVisible={setControlsVisible}\n          isMoving={isMoving}\n          areControlsVisible={areControlsVisible && scale === 1}\n        />\n      </div>\n      {hasNext && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(windowWidth + offsetX + SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            isMoving={isMoving}\n            areControlsVisible={areControlsVisible}\n            mediaId={nextMediaId}\n          />\n        </div>\n      )}\n      {hasPrev && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getAnimationStyle(x = 0, y = 0, scale = 1) {\n  return `transform: translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)});`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { getSenderTitle, isUserId } from '../../global/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n  isFallbackAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n  animationLevel: AnimationLevel;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isFallbackAvatar,\n  isAvatar,\n  message,\n  animationLevel,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  }, [chatId, isMobile, focusMessage, toggleChatInfo, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} animationLevel={animationLevel} withVideo />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} animationLevel={animationLevel} withVideo />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang(isFallbackAvatar ? 'lng_mediaview_profile_public_photo' : 'lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    const { animationLevel } = global.settings.byKey;\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n        animationLevel,\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return { animationLevel };\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n      animationLevel,\n    };\n  },\n)(SenderInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { getActions, withGlobal } from '../../global';\nimport { getChatMediaMessageIds, isChatAdmin, isUserId } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMediaSearch, selectTabState,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectUser,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { exitPictureInPictureIfNeeded } from '../../hooks/usePictureInPicture';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useMediaProps } from './hooks/useMediaProps';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  mediaId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  isHidden?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  mediaId,\n  senderId,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatarOwner,\n  message,\n  chatMessages,\n  collectionIds,\n  animationLevel,\n  isHidden,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2 && !shouldSkipHistoryAnimations;\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n  const [zoomLevelChange, setZoomLevelChange] = useState<number>(1);\n\n  const {\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    actionPhoto,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n    avatarPhoto,\n    fileName,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReport = !!avatarPhoto && !isChatWithSelf;\n  const isVisible = !isHidden && isOpen;\n\n  /* Navigation */\n  const singleMediaId = webPagePhoto || webPageVideo || actionPhoto ? mediaId : undefined;\n\n  const mediaIds = useMemo(() => {\n    if (singleMediaId) {\n      return [singleMediaId];\n    } else if (avatarOwner) {\n      return avatarOwner.photos?.map((p, i) => i) || [];\n    } else {\n      return getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n    }\n  }, [singleMediaId, avatarOwner, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaIndex = mediaId ? mediaIds.indexOf(mediaId) : -1;\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaIndex;\n  }\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return enableDirectTextInput;\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      document.body.classList.toggle('is-media-viewer-open', isOpen);\n    }\n    // Disable user selection if media viewer is open, to prevent accidental text selection\n    if (IS_TOUCH_ENV) {\n      document.body.classList.toggle('no-selection', isOpen);\n    }\n  }, [isMobile, isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevIsHidden = usePrevious<boolean | undefined>(isHidden);\n  const prevOrigin = usePrevious(origin);\n  const prevMediaId = usePrevious(mediaId);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevMediaId !== mediaId;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (!prevMessage || shouldAnimateOpening) && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, shouldAnimateOpening, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  const handleClose = useCallback(() => closeMediaViewer(), [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    handleClose();\n\n    if (!chatId || !mediaId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId: mediaId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId: mediaId });\n    }\n  }, [handleClose, isMobile, chatId, threadId, focusMessage, toggleChatInfo, mediaId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [mediaId!],\n    });\n  }, [openForwardMenu, chatId, mediaId]);\n\n  const selectMedia = useCallback((id?: number) => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: id,\n      avatarOwnerId: avatarOwner?.id,\n      origin: origin!,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  }, [avatarOwner?.id, chatId, openMediaViewer, origin, threadId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const getMediaId = useCallback((fromId?: number, direction?: number): number | undefined => {\n    if (fromId === undefined) return undefined;\n    const index = mediaIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < mediaIds.length - 1)) {\n      return mediaIds[index + direction];\n    }\n    return undefined;\n  }, [mediaIds]);\n\n  const handleBeforeDelete = useCallback(() => {\n    if (mediaIds.length <= 1) {\n      handleClose();\n      return;\n    }\n    let index = mediaId ? mediaIds.indexOf(mediaId) : -1;\n    // Before deleting, select previous media or the first one\n    index = index > 0 ? index - 1 : 0;\n    selectMedia(mediaIds[index]);\n  }, [handleClose, mediaId, mediaIds, selectMedia]);\n\n  const lang = useLang();\n\n  function renderSenderInfo() {\n    return avatarOwner ? (\n      <SenderInfo\n        key={mediaId}\n        chatId={avatarOwner.id}\n        isAvatar\n        isFallbackAvatar={isUserId(avatarOwner.id)\n          && (avatarOwner as ApiUser).photos?.[mediaId!].id === (avatarOwner as ApiUser).fullInfo?.fallbackPhoto?.id}\n      />\n    ) : (\n      <SenderInfo\n        key={mediaId}\n        chatId={chatId}\n        messageId={mediaId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          message={message}\n          canUpdateMedia={canUpdateMedia}\n          avatarPhoto={avatarPhoto}\n          avatarOwner={avatarOwner}\n          fileName={fileName}\n          canReport={canReport}\n          selectMedia={selectMedia}\n          onBeforeDelete={handleBeforeDelete}\n          onReport={openReportModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n          zoomLevelChange={zoomLevelChange}\n          setZoomLevelChange={setZoomLevelChange}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          chatId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        mediaId={mediaId}\n        getMediaId={getMediaId}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        zoomLevelChange={zoomLevelChange}\n        isVideo={isVideo}\n        animationLevel={animationLevel}\n        onClose={handleClose}\n        selectMedia={selectMedia}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n      isHidden,\n    } = mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    const { currentUserId } = global;\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { animationLevel, shouldSkipHistoryAnimations };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { animationLevel, shouldSkipHistoryAnimations };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        animationLevel,\n        isHidden,\n        shouldSkipHistoryAnimations,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const user = selectUser(global, avatarOwnerId);\n      const chat = selectChat(global, avatarOwnerId);\n      let canUpdateMedia = false;\n      if (user) {\n        canUpdateMedia = avatarOwnerId === currentUserId;\n      } else if (chat) {\n        canUpdateMedia = isChatAdmin(chat);\n      }\n\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: user || chat,\n        isChatWithSelf,\n        canUpdateMedia,\n        animationLevel,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { animationLevel, shouldSkipHistoryAnimations };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { animationLevel, shouldSkipHistoryAnimations };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectChatScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline\n      || origin === MediaViewerOrigin.Album\n      || origin === MediaViewerOrigin.SuggestedAvatar) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n      isHidden,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(MediaViewer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useRef, useCallback, useState, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChat, ApiTopic } from '../../api/types';\n\nimport { REM } from './helpers/mediaDimensions';\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport renderText from './helpers/renderText';\nimport { getCanPostInChat, isUserId } from '../../global/helpers';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport Transition from '../ui/Transition';\nimport TopicIcon from './TopicIcon';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  chatsById?: Record<string, ApiChat>;\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  chatsById,\n  search,\n  searchPlaceholder,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { loadTopics } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicContainerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const searchRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicSearchRef = useRef<HTMLInputElement>(null);\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  const resetSearch = useCallback(() => {\n    onSearchChange('');\n  }, [onSearchChange]);\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const [topicIds, topics] = useMemo(() => {\n    const topicsResult = forumId ? chatsById?.[forumId].topics : undefined;\n    if (!topicsResult) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = topicsResult\n      ? Object.values(topicsResult).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chatsById![forumId!], topic.id)\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : topicsResult;\n\n    return [Object.keys(result).map(Number), result];\n  }, [chatsById, forumId, topicSearch]);\n\n  const handleHeaderBackClick = useCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  }, []);\n\n  const handleSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  }, [onSearchChange]);\n\n  const handleTopicSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  }, []);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById?.[chatId];\n      if (chat?.isForum) {\n        if (!chat.topics) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, '.ListItem-button', true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleClick = useCallback((e: React.MouseEvent, chatId: string) => {\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!chat.topics) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  }, [chatsById, loadTopics, onSelectChatOrUser, resetSearch]);\n\n  const handleTopicClick = useCallback((e: React.MouseEvent, topicId: number) => {\n    onSelectChatOrUser(forumId!, topicId);\n  }, [forumId, onSelectChatOrUser]);\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Back')} onClick={handleHeaderBackClick}>\n            <i className=\"icon-arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={!topicIds ? 0 : topicIds.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {topicIds\n            ? topicIds.map((topicId, i) => (\n              <ListItem\n                key={`${forumId}_${topicId}`}\n                className=\"chat-item-clickable force-rounded-corners small-icon topic-item\"\n                style={`top: ${i * CHAT_HEIGHT_PX}px;`}\n                onClick={handleTopicClick}\n                clickArg={topicId}\n              >\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n                <div dir=\"auto\" className=\"fullName\">{renderText(topics[topicId].title)}</div>\n              </ListItem>\n            ))\n            : <Loading />}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map((id, i) => (\n              <ListItem\n                key={id}\n                className=\"chat-item-clickable force-rounded-corners small-icon\"\n                style={`height: ${CHAT_HEIGHT_PX}px; top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n                onClick={handleClick}\n                clickArg={id}\n              >\n                {isUserId(id) ? (\n                  <PrivateChatInfo\n                    status={id === currentUserId ? lang('SavedMessagesInfo') : undefined}\n                    userId={id}\n                  />\n                ) : (\n                  <GroupChatInfo chatId={id} />\n                )}\n              </ListItem>\n            ))}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"ChatOrUserPicker\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      <Transition activeKey={activeKey} name=\"slide-fade\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiChatType } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport { unique } from '../../util/iteratees';\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  isDeletedUser,\n  sortChatIds,\n} from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\n\nimport ChatOrUserPicker from './ChatOrUserPicker';\nimport { filterChatIdsByType } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n    const usersById = global.users.byId;\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user && isDeletedUser(user)) return false;\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    const sorted = sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, search, currentUserId),\n      ...(contactIds && filter.includes('users') ? filterUsersByName(contactIds, usersById, search) : []),\n    ]), chatsById, undefined, priorityIds);\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [pinnedIds, currentUserId, activeListIds, search, archivedListIds, lang, chatsById, contactIds, filter, isOpen]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={renderingIds}\n      chatsById={chatsById}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n}) => {\n  const {\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    if (recipientId === currentUserId) {\n      forwardToSavedMessages();\n      showNotification({\n        message: lang(isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One'),\n      });\n    } else {\n      setForwardChatOrTopic({ chatId: recipientId, topicId: threadId });\n    }\n  }, [currentUserId, forwardToSavedMessages, isManyMessages, lang, setForwardChatOrTopic, showNotification]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (selectTabState(global).forwardMessages.messageIds?.length || 0) > 1,\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo | ApiContact)[];\n  animationLevel: AnimationLevel;\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, animationLevel }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} animationLevel={animationLevel} withVideo />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      if (isRequestNeeded) {\n        showNotification({\n          message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n        });\n      }\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            className=\"confirm-dialog-button\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleJoinClick}\n          >\n            {isRequestNeeded ? requestToJoinText : joinText}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message!, ['simple_markdown', 'emoji', 'br'])}\n        <div className=\"dialog-buttons mt-2\">\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1])}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({\n        message, className, localId, action, actionText, title,\n      }) => (\n        <Notification\n          title={title ? renderText(title, ['simple_markdown', 'emoji', 'br', 'links']) : undefined}\n          action={action}\n          actionText={actionText}\n          className={className}\n          message={renderText(message, ['simple_markdown', 'emoji', 'br', 'links'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url), '_blank', 'noopener');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkbox\":\"XxZ7KIBUQzsSYf8KZiIc\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport { getUserFullName } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport styles from './UrlAuthModal.module.scss';\n\nexport type OwnProps = {\n  urlAuth?: TabState['urlAuth'];\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps> = ({\n  urlAuth, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(urlAuth, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (urlAuth?.url && isLoginChecked) {\n      const acceptAction = urlAuth.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else {\n      window.open(ensureProtocol(currentAuth?.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    urlAuth, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(urlAuth?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(UrlAuthModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    onSubmit(selectedDate);\n  }, [onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Avatar from '../common/Avatar';\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Button from '../ui/Button';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar size=\"jumbo\" user={renderingUser} text={`${firstName} ${lastName}`} />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    return {\n      user: userId ? selectUser(global, userId) : undefined,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport useWindowSize from '../../../hooks/useWindowSize';\n\nexport type PopupOptions = {\n  title: string;\n  message: string;\n  buttons: {\n    id: string;\n    type: 'default' | 'ok' | 'close' | 'cancel' | 'destructive';\n    text: string;\n  }[];\n};\n\nexport type WebAppInboundEvent = {\n  eventType: 'web_app_data_send';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'web_app_setup_main_button';\n  eventData: {\n    is_visible: boolean;\n    is_active: boolean;\n    text: string;\n    color: string;\n    text_color: string;\n    is_progress_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_setup_back_button';\n  eventData: {\n    is_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_open_link';\n  eventData: {\n    url: string;\n    try_instant_view?: boolean;\n  };\n} | {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full: string;\n  };\n} | {\n  eventType: 'web_app_open_invoice';\n  eventData: {\n    slug: string;\n  };\n} | {\n  eventType: 'web_app_trigger_haptic_feedback';\n  eventData: {\n    type: 'impact' | 'notification' | 'selection_change';\n    impact_style?: 'light' | 'medium' | 'heavy';\n    notification_type?: 'error' | 'success' | 'warning';\n  };\n} | {\n  eventType: 'web_app_set_background_color';\n  eventData: {\n    color: string;\n  };\n} | {\n  eventType: 'web_app_set_header_color';\n  eventData: {\n    color_key: 'bg_color' | 'secondary_bg_color';\n  };\n} | {\n  eventType: 'web_app_open_popup';\n  eventData: PopupOptions;\n} | {\n  eventType: 'web_app_setup_closing_behavior';\n  eventData: {\n    need_confirmation: boolean;\n  };\n} | {\n  eventType: 'web_app_open_scan_qr_popup';\n  eventData: {\n    text?: string;\n  };\n} | {\n  eventType: 'web_app_read_text_from_clipboard';\n  eventData: {\n    req_id: string;\n  };\n} | {\n  eventType: 'web_app_request_viewport' | 'web_app_request_theme' | 'web_app_ready' | 'web_app_expand'\n  | 'web_app_request_phone' | 'web_app_close' | 'iframe_ready' | 'web_app_close_scan_qr_popup';\n  eventData: null;\n};\n\ntype WebAppOutboundEvent = {\n  eventType: 'viewport_changed';\n  eventData: {\n    height: number;\n    width?: number;\n    is_expanded?: boolean;\n    is_state_stable?: boolean;\n  };\n} | {\n  eventType: 'theme_changed';\n  eventData: {\n    theme_params: {\n      bg_color: string;\n      text_color: string;\n      hint_color: string;\n      link_color: string;\n      button_color: string;\n      button_text_color: string;\n      secondary_bg_color: string;\n    };\n  };\n} | {\n  eventType: 'set_custom_style';\n  eventData: string;\n} | {\n  eventType: 'invoice_closed';\n  eventData: {\n    slug: string;\n    status: 'paid' | 'cancelled' | 'pending' | 'failed';\n  };\n} | {\n  eventType: 'phone_requested';\n  eventData: {\n    phone_number: string;\n  };\n} | {\n  eventType: 'popup_closed';\n  eventData: {\n    button_id?: string;\n  };\n} | {\n  eventType: 'qr_text_received';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'clipboard_text_received';\n  eventData: {\n    req_id: string;\n    data: string | null;\n  };\n} | {\n  eventType: 'main_button_pressed' | 'back_button_pressed' | 'settings_button_pressed' | 'scan_qr_popup_closed';\n};\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst useWebAppFrame = (\n  ref: React.RefObject<HTMLIFrameElement>,\n  isOpen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n  onLoad?: () => void,\n) => {\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current || !isOpen) return undefined;\n\n    const handleLoad = () => {\n      onLoad?.();\n    };\n\n    const frame = ref.current;\n    frame.addEventListener('load', handleLoad);\n    return () => {\n      frame.removeEventListener('load', handleLoad);\n    };\n  }, [onLoad, ref, isOpen]);\n\n  const reloadFrame = useCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  }, [ref]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      // Handle some app requests here to simplify hook usage\n      if (data.eventType === 'web_app_ready') {\n        onLoad?.();\n      }\n\n      if (data.eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (data.eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (data.eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n      }\n\n      if (data.eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      if (data.eventType === 'web_app_read_text_from_clipboard') {\n        const { req_id: requestId } = data.eventData;\n        // eslint-disable-next-line no-null/no-null -- Required by spec\n        window.navigator.clipboard.readText().catch(() => null).then((text) => {\n          sendEvent({\n            eventType: 'clipboard_text_received',\n            eventData: {\n              req_id: requestId,\n              data: text,\n            },\n          });\n        });\n      }\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [isSimpleView, onEvent, sendCustomStyle, sendEvent, sendTheme, sendViewport, onLoad, windowSize.isResizing]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, windowSize]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, sendViewport, ref]);\n\n  return {\n    sendEvent, reloadFrame, sendViewport, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport type { PopupOptions, WebAppInboundEvent } from './hooks/useWebAppFrame';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport {\n  selectCurrentChat, selectTabState, selectTheme, selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { extractCurrentThemeParams, validateHexColor } from '../../util/themeStyle';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWebAppFrame from './hooks/useWebAppFrame';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Spinner from '../ui/Spinner';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './WebAppModal.module.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n};\n\nexport type OwnProps = {\n  webApp?: TabState['webApp'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst PROLONG_INTERVAL = 45000; // 45s\nconst ANIMATION_WAIT = 400;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  webApp,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n}) => {\n  const {\n    closeWebApp,\n    sendWebViewData,\n    prolongWebView,\n    toggleAttachBot,\n    openTelegramLink,\n    openChat,\n    openInvoice,\n    setWebAppPaymentSlug,\n    showNotification,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);\n  const [backgroundColor, setBackgroundColor] = useState(extractCurrentThemeParams().bg_color);\n  const [headerColor, setHeaderColor] = useState(extractCurrentThemeParams().bg_color);\n  const [confirmClose, setConfirmClose] = useState(false);\n  const [isCloseModalOpen, openCloseModal, closeCloseModal] = useFlag(false);\n  const [isLoaded, markLoaded, markUnloaded] = useFlag(false);\n  const [popupParams, setPopupParams] = useState<PopupOptions | undefined>();\n  const { isMobile } = useAppLayout();\n  const prevPopupParams = usePrevious(popupParams);\n  const renderingPopupParams = popupParams || prevPopupParams;\n\n  // eslint-disable-next-line no-null/no-null\n  const frameRef = useRef<HTMLIFrameElement>(null);\n\n  const lang = useLang();\n  const {\n    url, buttonText, queryId, replyToMessageId, threadId,\n  } = webApp || {};\n  const isOpen = Boolean(url);\n  const isSimple = !queryId;\n\n  const handleEvent = useCallback((event: WebAppInboundEvent) => {\n    const { eventType, eventData } = event;\n    if (eventType === 'web_app_close') {\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_invoice') {\n      setWebAppPaymentSlug({\n        slug: eventData.slug,\n      });\n      openInvoice({\n        slug: eventData.slug,\n      });\n    }\n\n    if (eventType === 'web_app_open_tg_link' && !isPaymentModalOpen) {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_link') {\n      const linkUrl = eventData.url;\n      window.open(linkUrl, '_blank', 'noreferrer');\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      setIsBackButtonVisible(eventData.is_visible);\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.bg_color;\n      setBackgroundColor(color);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const themeParams = extractCurrentThemeParams();\n      const key = eventData.color_key;\n      const newColor = themeParams[key];\n      const color = validateHexColor(newColor) ? newColor : themeParams.bg_color;\n      setHeaderColor(color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.button_color;\n      const textColor = validateHexColor(eventData.text_color) ? eventData.text_color : themeParams.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text || '',\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      setConfirmClose(eventData.need_confirmation);\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (!eventData.message.trim().length || !eventData.buttons?.length || eventData.buttons.length > 3) return;\n      setPopupParams(eventData);\n    }\n\n    if (eventType === 'web_app_open_scan_qr_popup') {\n      showNotification({\n        message: 'Scan QR code is not supported in this client yet',\n      });\n    }\n  }, [\n    bot, buttonText, closeWebApp, openInvoice, openTelegramLink, sendWebViewData, setWebAppPaymentSlug,\n    isPaymentModalOpen, showNotification,\n  ]);\n\n  const {\n    reloadFrame, sendEvent, sendViewport, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isSimple, handleEvent, markLoaded);\n\n  const shouldShowMainButton = mainButton?.isVisible && mainButton.text.trim().length > 0;\n\n  useInterval(() => {\n    prolongWebView({\n      botId: bot!.id,\n      queryId: queryId!,\n      peerId: chat!.id,\n      replyToMessageId,\n      threadId,\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  const handleMainButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleSettingsButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleRefreshClick = useCallback(() => {\n    reloadFrame(webApp!.url);\n  }, [reloadFrame, webApp]);\n\n  const handleClose = useCallback(() => {\n    if (confirmClose) {\n      openCloseModal();\n    } else {\n      closeWebApp();\n    }\n  }, [confirmClose, openCloseModal, closeWebApp]);\n\n  const handlePopupClose = useCallback((buttonId?: string) => {\n    setPopupParams(undefined);\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  }, [sendEvent]);\n\n  const handlePopupModalClose = useCallback(() => {\n    handlePopupClose();\n  }, [handlePopupClose]);\n\n  // Notify view that height changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendViewport();\n    }, ANIMATION_WAIT);\n  }, [mainButton?.isVisible, sendViewport]);\n\n  // Notify view that theme changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendTheme();\n    }, ANIMATION_WAIT);\n  }, [theme, sendTheme]);\n\n  useSyncEffect(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, setWebAppPaymentSlug, webApp]);\n\n  const handleToggleClick = useCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: !attachBot,\n    });\n  }, [bot, attachBot, toggleAttachBot]);\n\n  const handleBackClick = useCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleClose();\n    }\n  }, [handleClose, isBackButtonVisible, sendEvent]);\n\n  const openBotChat = useCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n    closeWebApp();\n  }, [bot, closeWebApp, openChat]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setConfirmClose(false);\n      closeCloseModal();\n      setPopupParams(undefined);\n      markUnloaded();\n    }\n  }, [closeCloseModal, isOpen, markUnloaded]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const backButtonClassName = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header\" style={`background-color: ${headerColor}`}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{bot?.firstName}</div>\n        <DropdownMenu\n          className=\"web-app-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          {chat && bot && chat.id !== bot.id && (\n            <MenuItem icon=\"bots\" onClick={openBotChat}>{lang('BotWebViewOpenBot')}</MenuItem>\n          )}\n          <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{lang('WebApp.ReloadPage')}</MenuItem>\n          {attachBot?.hasSettings && (\n            <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n              {lang('Settings')}\n            </MenuItem>\n          )}\n          {bot?.isAttachBot && (\n            <MenuItem\n              icon={attachBot ? 'stop' : 'install'}\n              onClick={handleToggleClick}\n              destructive={Boolean(attachBot)}\n            >\n              {lang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const prevMainButtonColor = usePrevious(mainButton?.color, true);\n  const prevMainButtonTextColor = usePrevious(mainButton?.textColor, true);\n  const prevMainButtonIsActive = usePrevious(mainButton && Boolean(mainButton.isActive), true);\n  const prevMainButtonText = usePrevious(mainButton?.text, true);\n\n  const mainButtonCurrentColor = mainButton?.color || prevMainButtonColor;\n  const mainButtonCurrentTextColor = mainButton?.textColor || prevMainButtonTextColor;\n  const mainButtonCurrentIsActive = mainButton?.isActive !== undefined ? mainButton.isActive : prevMainButtonIsActive;\n  const mainButtonCurrentText = mainButton?.text || prevMainButtonText;\n\n  useEffect(() => {\n    if (!isOpen) {\n      const themeParams = extractCurrentThemeParams();\n      setMainButton(undefined);\n      setIsBackButtonVisible(false);\n      setBackgroundColor(themeParams.bg_color);\n      setHeaderColor(themeParams.bg_color);\n    }\n  }, [isOpen]);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideButton, setShouldHideButton] = useState(true);\n\n  const buttonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (buttonChangeTimeout.current) clearTimeout(buttonChangeTimeout.current);\n    if (!shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldHideButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    } else {\n      setShouldHideButton(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowMainButton]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={handleClose}\n      header={renderHeader()}\n      style={`background-color: ${backgroundColor}`}\n    >\n      <Spinner className={buildClassName(styles.loadingSpinner, isLoaded && styles.hide)} />\n      {isOpen && (\n        <>\n          <iframe\n            className={buildClassName(styles.frame, shouldDecreaseWebFrameSize && styles.withButton)}\n            src={url}\n            title={`${bot?.firstName} Web App`}\n            sandbox={SANDBOX_ATTRIBUTES}\n            allow=\"camera; microphone; geolocation;\"\n            allowFullScreen\n            ref={frameRef}\n          />\n          <Button\n            className={buildClassName(\n              styles.mainButton,\n              shouldShowMainButton && styles.visible,\n              shouldHideButton && styles.hidden,\n            )}\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive}\n            onClick={handleMainButtonClick}\n          >\n            {mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner className={styles.mainButtonSpinner} color=\"white\" />}\n          </Button>\n        </>\n      )}\n      {confirmClose && (\n        <ConfirmDialog\n          isOpen={isCloseModalOpen}\n          onClose={closeCloseModal}\n          title={lang('lng_bot_close_warning_title')}\n          text={lang('lng_bot_close_warning')}\n          confirmHandler={closeWebApp}\n          confirmIsDestructive\n          confirmLabel={lang('lng_bot_close_warning_sure')}\n        />\n      )}\n      {renderingPopupParams && (\n        <Modal\n          isOpen={Boolean(popupParams)}\n          title={renderingPopupParams.title || NBSP}\n          onClose={handlePopupModalClose}\n          hasCloseButton\n          className={\n            buildClassName(styles.webAppPopup, !renderingPopupParams.title?.trim().length && styles.withoutTitle)\n          }\n        >\n          {renderingPopupParams.message}\n          <div className=\"dialog-buttons mt-2\">\n            {renderingPopupParams.buttons.map((button) => (\n              <Button\n                key={button.id || button.type}\n                className=\"confirm-dialog-button\"\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                size=\"smaller\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handlePopupClose(button.id)}\n              >\n                {button.text || lang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { webApp }): StateProps => {\n    const { botId } = webApp || {};\n    const attachBot = botId ? global.attachMenu.bots[botId] : undefined;\n    const bot = botId ? selectUser(global, botId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status } = selectTabState(global).payment;\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      isPaymentModalOpen,\n      paymentStatus: status,\n    };\n  },\n)(WebAppModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"U2Fx70_Xnn6MxQAo6lWe\",\"close-icon\":\"E9BBt8AWQ1LGCzqQYN0D\",\"closeIcon\":\"E9BBt8AWQ1LGCzqQYN0D\",\"state-back\":\"Skbl2Bsgn5Ev9sxPJaZ1\",\"stateBack\":\"Skbl2Bsgn5Ev9sxPJaZ1\",\"loading-spinner\":\"iHI2Sy6jZFDHhMiT5K_L\",\"loadingSpinner\":\"iHI2Sy6jZFDHhMiT5K_L\",\"hide\":\"F1D5Dm5CPeMaqWVDpYI1\",\"frame\":\"yFzw6MKed5SilXcABSY5\",\"with-button\":\"O33MOdec2Wd4r1fyRziT\",\"withButton\":\"O33MOdec2Wd4r1fyRziT\",\"main-button\":\"PzPxMQlmpQbPhl8MZSty\",\"mainButton\":\"PzPxMQlmpQbPhl8MZSty\",\"visible\":\"yLdyQH6R0YCJqkmkSvBH\",\"hidden\":\"CB9NVLPnqFkzbneBIuMs\",\"main-button-spinner\":\"z8CBciLaVx2qnhkzZO_c\",\"mainButtonSpinner\":\"z8CBciLaVx2qnhkzZO_c\",\"web-app-popup\":\"ift5IHKU51MeA7p6XdKh\",\"webAppPopup\":\"ift5IHKU51MeA7p6XdKh\",\"without-title\":\"Umnydwi7nysRWdcQItB8\",\"withoutTitle\":\"Umnydwi7nysRWdcQItB8\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp';\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n  const lang = useLang();\n  // Keep props a little bit longer, to show correct text on closing animation\n  const previousBot = usePrevious(bot, false);\n  const previousType = usePrevious(type, false);\n  const currentBot = bot || previousBot;\n  const currentType = type || previousType;\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id });\n  }, [markBotTrusted, bot]);\n\n  const title = currentType === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = currentType === 'game' ? lang('BotPermissionGameAlert', getUserFullName(currentBot))\n    : lang('BotOpenPageMessage', getUserFullName(currentBot));\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelBotTrustRequest}\n      confirmHandler={handleBotTrustAccept}\n      title={title}\n      textParts={renderText(text, ['br', 'simple_markdown', 'emoji'])}\n    />\n  );\n};\n\nexport default memo(BotTrustModal);\n","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot } from '../../api/types';\n\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nexport type OwnProps = {\n  bot?: ApiAttachBot;\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  bot,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const [isWriteAllowed, setIsWriteAllowed] = useState(bot?.shouldRequestWriteAccess || false);\n\n  const lang = useLang();\n\n  const prevBot = usePrevious(bot);\n  const renderingBot = bot || prevBot;\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed,\n    });\n  }, [confirmAttachBotInstall, isWriteAllowed]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsWriteAllowed(bot.shouldRequestWriteAccess ?? false);\n    }\n  }, [bot]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={renderingBot?.shortName}\n      confirmHandler={handleConfirm}\n    >\n      {lang('WebApp.AddToAttachmentText', renderingBot?.shortName)}\n      {renderingBot?.shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', renderingBot?.shortName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  deleteFolderDialogId?: number;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  deleteFolderDialogId,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder } = getActions();\n  const lang = useLang();\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    deleteChatFolder({ id: deleteFolderDialogId! });\n  }, [closeDeleteChatFolderModal, deleteChatFolder, deleteFolderDialogId]);\n\n  return (\n    <ConfirmDialog\n      isOpen={deleteFolderDialogId !== undefined}\n      onClose={closeDeleteChatFolderModal}\n      text={lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"qiAkShre9E6R3S_XXL9S\",\"floating-badge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floatingBadge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floating-badge-triangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floatingBadgeTriangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floating-badge-icon\":\"y7T3FpaFXDsnPGk6dPmg\",\"floatingBadgeIcon\":\"y7T3FpaFXDsnPGk6dPmg\",\"text\":\"X0zFAEpRoPWj1yE904xR\",\"floating-badge-value\":\"rQ6ZdKdWi4HVydX6qhWS\",\"floatingBadgeValue\":\"rQ6ZdKdWi4HVydX6qhWS\",\"left-text\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"leftText\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-text\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightText\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-value\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightValue\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"left-value\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"leftValue\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"line\":\"slESyAvUqizX4_EIX_yg\",\"left\":\"lQi3xqxjvl2Owb4ES2SM\",\"right\":\"Dcv5uphsn2Sxpg3ROS_u\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useLang from '../../../../hooks/useLang';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\n// eslint-disable-next-line max-len\nconst TRIANGLE_SVG = '<svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\"/></svg>';\n\ntype OwnProps = {\n  floatingBadgeIcon?: string;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <i className={buildClassName(styles.floatingBadgeIcon, floatingBadgeIcon)} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle} dangerouslySetInnerHTML={{ __html: TRIANGLE_SVG }} />\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jeeOV_UYyl50GFLOzjGC\",\"title\":\"SVqE3gr2ekQUWfFT_Mvg\",\"description\":\"mCBNPstzrSlOQsz6rOtE\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WHiQiGCtWfjSlEysEelB\",\"wrapper\":\"WUpKHfqLbeZmhfYqqiko\",\"down\":\"MiGmL4xqBPkxmLim4Ai0\",\"frame\":\"xuhT9JHpFkVsTcUWeh4L\",\"video\":\"sLLJqCkdSug4bzEQrACs\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport useMedia from '../../../../hooks/useMedia';\nimport buildClassName from '../../../../util/buildClassName';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransition(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"NtJc4bt94t9fklIWC6wF\",\"arrow\":\"_rzXza87NHdAMH2TDKul\",\"right\":\"J4UYbae0Frt01jIavpB0\",\"arrow-hidden\":\"qd3rvhZma3JJmhdt07Ig\",\"arrowHidden\":\"qd3rvhZma3JJmhdt07Ig\",\"dot\":\"eCgEFkp07vgaUGwymYAQ\",\"medium\":\"AIpVWjJc47egZ8ATaC3n\",\"small\":\"MnRKztu0OZTyIywGLMc6\",\"invisible\":\"boSFbatyzatdw70J7mpu\",\"active\":\"nlCmVncFkKVtsawWqcfw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './SliderDots.module.scss';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <i className=\"icon-previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <i className=\"icon-next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dVn5gk50tXn1EiI4kJFJ\",\"sticker\":\"PIYKt4xxOUBpRjRu0b4q\",\"effect-sticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\",\"effectSticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiSticker } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: NoneToVoidFunction;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useCallback(() => {\n    onClick(realIndex);\n  }, [onClick, realIndex]);\n\n  const handleEnded = useCallback(() => {\n    inanimate();\n    onEnded();\n  }, [inanimate, onEnded]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useCallback((i: number) => {\n    setOffset(-i);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setTimeout(() => {\n      setOffset((current) => cycleRestrict(renderedStickers.length, current + 1));\n    }, ENDED_DELAY);\n  }, [renderedStickers.length]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {renderedStickers?.map((l, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={l}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QfngIllOc1THaTQiJf7h\",\"button\":\"n8tTb600de2uZKGkyw67\",\"button-content\":\"eZLuJy6dL4ekVllaRcCm\",\"buttonContent\":\"eZLuJy6dL4ekVllaRcCm\",\"back-button\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"backButton\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"white-back-button\":\"E42Dy7DFLAxvj8HE4GAD\",\"whiteBackButton\":\"E42Dy7DFLAxvj8HE4GAD\",\"content\":\"JMdhJYW94Mas4JDye486\",\"frame\":\"fEQZ2fyO9g6L1v8QJUCJ\",\"slide\":\"xkC9BFxv7RkSwbPe4RMb\",\"limits\":\"zngeFAwxdlVJZY876fHc\",\"limits-content\":\"le7Qv9QkHlO3qdK0Hs_g\",\"limitsContent\":\"le7Qv9QkHlO3qdK0Hs_g\",\"header\":\"Mw81cOCIGy8KGn9VokFA\",\"no-header-border\":\"tRvcw256KSHRqgSj5uGX\",\"noHeaderBorder\":\"tRvcw256KSHRqgSj5uGX\",\"preview\":\"EXGFQjwHmQxjvMLbYtS9\",\"title\":\"eEYA2lXPy_DUKe8JKHiP\",\"description\":\"TVO7LjkV_yHUGIu5PXCA\",\"footer\":\"EKr_FVmiDSwhUxouhaqB\",\"no-footer-border\":\"H8z5Q6gsuqeCy82HFlyX\",\"noFooterBorder\":\"H8z5Q6gsuqeCy82HFlyX\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPremiumPromo } from '../../../api/types';\nimport type { ApiLimitType, GlobalState } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\nimport SliderDots from '../../common/SliderDots';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n  emoji_status: 'PremiumPreviewEmojiStatus',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n  emoji_status: 'PremiumPreviewEmojiStatusDescription',\n};\n\nexport const PREMIUM_FEATURE_SECTIONS = [\n  'double_limits',\n  'more_upload',\n  'faster_download',\n  'voice_to_text',\n  'no_ads',\n  'infinite_reactions',\n  'premium_stickers',\n  'animated_emoji',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n];\n\nconst PREMIUM_BOTTOM_VIDEOS: string[] = [\n  'faster_download',\n  'voice_to_text',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n];\n\ntype ApiLimitTypeWithoutUpload = Exclude<ApiLimitType, 'uploadMaxFileparts'>;\n\nconst LIMITS_ORDER: ApiLimitTypeWithoutUpload[] = [\n  'channels',\n  'dialogFolderPinned',\n  'channelsPublic',\n  'savedGifs',\n  'stickersFaved',\n  'aboutLength',\n  'captionLength',\n  'dialogFilters',\n  'dialogFiltersChats',\n];\n\nconst LIMITS_TITLES: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  onBack: VoidFunction;\n  initialSection: string;\n  promo: ApiPremiumPromo;\n  onClickSubscribe: (startParam?: string) => void;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  onBack,\n  onClickSubscribe,\n  isPremium,\n  limits,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePrevious(initialSection);\n\n  function handleClick() {\n    onClickSubscribe(initialSection);\n  }\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = e.currentTarget;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n    e.currentTarget.style.setProperty('--scroll-progress', progress.toString());\n    e.currentTarget.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex}`);\n    prevElement?.classList.toggle('reverse', false);\n    reverseElement?.classList.toggle('reverse', true);\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = PREMIUM_FEATURE_SECTIONS.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, initialSection, prevInitialSection, startScrolling, stopScrolling]);\n\n  const handleSelectSlide = useCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  }, [startScrolling, stopScrolling]);\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, currentSlideIndex !== 0 && styles.whiteBackButton)}\n        color={currentSlideIndex === 0 ? 'translucent' : 'translucent-white'}\n        onClick={onBack}\n        ariaLabel={lang('Back')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {PREMIUM_FEATURE_SECTIONS.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {lang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={lang(LIMITS_TITLES[limit])}\n                        description={lang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {lang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]!])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]!]), ['br'])}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        <Button\n          className={buildClassName(styles.button)}\n          isShiny={!isPremium}\n          withPremiumGradient={!isPremium}\n          onClick={isPremium ? onBack : handleClick}\n        >\n          {isPremium\n            ? lang('OK')\n            : lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"PEnE7xWTMwTPGmhubmj6\",\"text\":\"U4UYSH7uHW3k4FlqBefm\",\"header\":\"Jdlm3dtJ8gOIY0x0u2d4\",\"description\":\"cE44My72bdvMJna9mgoc\",\"icon\":\"mxF3NdPgAi_H0ZFgNEtw\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport renderText from '../../common/helpers/renderText';\n\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  title: string;\n  text: string;\n  onClick: VoidFunction;\n  index: number;\n};\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n];\n\nconst PremiumFeatureItem: FC<OwnProps> = ({\n  icon,\n  title,\n  text,\n  index,\n  onClick,\n}) => {\n  return (\n    <ListItem buttonClassName={styles.root} onClick={onClick}>\n      <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: ${COLORS[index]}`} />\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JJNHc_FZuydBNBIHK9xC\",\"transition\":\"Q05gUm0HCMtSoeX2HVGw\",\"button\":\"Fb3VVHNrypZ3lhYfSVI_\",\"main\":\"E9_LJ9RqAHTj8h84EROt\",\"logo\":\"Vaf41aTAoSwl_e_cZhah\",\"header-text\":\"J2z1gqvfQu5kqV_UP8US\",\"headerText\":\"J2z1gqvfQu5kqV_UP8US\",\"description\":\"PXg8sU2cfdeysJXctlpB\",\"list\":\"LlPAfJpL066su4P2NFmh\",\"no-button\":\"wpPtJKCqTdOGkKoh7KTo\",\"noButton\":\"wpPtJKCqTdOGkKoh7KTo\",\"header\":\"Rwuf1efaEfZ13AD5XbCB\",\"hidden-header\":\"NV7fN3j69oFZEJu7ejG8\",\"hiddenHeader\":\"NV7fN3j69oFZEJu7ejG8\",\"close-button\":\"TyuYAZecpI2K_1i3B5XO\",\"closeButton\":\"TyuYAZecpI2K_1i3B5XO\",\"premium-header-text\":\"jA_DV7G5VJo8xGOe0otF\",\"premiumHeaderText\":\"jA_DV7G5VJo8xGOe0otF\",\"footer-text\":\"yVkdTScCEhH3EQMQiA42\",\"footerText\":\"yVkdTScCEhH3EQMQiA42\",\"primary-footer-text\":\"MQbFSG2o_R8rjKDsqs8R\",\"primaryFooterText\":\"MQbFSG2o_R8rjKDsqs8R\",\"footer\":\"FApXoTPpasib6Np5Uxpt\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumPromo, ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_SECTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectTabState, selectIsCurrentUserPremium, selectUser } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName } from '../../../global/helpers';\n\nimport useLang from '../../../hooks/useLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport Transition from '../../ui/Transition';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\nimport PremiumStatus from '../../../assets/premium/PremiumStatus.svg';\n\nimport styles from './PremiumMainModal.module.scss';\n\nconst LIMIT_ACCOUNTS = 4;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<string, string> = {\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n  emoji_status: PremiumStatus,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  isClosing?: boolean;\n  fromUser?: ApiUser;\n  toUser?: ApiUser;\n  initialSection?: string;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: string[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isClosing,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink,\n  } = getActions();\n\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<string | undefined>(initialSection);\n\n  const handleOpen = useCallback((section: string | undefined) => {\n    return () => {\n      setCurrentSection(section);\n    };\n  }, []);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  function handleClickWithStartParam(startParam?: string) {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  }\n\n  function handleClick() {\n    handleClickWithStartParam();\n  }\n\n  const showConfetti = useCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n      });\n    }\n  }, [isOpen, requestConfetti]);\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useSyncEffect(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium, showConfetti]);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  if (!promo) return undefined;\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  function getHeaderText() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n        : lang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]);\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n      : lang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium');\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : lang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogSubtitle')\n      : lang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities(promo.statusText, promo.statusEntities)}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      // eslint-disable-next-line react/jsx-no-bind\n      onCloseAnimationEnd={() => closePremiumModal({ isClosed: true })}\n      onClose={closePremiumModal}\n      isOpen={isOpen && !isClosing}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => closePremiumModal()}\n              ariaLabel={lang('Close')}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n            <img className={styles.logo} src={PremiumLogo} alt=\"\" />\n            <h2 className={styles.headerText}>\n              {renderText(getHeaderText(), ['simple_markdown', 'emoji'])}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {lang('TelegramPremium')}\n              </h2>\n            </div>\n\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {filteredSections.map((section, index) => {\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={lang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : lang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    onClick={handleOpen(section)}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(lang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(lang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && (\n              <div className={styles.footer}>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleOpen(undefined)}\n            promo={promo}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isClosing: premiumModal?.isClosing,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    fromUser: premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"c43s0Q6_xgGlM8sZxQ7Q\",\"active\":\"PjYaF42Oe55WgPpTP6Od\",\"input\":\"r03M3Tzd52_D2GCAdabK\",\"content\":\"oL_26LDnHDwJRxqKF1Kn\",\"month\":\"JmEuBQ4mFzu1MiFV5qSB\",\"perMonth\":\"hssGd7AUhDhhG2_aXqe9\",\"amount\":\"mhc9AgOUiNT2QMcErpQe\",\"discount\":\"WCXGWHYNQh8lg2rIWehC\"};","import type { ChangeEvent } from 'react';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport styles from './GiftOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumGiftOption;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  onChange: (month: number) => void;\n};\n\nconst GiftOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount, onChange,\n}) => {\n  const lang = useLang();\n\n  const { months, amount, currency } = option;\n  const perMonth = Math.floor(amount / months);\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label className={buildClassName(styles.wrapper, checked && styles.active)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"gift_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>{lang('Months', months)}</div>\n        <div className={styles.perMonth}>\n          {lang('PricePerMonth', formatCurrency(perMonth, currency, lang.code))}\n          {Boolean(discount) && (\n            <span className={styles.discount} title={lang('GiftDiscount')}> &minus;{discount}% </span>\n          )}\n        </div>\n        <div className={styles.amount}>{formatCurrency(amount, currency, lang.code)}</div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiftOption);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption, ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport { selectTabState, selectUser } from '../../../global/selectors';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport Avatar from '../../common/Avatar';\nimport GiftOption from './GiftOption';\n\nimport styles from './GiftPremiumModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  gifts?: ApiPremiumGiftOption[];\n  monthlyCurrency?: string;\n  monthlyAmount?: number;\n  animationLevel: AnimationLevel;\n};\n\nconst GiftPremiumModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  user,\n  gifts,\n  monthlyCurrency,\n  monthlyAmount,\n  animationLevel,\n}) => {\n  const { openPremiumModal, closeGiftPremiumModal, openUrl } = getActions();\n\n  const lang = useLang();\n  const renderedUser = useCurrentOrPrev(user, true);\n  const renderedGifts = useCurrentOrPrev(gifts, true);\n  const [selectedOption, setSelectedOption] = useState<number | undefined>();\n  const firstGift = renderedGifts?.[0];\n  const fullMonthlyAmount = useMemo(() => {\n    if (!renderedGifts || renderedGifts.length === 0 || !firstGift) {\n      return undefined;\n    }\n\n    const cheaperGift = renderedGifts.reduce((acc, gift) => {\n      return gift.amount < firstGift?.amount ? gift : firstGift;\n    }, firstGift);\n\n    return cheaperGift.currency === monthlyCurrency && monthlyAmount\n      ? monthlyAmount\n      : Math.floor(cheaperGift.amount / cheaperGift.months);\n  }, [firstGift, renderedGifts, monthlyAmount, monthlyCurrency]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedOption(firstGift?.months);\n    }\n  }, [firstGift?.months, isOpen]);\n\n  const selectedGift = useMemo(() => {\n    return renderedGifts?.find((gift) => gift.months === selectedOption);\n  }, [renderedGifts, selectedOption]);\n\n  const handleSubmit = useCallback(() => {\n    if (!selectedGift) {\n      return;\n    }\n\n    closeGiftPremiumModal();\n    openUrl({ url: selectedGift.botUrl });\n  }, [closeGiftPremiumModal, openUrl, selectedGift]);\n\n  const handlePremiumClick = useCallback(() => {\n    openPremiumModal();\n  }, [openPremiumModal]);\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    // Translation hack for rendering component inside string\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  return (\n    <Modal\n      onClose={closeGiftPremiumModal}\n      isOpen={isOpen}\n      className={styles.modalDialog}\n    >\n      <div className=\"custom-scroll\">\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeGiftPremiumModal()}\n          ariaLabel={lang('Close')}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <Avatar user={renderedUser} size=\"jumbo\" className={styles.avatar} animationLevel={animationLevel} withVideo />\n        <h2 className={styles.headerText}>\n          {lang('GiftTelegramPremiumTitle')}\n        </h2>\n        <p className={styles.description}>\n          {renderText(\n            lang('GiftTelegramPremiumDescription', getUserFirstOrLastName(renderedUser)),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n\n        <div className={styles.options}>\n          {renderedGifts?.map((gift) => (\n            <GiftOption\n              key={gift.amount}\n              option={gift}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={gift.months === selectedOption}\n              onChange={setSelectedOption}\n            />\n          ))}\n        </div>\n\n        {renderPremiumFeaturesLink()}\n      </div>\n\n      <Button className={styles.button} isShiny disabled={!selectedOption} onClick={handleSubmit}>\n        {lang(\n          'GiftSubscriptionFor',\n          selectedGift && formatCurrency(Number(selectedGift.amount), selectedGift.currency, lang.code),\n        )}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { forUserId, monthlyCurrency, monthlyAmount } = selectTabState(global).giftPremiumModal || {};\n  const user = forUserId ? selectUser(global, forUserId) : undefined;\n  const gifts = user ? user.fullInfo?.premiumGifts : undefined;\n\n  return {\n    user,\n    gifts,\n    monthlyCurrency,\n    monthlyAmount: monthlyAmount ? Number(monthlyAmount) : undefined,\n    animationLevel: global.settings.byKey.animationLevel,\n  };\n})(GiftPremiumModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"K80So3B9potKGNvwdtYE\",\"closeButton\":\"dxx424IZDNuP1OLbUIve\",\"avatar\":\"qJgJ7R5NJVmAxBjT5LxT\",\"headerText\":\"eqCNa8zBoMroKcepfXyE\",\"description\":\"MtYhgDChavNfKIUAJPzt\",\"premiumFeatures\":\"J0hST5xsC45ZolfGpbDc\",\"options\":\"HyfHjS1vAds31eFcSpDg\",\"button\":\"sSXm9RjIQSsVFi0D1nEd\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiLimitTypeWithModal } from '../../../../global/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nimport renderText from '../../../common/helpers/renderText';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport { getActions, withGlobal } from '../../../../global';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport Modal from '../../../ui/Modal';\nimport Button from '../../../ui/Button';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'icon-chat-badge',\n  uploadMaxFileparts: 'icon-file-badge',\n  dialogFilters: 'icon-folder-badge',\n  dialogFolderPinned: 'icon-pin-badge',\n  channelsPublic: 'icon-link-badge',\n  channels: 'icon-chats-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: LangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: LangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon)} />\n          <div className={styles.limitValue}>{valueFormatter?.(\n            lang, isPremium ? premiumValue : defaultValue,\n          ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n      && (\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.subscribeButton)}\n          isShiny\n          onClick={handleClick}\n          color=\"primary\"\n        >\n          {lang('IncreaseLimit')}\n          <i className={buildClassName(styles.buttonIcon, 'icon-double-badge')} />\n        </Button>\n      )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iz5RJvcQyNNDQzKfXQbN\",\"limit-compare\":\"az3lXhmlMfZfIQ_81jog\",\"limitCompare\":\"az3lXhmlMfZfIQ_81jog\",\"limit-badge\":\"womlEQglVV1w8ltVa6PQ\",\"limitBadge\":\"womlEQglVV1w8ltVa6PQ\",\"limit-value\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limitValue\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limit-icon\":\"q8SgjqQqlOVMSofzhdwh\",\"limitIcon\":\"q8SgjqQqlOVMSofzhdwh\",\"dialog-buttons\":\"DgRFl7StCs4fhROb7CKH\",\"dialogButtons\":\"DgRFl7StCs4fhROb7CKH\",\"subscribe-button\":\"Twnx_5clE9fKNOMo7lXf\",\"subscribeButton\":\"Twnx_5clE9fKNOMo7lXf\",\"button-icon\":\"BW05mF5k9uq5qBi_BYzg\",\"buttonIcon\":\"BW05mF5k9uq5qBi_BYzg\"};","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  DEFAULT_STATUS_ICON_ID,\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EMOJI_SIZE_PICKER, FAVORITE_SYMBOL_SET_ID, RECENT_SYMBOL_SET_ID, STICKER_SIZE_PICKER,\n} from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport StickerButton from '../../common/StickerButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Button from '../../ui/Button';\n\nimport grey from '../../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  idPrefix?: string;\n  shouldRender: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldHideRecentHeader?: boolean;\n  withDefaultTopicIcon?: boolean;\n  withDefaultStatusIcon?: boolean;\n  observeIntersection: ObserveFn;\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  idPrefix,\n  shouldRender,\n  favoriteStickers,\n  isSavedMessages,\n  isStatusPicker,\n  isCurrentUserPremium,\n  shouldHideRecentHeader,\n  withDefaultTopicIcon,\n  withDefaultStatusIcon,\n  observeIntersection,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(ITEMS_PER_ROW_FALLBACK);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const stickerMarginPx = isMobile ? 8 : 16;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useCallback(() => {\n    if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  }, [clearRecentCustomEmoji, clearRecentStickers, closeConfirmModal, isEmoji]);\n\n  const handleAddClick = useCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  }, [isCurrentUserPremium, isPremiumSet, openPremiumModal, stickerSet, toggleStickerSet]);\n\n  const handleDefaultTopicIconClick = useCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  }, [onStickerSelect]);\n\n  const handleDefaultStatusIconClick = useCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_STATUS_ICON_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  }, [onStickerSelect]);\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useCallback((width: number) => {\n    if (!width) return ITEMS_PER_ROW_FALLBACK;\n\n    return Math.floor(width / (itemSize + margin));\n  }, [itemSize, margin]);\n\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  }, [calculateItemsPerRow]);\n  useResizeObserver(ref, handleResize);\n\n  useLayoutEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isRecent && isEmoji && !isCurrentUserPremium\n    && stickerSet.stickers?.some(({ isFree }) => !isFree);\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID;\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = withDefaultTopicIcon ? stickerSet.count + 1 : stickerSet.count;\n\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow) * (itemSize + margin);\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * (itemSize + margin);\n\n  const shouldHideHeader = isRecent && shouldHideRecentHeader;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${idPrefix || 'sticker-set'}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className=\"symbol-set-name\">\n            {isLocked && <i className=\"symbol-set-locked-icon icon-lock-badge\" />}\n            {stickerSet.title}\n          </p>\n          {isRecent && (\n            <i className=\"symbol-set-remove icon-close\" onClick={openConfirmModal} />\n          )}\n          {!isRecent && isEmoji && !isInstalled && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {isPremiumSet && isLocked ? lang('Unlock') : lang('Add')}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName('symbol-set-container shared-canvas-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" />\n          </Button>\n        )}\n        {withDefaultStatusIcon && (\n          <Button\n            className=\"StickerButton custom-emoji status-default\"\n            color=\"translucent\"\n            onClick={handleDefaultStatusIconClick}\n            key=\"default-status-icon\"\n          >\n            <i className=\"icon-premium\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.stickers && stickerSet.stickers\n          .slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersection}\n                noAnimate={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                isStatusPicker={isStatusPicker}\n                canViewSet\n                isCurrentUserPremium={isCurrentUserPremium}\n                sharedCanvasRef={canvasRef}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n                onContextMenuOpen={onContextMenuOpen}\n                onContextMenuClose={onContextMenuClose}\n                onContextMenuClick={onContextMenuClick}\n              />\n            );\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +{totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang('ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","// extracted by mini-css-extract-plugin\nexport default {\"video\":\"h6jE3TEaqlzbs0ro0J2_\"};","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { getStickerPreviewHash } from '../../../global/helpers';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBoundsInSharedCanvas from '../../../hooks/useBoundsInSharedCanvas';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noAnimate?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noAnimate,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const { hasThumbnail, isLottie, isVideos: isVideo } = stickerSet;\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n\n  const shouldFallbackToStatic = stickerSet.stickers && isVideo && !IS_WEBM_SUPPORTED;\n  const staticHash = shouldFallbackToStatic && getStickerPreviewHash(stickerSet.stickers![0].id);\n  const staticMediaData = useMedia(staticHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !shouldFallbackToStatic) || isLottie) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = mediaData || staticMediaData;\n  const transitionClassNames = useMediaTransition(isReady);\n\n  const bounds = useBoundsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div ref={containerRef} className=\"sticker-set-cover\">\n      {isReady ? (\n        isLottie ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size || bounds.size}\n            play={isIntersecting && !noAnimate}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={bounds.coords}\n          />\n        ) : (isVideo && !shouldFallbackToStatic) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={isIntersecting && !noAnimate}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || staticMediaData}\n            className={transitionClassNames}\n            alt=\"\"\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport {\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  loadAndPlay: boolean;\n  isStatusPicker?: boolean;\n  idPrefix?: string;\n  withDefaultTopicIcons?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmojisById?: Record<string, ApiSticker>;\n  recentCustomEmojiIds?: string[];\n  recentStatusEmojis?: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedCustomEmojiIds?: string[];\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  customEmojiFeaturedIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\nconst DEFAULT_ID_PREFIX = 'custom-emoji-set';\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  customEmojisById,\n  recentCustomEmojiIds,\n  recentStatusEmojis,\n  stickerSetsById,\n  idPrefix = DEFAULT_ID_PREFIX,\n  customEmojiFeaturedIds,\n  canAnimate,\n  isStatusPicker,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  defaultStatusIconsId,\n  onCustomEmojiSelect,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const recentCustomEmojis = useMemo(() => {\n    return isStatusPicker\n      ? recentStatusEmojis\n      : Object.values(pickTruthy(customEmojisById!, recentCustomEmojiIds!));\n  }, [customEmojisById, isStatusPicker, recentCustomEmojiIds, recentStatusEmojis]);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith(idPrefix)) {\n        return;\n      }\n\n      const index = Number(id.replace(`${idPrefix}-`, ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    if (!addedCustomEmojiIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets: StickerSetOrRecent[] = [];\n\n    if (isStatusPicker) {\n      const defaultStatusIconsPack = stickerSetsById[defaultStatusIconsId!];\n      if (defaultStatusIconsPack.stickers?.length) {\n        const stickers = (defaultStatusIconsPack.stickers || []).concat(recentCustomEmojis || []);\n        defaultSets.push({\n          ...defaultStatusIconsPack,\n          stickers,\n          count: stickers.length,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmojis?.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentCustomEmojis,\n        count: recentCustomEmojis.length,\n        isEmoji: true as true,\n      });\n    }\n\n    const setIdsToDisplay = unique(addedCustomEmojiIds.concat(customEmojiFeaturedIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, isStatusPicker, withDefaultTopicIcons, recentCustomEmojis,\n    customEmojiFeaturedIds, stickerSetsById, defaultStatusIconsId, lang, defaultTopicIconsId,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents && !noPopulatedSets;\n\n  useHorizontalScroll(headerRef, !shouldRenderContents);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`${idPrefix}-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, [idPrefix]);\n\n  const handleEmojiSelect = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  }, [onCustomEmojiSelect]);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon-recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noAnimate={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noAnimate={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', 'CustomEmojiPicker', className);\n\n  if (!shouldRenderContents) {\n    return (\n      <div className={fullClassName}>\n        {noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            index={i}\n            idPrefix={idPrefix}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            isSavedMessages={isSavedMessages}\n            isStatusPicker={isStatusPicker}\n            shouldHideRecentHeader={withDefaultTopicIcons || isStatusPicker}\n            withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n            withDefaultStatusIcon={isStatusPicker && stickerSet.id === RECENT_SYMBOL_SET_ID}\n            isCurrentUserPremium={isCurrentUserPremium}\n            onStickerSelect={handleEmojiSelect}\n            onContextMenuOpen={onContextMenuOpen}\n            onContextMenuClose={onContextMenuClose}\n            onContextMenuClick={onContextMenuClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isStatusPicker }): StateProps => {\n    const {\n      stickers: {\n        setsById: stickerSetsById,\n      },\n      customEmojis: {\n        byId: customEmojisById,\n        featuredIds: customEmojiFeaturedIds,\n        statusRecent: {\n          emojis: recentStatusEmojis,\n        },\n      },\n      recentCustomEmojis: recentCustomEmojiIds,\n    } = global;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n\n    return {\n      customEmojisById: !isStatusPicker ? customEmojisById : undefined,\n      recentCustomEmojiIds: !isStatusPicker ? recentCustomEmojiIds : undefined,\n      recentStatusEmojis: isStatusPicker ? recentStatusEmojis : undefined,\n      stickerSetsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      customEmojiFeaturedIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n      defaultStatusIconsId: global.defaultStatusIconsId,\n    };\n  },\n)(CustomEmojiPicker));\n","import type { RefObject } from 'react';\nimport React, {\n  useCallback, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\nimport CustomEmojiPicker from '../../middle/composer/CustomEmojiPicker';\n\nimport styles from './StatusPickerMenu.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  statusButtonRef: RefObject<HTMLButtonElement>;\n  onEmojiStatusSelect: (emojiStatus: ApiSticker) => void;\n  onClose: () => void;\n};\n\ninterface StateProps {\n  areFeaturedStickersLoaded?: boolean;\n}\n\nconst StatusPickerMenu: FC<OwnProps & StateProps> = ({\n  isOpen,\n  statusButtonRef,\n  areFeaturedStickersLoaded,\n  onEmojiStatusSelect,\n  onClose,\n}) => {\n  const { loadFeaturedEmojiStickers } = getActions();\n\n  const transformOriginX = useRef<number>();\n  const [isContextMenuShown, markContextMenuShown, unmarkContextMenuShown] = useFlag();\n  useEffect(() => {\n    transformOriginX.current = statusButtonRef.current!.getBoundingClientRect().right;\n  }, [isOpen, statusButtonRef]);\n\n  useEffect(() => {\n    if (isOpen && !areFeaturedStickersLoaded) {\n      loadFeaturedEmojiStickers();\n    }\n  }, [areFeaturedStickersLoaded, isOpen, loadFeaturedEmojiStickers]);\n\n  const handleEmojiSelect = useCallback((sticker: ApiSticker) => {\n    onEmojiStatusSelect(sticker);\n    onClose();\n  }, [onClose, onEmojiStatusSelect]);\n\n  return (\n    <Portal>\n      <Menu\n        isOpen={isOpen}\n        noCompact\n        positionX=\"right\"\n        bubbleClassName={styles.menuContent}\n        onClose={onClose}\n        transformOriginX={transformOriginX.current}\n        noCloseOnBackdrop={isContextMenuShown}\n      >\n        <CustomEmojiPicker\n          idPrefix=\"status-emoji-set-\"\n          loadAndPlay={isOpen}\n          isStatusPicker\n          onContextMenuOpen={markContextMenuShown}\n          onContextMenuClose={unmarkContextMenuShown}\n          onCustomEmojiSelect={handleEmojiSelect}\n          onContextMenuClick={onClose}\n        />\n      </Menu>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    areFeaturedStickersLoaded: Boolean(global.customEmojis.featuredIds?.length),\n  };\n})(StatusPickerMenu));\n","// extracted by mini-css-extract-plugin\nexport default {\"menuContent\":\"XWSv0Pf1SKleWNyX04yO\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport SafeLink from './SafeLink';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nconst AboutAdsModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('SponsoredMessageInfo')}\n    >\n      <p>{renderText(lang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n      <p>\n        <SafeLink\n          url={lang('SponsoredMessageAlertLearnMoreUrl')}\n          text={lang('SponsoredMessageAlertLearnMoreUrl')}\n        />\n      </p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Close')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AboutAdsModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <div className=\"dialog-buttons-column\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        {canPinForAll && (\n          <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n            {contactName\n              ? renderText(lang('Conversation.PinMessagesFor', contactName))\n              : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          </Button>\n        )}\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n          {lang('DialogUnpin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive: boolean, copySelectedMessages: NoneToVoidFunction) => {\n  function handleCopy(e: KeyboardEvent) {\n    if (!isActive) {\n      return;\n    }\n\n    e.preventDefault();\n    copySelectedMessages();\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  selectCanDeleteSelectedMessages, selectCurrentChat, selectTabState, selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds! });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName\n              ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n              : lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = selectTabState(global).selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList, selectTabState,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../global/selectors';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Button from '../ui/Button';\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(Boolean(isActive), copySelectedMessages);\n\n  const handleExitMessageSelectMode = useCallback(() => {\n    exitMessageSelectMode();\n  }, [exitMessageSelectMode]);\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? openDeleteModal : undefined,\n        onDelete: canDeleteMessages ? openDeleteModal : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  }, [copySelectedMessages, exitMessageSelectMode, lang, showNotification]);\n\n  const handleDownload = useCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  }, [downloadSelectedMessages, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n      >\n        <i className={`icon-${icon}`} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={handleExitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && canForwardMessages && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && !hasProtectedMessage && (\n              renderButton('download', lang('lng_media_download'), handleDownload)\n            )}\n            {!hasProtectedMessage && (\n              renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n            )}\n            {canDeleteMessages && (\n              renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, true)\n            )}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const isForwardModalOpen = tabState.forwardMessages.isModalShown;\n    const isAnyModalOpen = Boolean(isForwardModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall);\n\n    return {\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n    };\n  },\n)(MessageSelectToolbar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  memberIds?: string[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nconst SeenByModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  memberIds,\n}) => {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  }, [closeSeenByModal, openChat]);\n\n  const handleCloseSeenByModal = useCallback(() => {\n    closeSeenByModal();\n  }, [closeSeenByModal]);\n\n  const renderingMemberIds = useCurrentOrPrev(memberIds, true);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className=\"narrow\"\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderingMemberIds && renderingMemberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo userId={userId} noStatusOrTyping />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      memberIds: selectChatMessage(global, chatId, messageId)?.seenByUserIds,\n    };\n  },\n)(SeenByModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\nimport { isSameReaction, getReactionUniqueKey } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useFlag from '../../hooks/useFlag';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByUserIds'> & {\n  chatId?: string;\n  messageId?: number;\n  animationLevel: AnimationLevel;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByUserIds,\n  animationLevel,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on users, so we avoid them\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  }, [closeReactorListModal, openChat]);\n\n  const handleClose = useCallback(() => {\n    startClosing();\n  }, [startClosing]);\n\n  const handleClick = useCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  }, [handleClose]);\n\n  const handleLoadMore = useCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  }, [chatId, loadReactors, messageId]);\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const userIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ userId }) => userId);\n    }\n    return unique(reactors?.reactions.map(({ userId }) => userId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByUserIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, userIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\">\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon-heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionUniqueKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (userId) => {\n                const user = usersById[userId];\n                const userReactions = reactors?.reactions.filter((reactor) => reactor.userId === userId);\n                const items: React.ReactNode[] = [];\n                userReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n                  items.push(\n                    <ListItem\n                      key={`${userId}-${getReactionUniqueKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(userId)}\n                    >\n                      <Avatar user={user} size=\"small\" animationLevel={animationLevel} withVideo />\n                      <FullNameTitle peer={user} withEmojiStatus />\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByUserIds: message?.seenByUserIds,\n      animationLevel: global.settings.byKey.animationLevel,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../global/types';\n\nimport { IS_ANDROID } from '../../util/environment';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  }, [activeEmojiInteraction.id, startHiding, stopActiveEmojiInteraction]);\n\n  const handleCancelAnimation = useCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  }, [stop]);\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={effectTgsUrl}\n        play={isPlaying}\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceOnHeavyAnimation\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { selectLanguageCode, selectRequestedTranslationLanguage, selectTabState } from '../../global/selectors';\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport ListItem from '../ui/ListItem';\nimport InputText from '../ui/InputText';\n\nimport styles from './MessageLanguageModal.module.scss';\n\ntype LanguageItem = {\n  langCode: string;\n  translatedName: string;\n  originalName: string;\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  activeTranslationLanguage?: string;\n  currentLanguageCode: string;\n};\n\nconst MessageLanguageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  messageId,\n  activeTranslationLanguage,\n  currentLanguageCode,\n}) => {\n  const { requestMessageTranslation, closeMessageLanguageModal } = getActions();\n\n  const [search, setSearch] = useState('');\n  const lang = useLang();\n\n  const handleSelect = useCallback((toLanguageCode: string) => {\n    if (!chatId || !messageId) return;\n\n    requestMessageTranslation({ chatId, id: messageId, toLanguageCode });\n    closeMessageLanguageModal();\n  }, [chatId, closeMessageLanguageModal, messageId, requestMessageTranslation]);\n\n  const handleSearch = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  }, []);\n\n  const translateLanguages = useMemo(() => SUPPORTED_TRANSLATION_LANGUAGES.map((langCode: string) => {\n    const translatedNames = new Intl.DisplayNames([currentLanguageCode], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n\n    const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n    const originalName = originalNames.of(langCode)!;\n\n    return {\n      langCode,\n      translatedName,\n      originalName,\n    } satisfies LanguageItem;\n  }), [currentLanguageCode]);\n\n  useEffect(() => {\n    if (!isOpen) setSearch('');\n  }, [isOpen]);\n\n  const filteredDisplayedLanguages = useMemo(() => {\n    if (!search.trim()) {\n      return translateLanguages;\n    }\n\n    return translateLanguages.filter(({ langCode, translatedName, originalName }) => (\n      translatedName.toLowerCase().includes(search.toLowerCase())\n      || originalName.toLowerCase().includes(search.toLowerCase())\n      || langCode.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [translateLanguages, search]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isSlim\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('Language')}\n      onClose={closeMessageLanguageModal}\n    >\n      <InputText\n        key=\"search\"\n        value={search}\n        onChange={handleSearch}\n        placeholder={lang('Search')}\n        teactExperimentControlled\n      />\n      <div className={buildClassName(styles.languages, 'custom-scroll')}>\n        {filteredDisplayedLanguages.map(({ langCode, originalName, translatedName }) => (\n          <ListItem\n            key={langCode}\n            className={styles.listItem}\n            secondaryIcon={activeTranslationLanguage === langCode ? 'check' : undefined}\n            disabled={activeTranslationLanguage === langCode}\n            multiline\n            narrow\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleSelect(langCode)}\n          >\n            <span className={buildClassName('title', styles.title)}>\n              {renderText(originalName, ['highlight'], { highlight: search })}\n            </span>\n            <span className={buildClassName('subtitle', styles.subtitle)}>\n              {renderText(translatedName, ['highlight'], { highlight: search })}\n            </span>\n          </ListItem>\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).messageLanguageModal || {};\n\n    const currentLanguageCode = selectLanguageCode(global);\n    const activeTranslationLanguage = chatId && messageId\n      ? selectRequestedTranslationLanguage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      activeTranslationLanguage,\n      currentLanguageCode,\n    };\n  },\n)(MessageLanguageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ty4iYfZBkv7TFGwTrzul\",\"list-item\":\"GXEouxz4KmZfOmlymVnB\",\"listItem\":\"GXEouxz4KmZfOmlymVnB\",\"title\":\"MpKdUudmoMIsoFkDFNbJ\",\"subtitle\":\"B0tluyEaLLlMRQ5TZMEP\",\"languages\":\"SxqwP1DiSMFc8Gh_KgfK\"};","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../global/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleDelete: openDeleteModal,\n    handleChatFolderChange: openChatFolderModal,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n      <ChatFolderModal\n        isOpen={isChatFolderModalOpen}\n        onClose={closeChatFolderModal}\n        chatId={chatId}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n  animationLevel: AnimationLevel;\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} animationLevel={animationLevel} withVideo />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n      animationLevel,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport {\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageIsSpoiler,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n  animationLevel?: AnimationLevel;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  animationLevel,\n  lastSyncTime,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n        withVideo\n        animationLevel={animationLevel}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={privateChatUser || chat}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n      />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      animationLevel: global.settings.byKey.animationLevel,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLang from '../../../hooks/useLang';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const chatSelectionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  useHorizontalScroll(chatSelectionRef, !localResults.length, true);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div\n          className=\"chat-selection no-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = selectTabState(global).globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport {\n  selectChat,\n} from '../../../global/selectors';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport ListItem from '../../ui/ListItem';\nimport TopicIcon from '../../common/TopicIcon';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const handleClick = useCallback(() => {\n    onClick(topicId);\n  }, [topicId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const topic = chat?.topics?.[topicId];\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n  lastSyncTime?: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openChat } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      openChat({ id: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, searchChatId, isMobile, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('Topics')}\n            </h3>\n            {foundTopicIds!.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = selectTabState(global).globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      lastSyncTime,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import type { GlobalState } from '../../../../global/types';\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { ISettings } from '../../../../types';\n\nimport { selectChat, selectTabState, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: string;\n  activeDownloads: Record<string, number[]>;\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const tabState = selectTabState(global);\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = tabState.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = tabState.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      mediaId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../global/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport ChatMessageResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <ChatMessageResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    onScreenSelect(SettingsScreens.Experimental);\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{lang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n      case SettingsScreens.DoNotTranslate:\n        return <h3>{lang('DoNotTranslate')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{lang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{lang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{lang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{lang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{lang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{lang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{lang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{lang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {lang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\nimport PremiumIcon from '../../common/PremiumIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n  canBuyPremium?: boolean;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUser,\n  sessionCount,\n  lastSyncTime,\n  canBuyPremium,\n}) => {\n  const {\n    loadProfilePhotos,\n    loadAuthorizations,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadAuthorizations();\n    }\n  }, [lastSyncTime, loadAuthorizations]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.langName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Stickers)}\n        >\n          {lang('StickersName')}\n        </ListItem>\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<PremiumIcon withGradient big />}\n            className=\"settings-main-menu-premium\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SettingsMain));\n","import React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport { debounce } from '../../util/schedulers';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^\\D([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length === 0 || (\n    username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username)\n  );\n}\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n\n    const isValid = isUsernameValid(newUsername);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent, FormEvent, RefObject } from 'react';\nimport useLang from '../../hooks/useLang';\nimport buildClassName from '../../util/buildClassName';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\ntype OwnProps = {\n  ref?: RefObject<HTMLTextAreaElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  maxLengthIndicator?: string;\n  tabIndex?: number;\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: ChangeEvent<HTMLTextAreaElement>) => void;\n  onInput?: (e: FormEvent<HTMLTextAreaElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLTextAreaElement>) => void;\n  noReplaceNewlines?: boolean;\n};\n\nconst TextArea: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  inputMode,\n  maxLength,\n  maxLengthIndicator,\n  tabIndex,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n  noReplaceNewlines,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  let textareaRef = useRef<HTMLTextAreaElement>(null);\n  if (ref) {\n    textareaRef = ref;\n  }\n\n  const lang = useLang();\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  useEffect(() => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n    textarea.style.height = '0';\n    textarea.style.height = `${textarea.scrollHeight}px`;\n  }, []);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    if (!noReplaceNewlines) {\n      const previousSelectionEnd = e.currentTarget.selectionEnd;\n      // TDesktop replaces newlines with spaces as well\n      e.currentTarget.value = e.currentTarget.value.replace(/\\n/g, ' ');\n      e.currentTarget.selectionEnd = previousSelectionEnd;\n    }\n    e.currentTarget.style.height = '0';\n    e.currentTarget.style.height = `${e.currentTarget.scrollHeight}px`;\n    onChange?.(e);\n  }, [noReplaceNewlines, onChange]);\n\n  return (\n    <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <textarea\n        ref={textareaRef}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={handleChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n      {maxLengthIndicator && (\n        <div className=\"max-length-indicator\">{maxLengthIndicator}</div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(TextArea);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './Draggable.module.scss';\nimport useLang from '../../hooks/useLang';\nimport buildStyle from '../../util/buildStyle';\n\ntype TPoint = {\n  x: number;\n  y: number;\n};\n\ntype DraggableState = {\n  isDragging: boolean;\n  origin: TPoint;\n  translation: TPoint;\n  width?: number;\n  height?: number;\n};\n\ntype OwnProps = {\n  children: React.ReactNode;\n  onDrag: (translation: TPoint, id: number | string) => void;\n  onDragEnd: NoneToVoidFunction;\n  id: number | string;\n  style?: string;\n  knobStyle?: string;\n  isDisabled?: boolean;\n};\n\nconst ZERO_POINT: TPoint = { x: 0, y: 0 };\n\nconst Draggable: FC<OwnProps> = ({\n  children,\n  id,\n  onDrag,\n  onDragEnd,\n  style: externalStyle,\n  knobStyle,\n  isDisabled,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [state, setState] = useState<DraggableState>({\n    isDragging: false,\n    origin: ZERO_POINT,\n    translation: ZERO_POINT,\n  });\n\n  const handleMouseDown = (e: React.MouseEvent | React.TouchEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    const { x, y } = getClientCoordinate(e);\n\n    setState({\n      ...state,\n      isDragging: true,\n      origin: { x, y },\n      width: ref.current?.offsetWidth,\n      height: ref.current?.offsetHeight,\n    });\n  };\n\n  const handleMouseMove = useCallback((e: MouseEvent | TouchEvent) => {\n    const { x, y } = getClientCoordinate(e);\n\n    const translation = {\n      x: x - state.origin.x,\n      y: y - state.origin.y,\n    };\n\n    setState((current) => ({\n      ...current,\n      translation,\n    }));\n\n    onDrag(translation, id);\n  }, [id, onDrag, state.origin.x, state.origin.y]);\n\n  const handleMouseUp = useCallback(() => {\n    requestAnimationFrame(() => {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n\n      onDragEnd();\n    });\n  }, [onDragEnd]);\n\n  useEffect(() => {\n    if (state.isDragging && isDisabled) {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n    }\n  }, [isDisabled, state.isDragging]);\n\n  useEffect(() => {\n    if (state.isDragging) {\n      window.addEventListener('touchmove', handleMouseMove);\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('touchend', handleMouseUp);\n      window.addEventListener('touchcancel', handleMouseUp);\n      window.addEventListener('mouseup', handleMouseUp);\n    } else {\n      window.removeEventListener('touchmove', handleMouseMove);\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('touchend', handleMouseUp);\n      window.removeEventListener('touchcancel', handleMouseUp);\n      window.removeEventListener('mouseup', handleMouseUp);\n\n      setState((current) => ({\n        ...current,\n        translation: ZERO_POINT,\n      }));\n    }\n\n    return () => {\n      if (state.isDragging) {\n        window.removeEventListener('touchmove', handleMouseMove);\n        window.removeEventListener('mousemove', handleMouseMove);\n        window.removeEventListener('touchend', handleMouseUp);\n        window.removeEventListener('touchcancel', handleMouseUp);\n        window.removeEventListener('mouseup', handleMouseUp);\n      }\n    };\n  }, [handleMouseMove, handleMouseUp, state.isDragging]);\n\n  const fullClassName = buildClassName(styles.container, state.isDragging && styles.isDragging);\n\n  const cssStyles = useMemo(() => {\n    return buildStyle(\n      state.isDragging && `transform: translate(${state.translation.x}px, ${state.translation.y}px)`,\n      state.width ? `width: ${state.width}px` : undefined,\n      state.height ? `height: ${state.height}px` : undefined,\n      externalStyle,\n    );\n  }, [externalStyle, state.height, state.isDragging, state.translation.x, state.translation.y, state.width]);\n\n  return (\n    <div style={cssStyles} className={fullClassName} ref={ref}>\n      {children}\n\n      {!isDisabled && (\n        <div\n          aria-label={lang('i18n_dragToSort')}\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.knob, 'draggable-knob')}\n          onMouseDown={handleMouseDown}\n          onTouchStart={handleMouseDown}\n          style={knobStyle}\n        >\n          <i className=\"icon-sort\" aria-hidden />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Draggable);\n\nfunction getClientCoordinate(e: MouseEvent | TouchEvent | React.MouseEvent | React.TouchEvent) {\n  let x;\n  let y;\n\n  if ('touches' in e) {\n    x = e.touches[0].clientX;\n    y = e.touches[0].clientY;\n  } else {\n    x = e.clientX;\n    y = e.clientY;\n  }\n\n  return { x, y };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"C9QYXaRLeCEFngOBl4S3\",\"isDragging\":\"vhGsRt79lQzzuXny9KG8\",\"knob\":\"oGgH1RraeCPayQnxA8C_\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"u8GGVdXgbKUMvoqqs0VJ\",\"header\":\"sPTmRsKHnc3FL9AubUaY\",\"description\":\"YqnFSIc98kYMRge1RrlJ\",\"sortableContainer\":\"pWxbEJm12NZb25lGmdwA\",\"item\":\"AWgYeVXfLin4VAmQzhKQ\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUsername } from '../../api/types';\n\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport buildClassName from '../../util/buildClassName';\nimport { isBetween } from '../../util/math';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 60;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePrevious(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm!.username,\n        isActive: !usernameForConfirm!.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm!.username,\n        isActive: !usernameForConfirm!.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('mb-2 no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">@{usernameData.username}</span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","import type { ChangeEvent } from 'react';\nimport React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { selectTabState, selectUser } from '../../../global/selectors';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport UsernameInput from '../../common/UsernameInput';\nimport TextArea from '../../ui/TextArea';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={currentUsername}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkedUsername={checkedUsername}\n            onChange={handleUsernameChange}\n          />\n\n          {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {editableUsername && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">{TME_LINK_PREFIX}{editableUsername}</span>\n            </p>\n          )}\n        </div>\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        editUsernameError,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'canAutoPlayGifs' |\n  'canAutoPlayVideos' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  canAutoPlayGifs,\n  canAutoPlayVideos,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayGifsChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayGifs: value });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayVideosChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayVideos: value });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={canAutoPlayGifs}\n          onCheck={handleCanAutoPlayGifsChange}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={canAutoPlayVideos}\n          onCheck={handleCanAutoPlayVideosChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'canAutoPlayGifs',\n      'canAutoPlayVideos',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { isBetween } from '../../../../util/math';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Draggable from '../../../ui/Draggable';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 68;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePrevious(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: lang('FilterAllChats'),\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"with-icon mb-2\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <i className=\"icon-add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"mb-2 no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                  >\n                    <span className=\"title\">\n                      {folder.title}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"mb-2 no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderText(folder.title, ['emoji'])}\n                    {isBlocked && <i className=\"icon-lock-badge settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">{folder.subtitle}</span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{renderText(folder.title, ['emoji'])}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../global/helpers';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  isRemoved?: boolean;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n}) => {\n  const {\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId!, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder as ApiChatFolder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }, [addChatFolder, dispatch, editChatFolder, includedChatIds.length, includedChatTypes, onReset, state]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIcon\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId } = global.chatFolders;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { isUserId } from '../../../../global/helpers';\nimport type { FolderChatType } from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\ntype StateProps = {\n  maxChats: number;\n};\n\nconst SettingsFoldersChatsPicker: FC<OwnProps & StateProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  maxChats,\n}) => {\n  const { openLimitReachedModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      if (selectedIds.length >= maxChats && mode === 'included') {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange, maxChats, mode, openLimitReachedModal]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <div key=\"header\">\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div className=\"picker-list-divider\" />\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </div>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatsPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useCallback } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport type {\n  FoldersState,\n  FolderEditDispatch,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, ISettings, TimeFormat } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  getSystemTheme, IS_IOS, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport switchTheme from '../../../util/switchTheme';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'timeFormat'\n  )> & {\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  const lang = useLang();\n\n  const APPEARANCE_THEME_OPTIONS: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n    if (newTheme !== theme) {\n      switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n    }\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo as ISettings['messageSendKeyCombo'] });\n  }, [setSettingOption]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={APPEARANCE_THEME_OPTIONS}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport type { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { validateFiles } from '../../../util/files';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current!, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\nimport { captureEvents } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { playNotifySound } from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasWebNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  canDisplayAutoarchiveSetting: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  canDisplayChatInTitle?: boolean;\n  privacyPhoneNumber?: ApiPrivacySettings;\n  privacyLastSeen?: ApiPrivacySettings;\n  privacyProfilePhoto?: ApiPrivacySettings;\n  privacyForwarding?: ApiPrivacySettings;\n  privacyVoiceMessages?: ApiPrivacySettings;\n  privacyGroupChats?: ApiPrivacySettings;\n  privacyPhoneCall?: ApiPrivacySettings;\n  privacyPhoneP2P?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  canDisplayAutoarchiveSetting,\n  shouldArchiveAndMuteNewNonContact,\n  canDisplayChatInTitle,\n  privacyPhoneNumber,\n  privacyLastSeen,\n  privacyProfilePhoto,\n  privacyForwarding,\n  privacyVoiceMessages,\n  privacyGroupChats,\n  privacyPhoneCall,\n  privacyPhoneP2P,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    showNotification,\n    setSettingOption,\n    updatePageTitle,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n    loadWebAuthorizations();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings, loadWebAuthorizations]);\n\n  useEffect(() => {\n    if (isActive) {\n      loadGlobalPrivacySettings();\n    }\n  }, [isActive, loadGlobalPrivacySettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleVoiceMessagesClick = useCallback(() => {\n    if (isCurrentUserPremium) {\n      onScreenSelect(SettingsScreens.PrivacyVoiceMessages);\n    } else {\n      showNotification({\n        message: lang('PrivacyVoiceMessagesPremiumOnly'),\n      });\n    }\n  }, [isCurrentUserPremium, lang, onScreenSelect, showNotification]);\n\n  const handleChatInTitleChange = useCallback((isChecked: boolean) => {\n    setSettingOption({\n      canDisplayChatInTitle: isChecked,\n    });\n    updatePageTitle();\n  }, []);\n\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings(isChecked);\n  }, [updateContentSettings]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    const { visibility } = setting || {};\n    const blockCount = setting ? setting.blockChatIds.length + setting.blockUserIds.length : 0;\n    const allowCount = setting ? setting.allowChatIds.length + setting.allowUserIds.length : 0;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount) total.push(`+${allowCount}`);\n\n    const exceptionString = total.length ? `(${total.join(',')})` : '';\n\n    switch (visibility) {\n      case 'everybody':\n        return `${lang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${lang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${lang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          {lang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        <ListItem\n          icon=\"key\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('Passcode')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.ActiveWebsites)}\n          >\n            {lang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneCall)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneP2P)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyP2P')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneP2P)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          disabled={!isCurrentUserPremium}\n          allowDisabledClick\n          rightElement={!isCurrentUserPremium && <i className=\"icon-lock-badge settings-icon-locked\" />}\n          className=\"no-icon\"\n          onClick={handleVoiceMessagesClick}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyVoiceMessages')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyVoiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canDisplayAutoarchiveSetting && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('NewChatsFromNonContacts')}\n          </h4>\n          <Checkbox\n            label={lang('ArchiveAndMute')}\n            subLabel={lang('ArchiveAndMuteInfo')}\n            checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n            onCheck={handleArchiveAndMuteChange}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_settings_window_system')}\n        </h4>\n        <Checkbox\n          label={lang('lng_settings_title_chat_name')}\n          checked={Boolean(canDisplayChatInTitle)}\n          onCheck={handleChatInTitleChange}\n        />\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={handleUpdateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n          canDisplayChatInTitle,\n        },\n        privacy,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n      appConfig,\n    } = global;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      canDisplayAutoarchiveSetting: Boolean(appConfig?.canDisplayAutoarchiveSetting),\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      privacyPhoneNumber: privacy.phoneNumber,\n      privacyLastSeen: privacy.lastSeen,\n      privacyProfilePhoto: privacy.profilePhoto,\n      privacyForwarding: privacy.forwards,\n      privacyVoiceMessages: privacy.voiceMessages,\n      privacyGroupChats: privacy.chatInvite,\n      privacyPhoneCall: privacy.phoneCall,\n      privacyPhoneP2P: privacy.phoneP2P,\n      canDisplayChatInTitle,\n    };\n  },\n)(SettingsPrivacy));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings, LangCode } from '../../../types';\nimport type { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\nimport { unique } from '../../../util/iteratees';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  lastSyncTime?: number;\n} & Pick<ISettings, 'languages' | 'language' | 'canTranslate' | 'doNotTranslate'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  languages,\n  language,\n  canTranslate,\n  doNotTranslate,\n  lastSyncTime,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadLanguages,\n    loadAttachBots,\n    setSettingOption,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && !languages?.length) {\n      loadLanguages();\n    }\n  }, [languages, lastSyncTime, loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode as LangCode });\n\n      loadAttachBots(); // Should be refetched every language change\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption, loadAttachBots]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  const handleShouldTranslateChange = useCallback((newValue: boolean) => {\n    setSettingOption({ canTranslate: newValue });\n  }, [setSettingOption]);\n\n  const doNotTranslateText = useMemo(() => {\n    const allDoNotTranslateLanguages = unique([...doNotTranslate, language]);\n    // Do not translate current language\n    if (allDoNotTranslateLanguages.length === 1) {\n      if (!languages) {\n        return lang('Loading');\n      }\n      return languages.find(({ langCode }) => langCode === language)?.nativeName;\n    }\n\n    return lang('Languages', allDoNotTranslateLanguages.length);\n  }, [doNotTranslate, lang, language, languages]);\n\n  const handleDoNotSelectOpen = useCallback(() => {\n    onScreenSelect(SettingsScreens.DoNotTranslate);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('ShowTranslateButton')}\n          checked={canTranslate}\n          onCheck={handleShouldTranslateChange}\n        />\n        {canTranslate && (\n          <ListItem\n            onClick={handleDoNotSelectOpen}\n          >\n            {lang('DoNotTranslate')}\n            <span className=\"settings-item__current-value\">{doNotTranslateText}</span>\n          </ListItem>\n        )}\n        <p className=\"settings-item-description mb-0 mt-1\">\n          {lang('lng_translate_settings_about')}\n        </p>\n      </div>\n      <div className=\"settings-item\">\n        {options ? (\n          <RadioGroup\n            name=\"language-settings\"\n            options={options}\n            selected={selectedLanguage}\n            loadingOption={isLoading ? selectedLanguage : undefined}\n            onChange={handleChange}\n          />\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, languages, canTranslate, doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      lastSyncTime: global.lastSyncTime,\n      languages,\n      language,\n      canTranslate,\n      doNotTranslate,\n    };\n  },\n)(SettingsLanguage));\n","import type { ApiPrivacyKey } from '../../../../types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n  }\n\n  return undefined;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"fb5F16dNcZnOl5zZNuRC\"};","import type { ChangeEvent, RefObject } from 'react';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport CropModal from './CropModal';\n\nimport styles from './SelectAvatar.module.scss';\n\ntype OwnProps = {\n  onChange: (file: File) => void;\n  inputRef: RefObject<HTMLInputElement>;\n};\n\nconst SelectAvatar: FC<OwnProps> = ({\n  onChange,\n  inputRef,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target?.files?.[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n  }, [onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  return (\n    <>\n      <input\n        type=\"file\"\n        onChange={handleSelectFile}\n        accept=\"image/png, image/jpeg\"\n        ref={inputRef}\n        className={styles.input}\n      />\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </>\n  );\n};\n\nexport default memo(SelectAvatar);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUser: ApiUser;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUser,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const fallbackPhoto = currentUser.fullInfo?.fallbackPhoto;\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (!currentUser.fullInfo) {\n      loadFullUser({ userId: currentUser.id });\n    }\n  }, [currentUser.fullInfo, currentUser.id, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: fallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, fallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(fallbackPhoto ? 'Privacy.ProfilePhoto.UpdatePublicPhoto' : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {fallbackPhoto && (\n        <ListItem\n          leftElement={<Avatar photo={fallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(fallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"pqiopoENn7dO3E8DQI3e\",\"fallbackPhoto\":\"pqiopoENn7dO3E8DQI3e\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getPrivacyKey } from './helpers/privacy';\nimport { selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n    currentUser: ApiUser;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n  currentUser,\n}) => {\n  const { setPrivacyVisibility } = getActions();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return lang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return lang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return lang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n\n      {screen === SettingsScreens.PrivacyProfilePhoto && exceptionLists.shouldShowAllowed && (\n        <SettingsPrivacyPublicProfilePhoto currentUser={currentUser} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    const currentUser = selectUser(global, global.currentUserId!)!;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyPhoneCall:\n        privacySettings = privacy.phoneCall;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n        privacySettings = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        privacySettings = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {\n        currentUser,\n      };\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n      currentUser,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { ApiSession } from '../../../../api/types';\n\nexport default function getSessionIcon(session: ApiSession): string {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"settingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"iconDevice\":\"a633Zas_0v2MAAY277vj\",\"iconDevice__android\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDeviceAndroid\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDevice__apple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDeviceApple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDevice__brave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDeviceBrave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDevice__chrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDeviceChrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDevice__edge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDeviceEdge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDevice__firefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDeviceFirefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDevice__linux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDeviceLinux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDevice__opera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDeviceOpera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDevice__safari\":\"XGWuju_22haQw0Qraor7\",\"iconDeviceSafari\":\"XGWuju_22haQw0Qraor7\",\"iconDevice__samsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDeviceSamsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDevice__ubuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDeviceUbuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDevice__unknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDeviceUnknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDevice__vivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDeviceVivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDevice__windows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDeviceWindows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDevice__xbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"iconDeviceXbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"title\":\"b9iUjEhCpOrQ4dPhn2KU\",\"note\":\"hTTCWbngkwJoEwtGFD9o\",\"date\":\"pUv5oVVNDZ5lBRzNzx3X\",\"box\":\"e32uLjclYAYuxxW1CAex\",\"actionHeader\":\"xwSMwr4aHsrRVIVInLEo\",\"actionName\":\"tSrCe7E_Iom1nGuh2Gs3\",\"headerButton\":\"N0buK669iHOZ1hN_H7Ik\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport getSessionIcon from './helpers/getSessionIcon';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\nimport Button from '../../ui/Button';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName} {renderingSession?.appVersion},{' '}\n          {renderingSession?.platform} {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","/* eslint-disable react/jsx-no-bind */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // eslint-disable-next-line max-len\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)} icon-device`}>\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p>{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)} icon-device`}\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OeRWKjYQC6t7Uxv8I3j0\",\"avatar\":\"oy_023CG29VsnL9L5ulf\",\"title\":\"bg8UD_Pu2JWogmjuvVXg\",\"note\":\"TgiK64wG1hkOWSiXybQf\",\"box\":\"HSyJbRkyhkeT0s2QA4Ku\",\"action-header\":\"AQX7GM28GeWO4b1bXTNK\",\"actionHeader\":\"AQX7GM28GeWO4b1bXTNK\",\"action-name\":\"_VJHBZTk5qdYimQAoCWe\",\"actionName\":\"_VJHBZTk5qdYimQAoCWe\",\"header-button\":\"hlKLEbMQAsx572pUREy0\",\"headerButton\":\"hlKLEbMQAsx572pUREy0\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n  animationLevel: AnimationLevel;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  animationLevel,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar className={styles.avatar} user={renderingBot} size=\"large\" animationLevel={animationLevel} withVideo />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n  return {\n    session,\n    bot,\n    animationLevel: global.settings.byKey.animationLevel,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"n3bBygyO4j5MQyJ70Twt\",\"clear-help\":\"vUICy6ZQCYFSrvvxXe7f\",\"clearHelp\":\"vUICy6ZQCYFSrvvxXe7f\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiWebSession } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n  animationLevel: AnimationLevel;\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} user={bot} size=\"tiny\" animationLevel={animationLevel} withVideo />\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}, {session.browser}, {session.platform}\n          </span>\n          <span className=\"subtitle\">{session.ip} {session.region}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockContact,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, search)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { getMainUsername, isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\nimport FullNameTitle from '../../common/FullNameTitle';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, contactId) => {\n      const isPrivate = isUserId(contactId);\n      const user = isPrivate ? usersByIds[contactId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[contactId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n    const userOrChat = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          {userOrChat && <FullNameTitle peer={userOrChat} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (<div className=\"contact-username\" dir=\"auto\">@{userMainUsername}</div>)}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport renderText from '../../../common/helpers/renderText';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../common/PasswordMonkey';\nimport PasswordForm from '../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport InputText from '../../../ui/InputText';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n\n        return chat && isUserId(chat.id) && chat.id !== currentUserId;\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysAllowPlaceholder') : lang('NeverAllowPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysAllow') : lang('NeverAllow')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, config } = global;\n\n    return {\n      availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram WebZ.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram WebZ and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeChangePasscodeCurrent)}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeTurnOff)}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { decryptSession } from '../../../../util/passcode';\n\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onScreenSelect,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeNewPasscode);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeNewPasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeCongratulations);\n  }, [onScreenSelect, onSetPasscode, passcode, setPasscode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      onScreenSelect(SettingsScreens.PasscodeChangePasscodeNew);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onScreenSelect, onSetPasscode, setPasscodeError]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeChangePasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      onScreenSelect(SettingsScreens.Privacy);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [clearPasscode, lang, onScreenSelect, setPasscodeError]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport ListItem from '../ui/ListItem';\nimport Button from '../ui/Button';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noAnimate?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noAnimate,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  }, [firstSticker, onClick]);\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noAnimate={noAnimate}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noAnimate={noAnimate}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      narrow\n      className={buildClassName('StickerSetCard', className)}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-menu-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings } from '../../../types';\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport StickerSetCard from '../../common/StickerSetCard';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'shouldSuggestStickers' |\n    'shouldLoopStickers'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  availableReactions,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const handleShouldLoopStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldLoopStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={handleShouldLoopStickersChange}\n        />\n        <ListItem\n          className=\"mt-4\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.CustomEmoji)}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(SettingsStickers));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n    };\n  },\n)(SettingsCustomEmoji));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"obOZMv8VwZgTltdIBhFA\",\"item\":\"lDWs17bpqtGWDX0EJr0y\",\"checkbox\":\"BShBwPkgjleuDsjyfnNk\",\"languages\":\"whcbPSSJLGdGCaY66qfR\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ISettings } from '../../../types';\nimport type { IRadioOption } from '../../ui/CheckboxGroup';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport { partition, unique } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\n\nimport styles from './SettingsDoNotTranslate.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'language' | 'doNotTranslate'>;\n\nconst SettingsDoNotTranslate: FC<OwnProps & StateProps> = ({\n  isActive,\n  language,\n  doNotTranslate,\n  onReset,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n  const [displayedOptions, setDisplayedOptions] = useState<IRadioOption[]>([]);\n  const [search, setSearch] = useState('');\n\n  const options: IRadioOption[] = useMemo(() => {\n    return SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n      disabled: langCode === language,\n    }));\n  }, [language]);\n\n  const allSelected = useMemo(() => {\n    return unique([...doNotTranslate, language]);\n  }, [doNotTranslate, language]);\n\n  useEffect(() => {\n    if (!isActive) setSearch('');\n  }, [isActive]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (prevIsActive === isActive) return;\n    if (isActive && displayedOptions.length) return;\n\n    const [selected, unselected] = partition(options, (option) => allSelected.includes(option.value));\n    const current = selected.find((option) => option.value === language);\n    const selectedFiltered = selected.filter((option) => option.value !== language);\n\n    setDisplayedOptions([current!, ...selectedFiltered, ...unselected]);\n  }, [isActive, allSelected, displayedOptions.length, language, options]);\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = event.currentTarget;\n    let newDoNotTranslate: string[];\n    if (checked) {\n      newDoNotTranslate = unique([...doNotTranslate, value]);\n    } else {\n      newDoNotTranslate = doNotTranslate.filter((v) => v !== value);\n    }\n\n    setSettingOption({\n      doNotTranslate: newDoNotTranslate,\n    });\n  }, [doNotTranslate, setSettingOption]);\n\n  const handleSearch = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  }, []);\n\n  const filteredDisplayedOptions = useMemo(() => {\n    if (!search.trim()) {\n      return displayedOptions;\n    }\n\n    return displayedOptions.filter((option) => (\n      option.label.toLowerCase().includes(search.toLowerCase())\n      || option.subLabel?.toLowerCase().includes(search.toLowerCase())\n      || option.value.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [displayedOptions, search]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content custom-scroll')}>\n      <div className={buildClassName(styles.item, 'settings-item')}>\n        <InputText\n          key=\"search\"\n          value={search}\n          onChange={handleSearch}\n          placeholder={lang('Search')}\n          teactExperimentControlled\n        />\n        <div className={buildClassName(styles.languages, 'radio-group custom-scroll')}>\n          {filteredDisplayedOptions.map((option) => (\n            <Checkbox\n              className={styles.checkbox}\n              label={option.label}\n              subLabel={option.subLabel}\n              checked={allSelected.includes(option.value)}\n              value={option.value}\n              disabled={option.disabled}\n              key={option.value}\n              onChange={handleChange}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      language,\n      doNotTranslate,\n    };\n  },\n)(SettingsDoNotTranslate));\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { getActions } from '../../../global';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsExperimental: FC<OwnProps> = ({\n  isActive,\n  onReset,\n}) => {\n  const { requestConfetti } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => requestConfetti()}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsExperimental);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsDoNotTranslate from './SettingsDoNotTranslate';\nimport SettingsExperimental from './SettingsExperimental';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    if (forceReturnToChatList === true) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n              || screen === SettingsScreens.GeneralChatBackgroundColor\n              || screen === SettingsScreens.GeneralChatBackground\n              || screen === SettingsScreens.QuickReaction\n              || screen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage\n            isActive={isScreenActive || screen === SettingsScreens.DoNotTranslate}\n            onReset={handleReset}\n            onScreenSelect={onScreenSelect}\n          />\n        );\n      case SettingsScreens.DoNotTranslate:\n        return (\n          <SettingsDoNotTranslate isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n            ripple={!isMobile}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { LeftColumnContent, SettingsScreens } from '../../types';\nimport type { FolderEditDispatch } from '../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../global/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isForumPanelOpen?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  archiveSettings,\n  onReset,\n  onTopicSearch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  foldersDispatch,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDisplayArchiveInChats = useCallback(() => {\n    updateArchiveSettings({ isHidden: false });\n  }, [updateArchiveSettings]);\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransition(!isForumPanelOpen);\n\n  const { shouldRenderForumPanel, handleForumPanelAnimationEnd } = useForumPanelRender(isForumPanelOpen);\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelOpen && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n        {archiveSettings.isHidden && (\n          <DropdownMenu\n            className=\"archived-chats-more-menu\"\n            positionX=\"right\"\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            <MenuItem icon=\"archive-from-main\" onClick={handleDisplayArchiveInChats}>\n              {lang('lng_context_archive_to_list')}\n            </MenuItem>\n          </DropdownMenu>\n        )}\n      </div>\n      <ChatList\n        folderType=\"archived\"\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        foldersDispatch={foldersDispatch}\n        archiveSettings={archiveSettings}\n      />\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID).map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('FilterAddTo')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import type { ApiMessage } from '../../../../api/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageContact,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport {\n  CLIPBOARD_ITEM_SUPPORTED,\n  copyHtmlToClipboard,\n  copyImageToClipboard,\n} from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\nimport { renderMessageText } from '../../../common/helpers/renderMessageText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else if (hasSelection) {\n          document.execCommand('copy');\n        } else {\n          const clipboardText = renderMessageText(\n            message, undefined, undefined, undefined, undefined, undefined, true,\n          );\n          if (clipboardText) copyHtmlToClipboard(clipboardText.join(''), getMessageTextWithSpoilers(message)!);\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionSelectorReaction.scss';\n\nconst REACTION_SIZE = IS_COMPACT_MENU ? 24 : 32;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  previewIndex: number;\n  isReady?: boolean;\n  chosen?: boolean;\n  onToggleReaction: (reaction: ApiReaction) => void;\n};\n\nconst cn = createClassNameBuilder('ReactionSelectorReaction');\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({\n  reaction,\n  previewIndex,\n  isReady,\n  chosen,\n  onToggleReaction,\n}) => {\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady);\n\n  const [isActivated, activate, deactivate] = useFlag();\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const shouldRenderStatic = !isReady || !isAnimationLoaded;\n  const shouldRenderAnimated = Boolean(isReady && mediaData);\n\n  function handleClick() {\n    onToggleReaction(reaction.reaction);\n  }\n\n  return (\n    <div\n      className={cn('&', IS_COMPACT_MENU && 'compact', chosen && 'chosen')}\n      onClick={handleClick}\n      onMouseEnter={isReady ? activate : undefined}\n    >\n      {shouldRenderStatic && (\n        <div\n          className={cn('static')}\n          style={`background-position-x: ${previewIndex * -REACTION_SIZE}px;`}\n        />\n      )}\n      {shouldRenderAnimated && (\n        <AnimatedSticker\n          tgsUrl={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import React, {\n  memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiReaction, ApiReactionCount,\n} from '../../../api/types';\n\nimport { getTouchY } from '../../../util/scrollLock';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport { isSameReaction, canSendReaction, getReactionUniqueKey } from '../../../global/helpers';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\n\nimport './ReactionSelector.scss';\n\ntype OwnProps = {\n  enabledReactions?: ApiChatReactions;\n  onToggleReaction: (reaction: ApiReaction) => void;\n  isPrivate?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  currentReactions?: ApiReactionCount[];\n  maxUniqueReactions?: number;\n  isReady?: boolean;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\n\nconst ReactionSelector: FC<OwnProps> = ({\n  availableReactions,\n  enabledReactions,\n  currentReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isReady,\n  onToggleReaction,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const itemsScrollRef = useRef<HTMLDivElement>(null);\n  useHorizontalScroll(itemsScrollRef);\n\n  const handleWheel = (e: React.WheelEvent | React.TouchEvent) => {\n    const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n    if (deltaY && e.cancelable) {\n      e.preventDefault();\n    }\n  };\n\n  const reactionsToRender = useMemo(() => {\n    return availableReactions?.map((availableReaction) => {\n      if (availableReaction.isInactive) return undefined;\n      if (!isPrivate && (!enabledReactions || !canSendReaction(availableReaction.reaction, enabledReactions))) {\n        return undefined;\n      }\n      if (maxUniqueReactions && currentReactions && currentReactions.length >= maxUniqueReactions\n        && !currentReactions.some(({ reaction }) => isSameReaction(reaction, availableReaction.reaction))) {\n        return undefined;\n      }\n      return availableReaction;\n    }) || [];\n  }, [availableReactions, currentReactions, enabledReactions, isPrivate, maxUniqueReactions]);\n\n  const userReactionIndexes = useMemo(() => {\n    const chosenReactions = currentReactions?.filter(({ chosenOrder }) => chosenOrder !== undefined) || [];\n    return new Set(chosenReactions.map(({ reaction }) => (\n      reactionsToRender.findIndex((r) => r && isSameReaction(r.reaction, reaction))\n    )));\n  }, [currentReactions, reactionsToRender]);\n\n  if (!reactionsToRender.length) return undefined;\n\n  return (\n    <div className={cn('&', IS_COMPACT_MENU && 'compact')} onWheelCapture={handleWheel} onTouchMove={handleWheel}>\n      <div className={cn('bubble-big')} />\n      <div className={cn('bubble-small')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('items', ['no-scrollbar'])} ref={itemsScrollRef}>\n          {reactionsToRender.map((reaction, i) => {\n            if (!reaction) return undefined;\n            return (\n              <ReactionSelectorReaction\n                key={getReactionUniqueKey(reaction.reaction)}\n                previewIndex={i}\n                isReady={isReady}\n                onToggleReaction={onToggleReaction}\n                reaction={reaction}\n                chosen={userReactionIndexes.has(i)}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction,\n  ApiChatReactions,\n  ApiMessage,\n  ApiReaction,\n  ApiSponsoredMessage,\n  ApiStickerSet,\n  ApiThreadInfo,\n  ApiUser,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/Skeleton';\nimport Avatar from '../../common/Avatar';\nimport ReactionSelector from './ReactionSelector';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  availableReactions?: ApiAvailableReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage | ApiSponsoredMessage;\n  canSendNow?: boolean;\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions?: number;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canBuyPremium?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentUsers?: ApiUser[];\n  noReplies?: boolean;\n  hasCustomEmoji?: boolean;\n  customEmojiSets?: ApiStickerSet[];\n  onReply?: () => void;\n  onOpenThread?: VoidFunction;\n  onEdit?: () => void;\n  onPin?: () => void;\n  onUnpin?: () => void;\n  onForward?: () => void;\n  onDelete?: () => void;\n  onReport?: () => void;\n  onFaveSticker?: () => void;\n  onUnfaveSticker?: () => void;\n  onSelect?: () => void;\n  onSend?: () => void;\n  onReschedule?: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: () => void;\n  onDownload?: () => void;\n  onSaveGif?: () => void;\n  onCancelVote?: () => void;\n  onClosePoll?: () => void;\n  onShowSeenBy?: () => void;\n  onShowReactors?: () => void;\n  onAboutAds?: () => void;\n  onSponsoredHide?: () => void;\n  onTranslate?: () => void;\n  onShowOriginal?: () => void;\n  onSelectLanguage?: () => void;\n  onToggleReaction?: (reaction: ApiReaction) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  availableReactions,\n  isOpen,\n  message,\n  isPrivate,\n  isCurrentUserPremium,\n  enabledReactions,\n  maxUniqueReactions,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canBuyPremium,\n  canReply,\n  canEdit,\n  noReplies,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  isDownloading,\n  repliesThreadInfo,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canShowReactionList,\n  seenByRecentUsers,\n  hasCustomEmoji,\n  customEmojiSets,\n  onReply,\n  onOpenThread,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onCancelVote,\n  onClosePoll,\n  onShowSeenBy,\n  onShowReactors,\n  onToggleReaction,\n  onCopyMessages,\n  onAboutAds,\n  onSponsoredHide,\n  onTranslate,\n  onShowOriginal,\n  onSelectLanguage,\n}) => {\n  const { showNotification, openStickerSet, openCustomEmojiSets } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions;\n  const withReactions = canShowReactionList && !noReactions;\n  const isSponsoredMessage = !('id' in message);\n  const messageId = !isSponsoredMessage ? message.id : '';\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleAfterCopy = useCallback(() => {\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    onClose();\n  }, [lang, onClose, showNotification]);\n\n  const handleOpenCustomEmojiSets = useCallback(() => {\n    if (!customEmojiSets) return;\n    if (customEmojiSets.length === 1) {\n      openStickerSet({\n        stickerSetInfo: {\n          shortName: customEmojiSets[0].shortName,\n        },\n      });\n    } else {\n      openCustomEmojiSets({\n        setIds: customEmojiSets.map((set) => set.id),\n      });\n    }\n    onClose();\n  }, [customEmojiSets, onClose, openCustomEmojiSets, openStickerSet]);\n\n  const copyOptions = isSponsoredMessage\n    ? []\n    : getMessageCopyOptions(\n      message, handleAfterCopy, canCopyLink ? onCopyLink : undefined, onCopyMessages, onCopyNumber,\n    );\n\n  const getTriggerElement = useCallback(() => {\n    return isSponsoredMessage\n      ? document.querySelector('.Transition__slide--active > .MessageList .SponsoredMessage')\n      : document.querySelector(`.Transition__slide--active > .MessageList div[data-message-id=\"${messageId}\"]`);\n  }, [isSponsoredMessage, messageId]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.Transition__slide--active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const getLayout = useCallback(() => {\n    const extraHeightAudioPlayer = (isMobile\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessage-wrapper');\n    const extraHeightPinned = (((isMobile && !extraHeightAudioPlayer)\n      || (!isMobile && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n    };\n  }, [isMobile, withReactions]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useContextMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionSelector');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {withReactions && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          currentReactions={!isSponsoredMessage ? message.reactions?.results : undefined}\n          maxUniqueReactions={maxUniqueReactions}\n          onToggleReaction={onToggleReaction!}\n          isPrivate={isPrivate}\n          availableReactions={availableReactions}\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n        />\n      )}\n\n      <div\n        className=\"scrollable-content custom-scroll\"\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {/* {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>} */}\n        {/* {canReschedule && ( */}\n        {/*   <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem> */}\n        {/* )} */}\n        {/* {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>} */}\n        {/* {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && ( */}\n        {/*   <MenuItem icon=\"replies\" onClick={onOpenThread}> */}\n        {/*     {lang('Conversation.ContextViewReplies', repliesThreadInfo!.messagesCount, 'i')} */}\n        {/*   </MenuItem> */}\n        {/* )} */}\n        {/* {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>} */}\n        {/* {canFaveSticker && ( */}\n        {/*   <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem> */}\n        {/* )} */}\n        {/* {canUnfaveSticker && ( */}\n        {/*   <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem> */}\n        {/* )} */}\n        {/* {canTranslate && <MenuItem icon=\"language\" onClick={onTranslate}>{lang('TranslateMessage')}</MenuItem>} */}\n        {/* {canShowOriginal && <MenuItem icon=\"language\" onClick={onShowOriginal}>{lang('ShowOriginalButton')}</MenuItem>} */}\n        {/* {canSelectLanguage && ( */}\n        {/*   <MenuItem icon=\"web\" onClick={onSelectLanguage}>{lang('lng_settings_change_lang')}</MenuItem> */}\n        {/* )} */}\n        {canCopy && copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {/* {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>} */}\n        {/* {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>} */}\n        {/* {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>} */}\n        {/* {canRevote && <MenuItem icon=\"revote\" onClick={onCancelVote}>{lang('lng_polls_retract')}</MenuItem>} */}\n        {/* {canClosePoll && <MenuItem icon=\"stop\" onClick={onClosePoll}>{lang('lng_polls_stop')}</MenuItem>} */}\n        {/* {canDownload && ( */}\n        {/*   <MenuItem icon=\"download\" onClick={onDownload}> */}\n        {/*     {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')} */}\n        {/*   </MenuItem> */}\n        {/* )} */}\n        {/* {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>} */}\n        {/* {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>} */}\n        {/* {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>} */}\n        {/* {(canShowSeenBy || canShowReactionsCount) && !isSponsoredMessage && ( */}\n        {/*   <MenuItem */}\n        {/*     className=\"MessageContextMenu--seen-by\" */}\n        {/*     icon={canShowReactionsCount ? 'heart-outline' : 'group'} */}\n        {/*     onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy} */}\n        {/*     disabled={!canShowReactionsCount && !message.seenByUserIds?.length} */}\n        {/*   > */}\n        {/*     <span className=\"MessageContextMenu--seen-by-label\"> */}\n        {/*       {canShowReactionsCount && message.reactors?.count ? ( */}\n        {/*         canShowSeenBy && message.seenByUserIds?.length */}\n        {/*           ? lang( */}\n        {/*             'Chat.OutgoingContextMixedReactionCount', */}\n        {/*             [message.reactors.count, message.seenByUserIds.length], */}\n        {/*           ) */}\n        {/*           : lang('Chat.ContextReactionCount', message.reactors.count, 'i') */}\n        {/*       ) : ( */}\n        {/*         message.seenByUserIds?.length === 1 && seenByRecentUsers */}\n        {/*           ? renderText(getUserFullName(seenByRecentUsers[0])!) */}\n        {/*           : (message.seenByUserIds?.length */}\n        {/*             ? lang('Conversation.ContextMenuSeen', message.seenByUserIds.length, 'i') */}\n        {/*             : lang('Conversation.ContextMenuNoViews') */}\n        {/*           ) */}\n        {/*       )} */}\n        {/*     </span> */}\n        {/*     <div className=\"avatars\"> */}\n        {/*       {seenByRecentUsers?.map((user) => ( */}\n        {/*         <Avatar */}\n        {/*           size=\"micro\" */}\n        {/*           user={user} */}\n        {/*         /> */}\n        {/*       ))} */}\n        {/*     </div> */}\n        {/*   </MenuItem> */}\n        {/* )} */}\n        {/* {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>} */}\n        {/* {hasCustomEmoji && ( */}\n        {/*   <> */}\n        {/*     <MenuSeparator /> */}\n        {/*     {!customEmojiSets && ( */}\n        {/*       <> */}\n        {/*         <Skeleton inline className=\"menu-loading-row\" /> */}\n        {/*         <Skeleton inline className=\"menu-loading-row\" /> */}\n        {/*       </> */}\n        {/*     )} */}\n        {/*     {customEmojiSets && customEmojiSets.length === 1 && ( */}\n        {/*       <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\"> */}\n        {/*         {renderText(lang('MessageContainsEmojiPack', customEmojiSets[0].title), ['simple_markdown', 'emoji'])} */}\n        {/*       </MenuItem> */}\n        {/*     )} */}\n        {/*     {customEmojiSets && customEmojiSets.length > 1 && ( */}\n        {/*       <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\"> */}\n        {/*         {renderText(lang('MessageContainsEmojiPacks', customEmojiSets.length), ['simple_markdown'])} */}\n        {/*       </MenuItem> */}\n        {/*     )} */}\n        {/*   </> */}\n        {/* )} */}\n        {/* {isSponsoredMessage && <MenuItem icon=\"help\" onClick={onAboutAds}>{lang('SponsoredMessageInfo')}</MenuItem>} */}\n        {/* {isSponsoredMessage && onSponsoredHide && ( */}\n        {/*   <MenuItem icon=\"stop\" onClick={onSponsoredHide}>{lang('HideAd')}</MenuItem> */}\n        {/* )} */}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type {\n  ApiAvailableReaction, ApiStickerSetInfo, ApiMessage, ApiStickerSet, ApiChatReactions, ApiReaction, ApiThreadInfo,\n} from '../../../api/types';\nimport type { IAlbum, IAnchorPosition } from '../../../types';\n\nimport {\n  selectActiveDownloadIds,\n  selectAllowedMessageActions,\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsMessageProtected,\n  selectIsPremiumPurchaseBlocked,\n  selectMessageCustomEmojiSets,\n  selectMessageTranslations,\n  selectRequestedTranslationLanguage,\n  selectStickerSet,\n} from '../../../global/selectors';\nimport {\n  isActionMessage, isChatChannel,\n  isChatGroup, isOwnMessage, areReactionsEmpty, isUserId, isMessageLocal, getMessageVideo, getChatMessageLink,\n} from '../../../global/helpers';\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useSchedule from '../../../hooks/useSchedule';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportModal from '../../common/ReportModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  noReplies?: boolean;\n  detectedLanguage?: string;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  repliesThreadInfo?: ApiThreadInfo;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  customEmojiSetsInfo?: ApiStickerSetInfo[];\n  customEmojiSets?: ApiStickerSet[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canBuyPremium?: boolean;\n  canShowReactionList?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  activeDownloads: number[];\n  canShowSeenBy?: boolean;\n  enabledReactions?: ApiChatReactions;\n  canScheduleUntilOnline?: boolean;\n  maxUniqueReactions?: number;\n  threadId?: number;\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  customEmojiSetsInfo,\n  customEmojiSets,\n  album,\n  anchor,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  repliesThreadInfo,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canEdit,\n  enabledReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isCurrentUserPremium,\n  canForward,\n  canBuyPremium,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  activeDownloads,\n  noReplies,\n  canShowSeenBy,\n  canScheduleUntilOnline,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  threadId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    openChat,\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n    loadStickers,\n    cancelPollVote,\n    closePoll,\n    toggleReaction,\n    requestMessageTranslation,\n    showOriginalMessage,\n    openMessageLanguageModal,\n  } = getActions();\n\n  const lang = useLang();\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isClosePollDialogOpen, openClosePollDialog, closeClosePollDialog] = useFlag();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, onClose, message.date);\n\n  // `undefined` indicates that emoji are present and loading\n  const hasCustomEmoji = customEmojiSetsInfo === undefined || Boolean(customEmojiSetsInfo.length);\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (customEmojiSetsInfo?.length && customEmojiSets?.length !== customEmojiSetsInfo.length) {\n      customEmojiSetsInfo.forEach((set) => {\n        loadStickers({ stickerSetInfo: set });\n      });\n    }\n  }, [customEmojiSetsInfo, customEmojiSets, loadStickers]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentUsers = useMemo(() => {\n    if (message.reactions?.recentReactions?.length) {\n      // No need for expensive global updates on users, so we avoid them\n      const usersById = getGlobal().users.byId;\n\n      const uniqueReactors = new Set(message.reactions?.recentReactions?.map(({ userId }) => usersById[userId]));\n\n      return Array.from(uniqueReactors).filter(Boolean).slice(0, 3);\n    }\n\n    if (!message.seenByUserIds) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    return message.seenByUserIds?.slice(0, 3).map((id) => usersById[id]).filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByUserIds]);\n\n  const isDownloading = album ? album.messages.some((msg) => activeDownloads.includes(msg.id))\n    : activeDownloads.includes(message.id);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleOpenThread = useCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, openChat]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker! });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker! });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleCancelVote = useCallback(() => {\n    closeMenu();\n    cancelPollVote({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, cancelPollVote]);\n\n  const handlePollClose = useCallback(() => {\n    closeMenu();\n    closePoll({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, closePoll]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleRescheduleMessage = useCallback((scheduledAt: number) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt,\n    });\n    onClose();\n  }, [message.chatId, message.id, onClose, rescheduleMessage]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    requestCalendar(handleRescheduleMessage);\n  }, [handleRescheduleMessage, requestCalendar]);\n\n  const handleOpenSeenByModal = useCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message.chatId, message.id, openSeenByModal]);\n\n  const handleOpenReactorListModal = useCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, openReactorListModal, message.chatId, message.id]);\n\n  const handleCopyMessages = useCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  }, [closeMenu, copyMessagesByIds]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(getChatMessageLink(message.chatId, chatUsername, threadId, message.id));\n    closeMenu();\n  }, [chatUsername, closeMenu, message, threadId]);\n\n  const handleCopyNumber = useCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  }, [closeMenu, message]);\n\n  const handleDownloadClick = useCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  }, [album, message, closeMenu, isDownloading, cancelMessageMediaDownload, downloadMessageMedia]);\n\n  const handleSaveGif = useCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video! });\n    closeMenu();\n  }, [closeMenu, message, saveGif]);\n\n  const handleToggleReaction = useCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId, messageId: message.id, reaction,\n    });\n    closeMenu();\n  }, [closeMenu, message, toggleReaction]);\n\n  const handleTranslate = useCallback(() => {\n    requestMessageTranslation({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message, requestMessageTranslation]);\n\n  const handleShowOriginal = useCallback(() => {\n    showOriginalMessage({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message, showOriginalMessage]);\n\n  const handleSelectLanguage = useCallback(() => {\n    openMessageLanguageModal({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, openMessageLanguageModal]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        availableReactions={availableReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isCurrentUserPremium={isCurrentUserPremium}\n        canBuyPremium={canBuyPremium}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        maxUniqueReactions={maxUniqueReactions}\n        anchor={anchor}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        repliesThreadInfo={repliesThreadInfo}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canRevote={canRevote}\n        canClosePoll={canClosePoll}\n        canShowSeenBy={canShowSeenBy}\n        canTranslate={canTranslate}\n        canShowOriginal={canShowOriginal}\n        canSelectLanguage={canSelectLanguage}\n        hasCustomEmoji={hasCustomEmoji}\n        customEmojiSets={customEmojiSets}\n        isDownloading={isDownloading}\n        seenByRecentUsers={seenByRecentUsers}\n        noReplies={noReplies}\n        onOpenThread={handleOpenThread}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onCancelVote={handleCancelVote}\n        onClosePoll={openClosePollDialog}\n        onShowSeenBy={handleOpenSeenByModal}\n        onToggleReaction={handleToggleReaction}\n        onShowReactors={handleOpenReactorListModal}\n        onTranslate={handleTranslate}\n        onShowOriginal={handleShowOriginal}\n        onSelectLanguage={handleSelectLanguage}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <ConfirmDialog\n        isOpen={isClosePollDialogOpen}\n        onClose={closeClosePollDialog}\n        text={lang('lng_polls_stop_warning')}\n        confirmLabel={lang('lng_polls_stop_sure')}\n        confirmHandler={handlePollClose}\n      />\n      {canReschedule && calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType, detectedLanguage }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloadIds(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers, maxUniqueReactions } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n      canRevote,\n      canClosePoll,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n\n    const isOwn = isOwnMessage(message);\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const canShowSeenBy = Boolean(chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwn\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isPrivate = chat && isUserId(chat.id);\n    const isAction = isActionMessage(message);\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const isProtected = selectIsMessageProtected(global, message);\n    const canCopyNumber = Boolean(message.content.contact);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const customEmojiSetsInfo = selectMessageCustomEmojiSets(global, message);\n    const customEmojiSetsNotFiltered = customEmojiSetsInfo?.map((set) => selectStickerSet(global, set));\n    const customEmojiSets = customEmojiSetsNotFiltered?.every<ApiStickerSet>(Boolean)\n      ? customEmojiSetsNotFiltered : undefined;\n\n    const translationRequestLanguage = selectRequestedTranslationLanguage(global, message.chatId, message.id);\n    const hasTranslation = translationRequestLanguage\n      ? Boolean(selectMessageTranslations(global, message.chatId, translationRequestLanguage)[message.id]?.text)\n      : undefined;\n\n    const { canTranslate: isTranslationEnabled, language, doNotTranslate } = global.settings.byKey;\n\n    const canTranslateLanguage = !detectedLanguage\n      || (!doNotTranslate.includes(detectedLanguage) && language !== detectedLanguage);\n    const canTranslate = IS_TRANSLATION_SUPPORTED && isTranslationEnabled && message.content.text\n      && canTranslateLanguage && !isLocal && !isScheduled && !isAction && !hasTranslation && !message.emojiOnlyCount;\n\n    return {\n      availableReactions: global.availableReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: canCopyNumber || (!isProtected && canCopy),\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      canRevote,\n      canClosePoll: !isScheduled && canClosePoll,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.isForbidden ? undefined : chat?.fullInfo?.enabledReactions,\n      maxUniqueReactions,\n      isPrivate,\n      isCurrentUserPremium,\n      hasFullInfo: Boolean(chat?.fullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n      customEmojiSetsInfo,\n      customEmojiSets,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, message.chatId),\n      threadId,\n      canTranslate,\n      canShowOriginal: hasTranslation,\n      canSelectLanguage: hasTranslation,\n    };\n  },\n)(ContextMenuContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiSponsoredMessage;\n  anchor: IAnchorPosition;\n  onAboutAds: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  canBuyPremium?: boolean;\n};\n\nconst SponsoredMessageContextMenuContainer: FC<OwnProps & StateProps> = ({\n  message,\n  anchor,\n  onAboutAds,\n  onClose,\n  onCloseAnimationEnd,\n  canBuyPremium,\n}) => {\n  const { openPremiumModal } = getActions();\n\n  const [isMenuOpen, , closeMenu] = useFlag(true);\n  const { transitionClassNames } = useShowTransition(isMenuOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleAboutAdsOpen = useCallback(() => {\n    onAboutAds();\n    closeMenu();\n  }, [closeMenu, onAboutAds]);\n\n  const handleSponsoredHide = useCallback(() => {\n    closeMenu();\n    openPremiumModal();\n    onClose();\n  }, [closeMenu, onClose, openPremiumModal]);\n\n  if (!anchor) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        message={message}\n        onClose={closeMenu}\n        onCloseAnimationEnd={closeMenu}\n        onAboutAds={handleAboutAdsOpen}\n        onSponsoredHide={canBuyPremium ? handleSponsoredHide : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canBuyPremium: !selectIsCurrentUserPremium(global) && !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SponsoredMessageContextMenuContainer));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL, TME_LINK_PREFIX } from '../../config';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsChatWithSelf, selectIsCurrentUserPremium,\n  selectShouldSchedule,\n  selectStickerSet, selectThreadInfo,\n} from '../../global/selectors';\nimport renderText from './helpers/renderText';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useSchedule from '../../hooks/useSchedule';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    showNotification,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n\n  const prevStickerSet = usePrevious(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({ sticker, isSilent, shouldUpdateStickerSetsOrder: isAdded });\n      onClose();\n    }\n  }, [onClose, requestCalendar, sendMessage, shouldSchedule, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [onClose, renderingStickerSet, toggleStickerSet]);\n\n  const handleCopyLink = useCallback(() => {\n    if (!renderingStickerSet) return;\n    const { shortName } = renderingStickerSet;\n    const suffix = isEmoji ? 'addemoji' : 'addstickers';\n    const url = `${TME_LINK_PREFIX}${suffix}/${shortName}`;\n    copyTextToClipboard(url);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [isEmoji, lang, renderingStickerSet, showNotification]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">\n          {renderingStickerSet ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n        </div>\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyLink}>{lang('StickersCopy')}</MenuItem>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      header={renderHeader()}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            <div className=\"shared-canvas-container\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId, isComments) && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qzt_zq5gWHne6P2rw7Wj\",\"sets\":\"Ay41sqhq2QmXdgDHnt2E\"};","import React, {\n  memo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  customEmojiSets?: ApiStickerSet[];\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSets,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const customEmojiModalRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: customEmojiModalRef });\n\n  const prevCustomEmojiSets = usePrevious(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title=\"Sets of used emoji\"\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef}>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => (\n          <StickerSetCard\n            key={customEmojiSet.id}\n            className={styles.setCard}\n            stickerSet={customEmojiSet}\n            onClick={handleSetClick}\n            observeIntersection={observeIntersectionForCovers}\n          />\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { customEmojiSetIds }): StateProps => {\n    const customEmojiSets = customEmojiSetIds?.map((id) => global.stickers.setsById[id]);\n\n    return {\n      customEmojiSets,\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiBotCommand, ApiChat } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat,\n  selectNotifySettings,\n  selectNotifyExceptions,\n  selectUser,\n  selectChatBot,\n  selectIsPremiumPurchaseBlocked,\n  selectCurrentMessageList, selectTabState,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getCanDeleteChat,\n  selectIsChatMuted,\n  getCanAddContact,\n  isChatChannel,\n  isChatGroup,\n  getCanManageTopic,\n  isUserRightBanned,\n  getHasAdminRight,\n} from '../../global/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: string; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  canGiftPremium?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  withForumActions,\n  isTopic,\n  isForum,\n  isChatInfoShown,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  canGiftPremium,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openGiftPremiumModal,\n    openChatWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleViewGroupInfo = useCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n    closeMenu();\n  }, [chatId, closeMenu, openChatWithInfo, threadId]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleCreateTopicClick = useCallback(() => {\n    openCreateTopicPanel({ chatId });\n    closeMenu();\n  }, [openCreateTopicPanel, chatId, closeMenu]);\n\n  const handleEditTopicClick = useCallback(() => {\n    openEditTopicPanel({ chatId, topicId: threadId });\n    closeMenu();\n  }, [openEditTopicPanel, chatId, threadId, closeMenu]);\n\n  const handleViewAsTopicsClick = useCallback(() => {\n    openChat({ id: undefined });\n    closeMenu();\n  }, [closeMenu, openChat]);\n\n  const handleEnterVoiceChatClick = useCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO Show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  }, [closeMenu, canCreateVoiceChat, chatId, requestMasterAndJoinGroupCall, createGroupCall]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleGiftPremiumClick = useCallback(() => {\n    openGiftPremiumModal({ forUserId: chatId });\n    closeMenu();\n  }, [openGiftPremiumModal, chatId, closeMenu]);\n\n  const handleAddContactClick = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  }, [openAddContactDialog, chatId, closeMenu]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleVideoCall = useCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  }, [chatId, closeMenu, requestMasterAndRequestCall]);\n\n  const handleCall = useCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, requestMasterAndRequestCall]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleStatisticsClick = useCallback(() => {\n    toggleStatistics();\n    closeMenu();\n  }, [closeMenu, toggleStatistics]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  const handleOpenAsMessages = useCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  }, [closeMenu, onAsMessagesClick]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {lang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? lang('lng_context_view_topic') : lang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {lang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {lang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {lang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {lang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGiftPremium && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftPremiumClick}\n            >\n              {lang('GiftPremium')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {lang(isPrivate\n                  ? 'DeleteChatUser'\n                  : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const canReportChat = isMainThread && (isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf));\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const canGiftPremium = Boolean(\n      global.lastSyncTime\n      && user?.fullInfo?.premiumGifts?.length\n      && !selectIsPremiumPurchaseBlocked(global),\n    );\n\n    const topic = chat?.topics?.[threadId];\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      canGiftPremium,\n      hasLinkedChat: Boolean(chat?.fullInfo?.linkedChatId),\n      botCommands: chatBot?.fullInfo?.botInfo?.commands,\n      isChatInfoShown: selectTabState(global).isChatInfoShown\n        && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n    };\n  },\n)(HeaderMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { debounce } from '../../util/schedulers';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentChat,\n  selectTabState,\n  selectCurrentMessageList,\n} from '../../global/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  threadId?: number;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  threadId,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0], threadId });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds, threadId]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, foundIds, focusedIndex, threadId]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, foundIds, focusedIndex, threadId]);\n\n  const handleCloseLocalTextSearch = useCallback(() => {\n    closeLocalTextSearch();\n  }, [closeLocalTextSearch]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={handleCloseLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      threadId,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","import { fixImageContent } from '../../../../util/parseMessageInput';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  }, [threshold]);\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: (item: any) => void | boolean;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        if (onSelect(item) === false) {\n          return false;\n        }\n\n        e.preventDefault();\n      }\n    }\n\n    return true;\n  }, [items, onSelect, selectedItemIndex]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [onInsertUserName]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZqafRENXro3B4A2UTp9s\",\"preview\":\"FfTpBGrctDEiFLXC4aqP\",\"duration\":\"Igo3Vsou5areTsmh2Ng3\",\"single\":\"ZJNnn8HUzq8cC3WwTzY0\",\"no-grouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"noGrouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"file\":\"QAlzNLWBYdWR4UMMaiGm\",\"overlay\":\"YOoQRXIFINVsu3FFIKR0\",\"action-item\":\"y5JLmIFtCzK05l40rdHJ\",\"actionItem\":\"y5JLmIFtCzK05l40rdHJ\",\"delete-file\":\"Qqp72_dWGSui9ORCN3MT\",\"deleteFile\":\"Qqp72_dWGSui9ORCN3MT\"};","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport File from '../../common/File';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useCallback(() => {\n    onToggleSpoiler?.(index);\n  }, [index, onToggleSpoiler]);\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'image':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick!.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <i\n                className={buildClassName('icon-delete', styles.actionItem, styles.deleteFile)}\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          <i\n            className={buildClassName(\n              attachment.shouldSendAsSpoiler ? 'icon-spoiler-disable' : 'icon-spoiler',\n              styles.actionItem,\n            )}\n            onClick={handleSpoilerClick}\n          />\n          {onDelete && (\n            <i className={buildClassName('icon-delete', styles.actionItem)} onClick={() => onDelete(index)} />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'image';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VncEpkgqABgA8MUCarxh\",\"mobile\":\"EBYYWwiG6Uj4Aqt4DKGy\",\"symbolMenuOpen\":\"eVLBe8iLKwjR6B31YwJj\",\"header-border\":\"u08mL9ikB7S0oRZKxvsA\",\"headerBorder\":\"u08mL9ikB7S0oRZKxvsA\",\"attachments\":\"d_uMaJ26HlkCfSn5XiQp\",\"attachments-bottom-padding\":\"DUGHCuTKi7H5d_1_vYqj\",\"attachmentsBottomPadding\":\"DUGHCuTKi7H5d_1_vYqj\",\"caption-wrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"captionWrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"caption-top-border\":\"UrYInfws7roRktEiMxvT\",\"captionTopBorder\":\"UrYInfws7roRktEiMxvT\",\"caption\":\"c4dyk1Emgpla8BvDJMAz\",\"drop-target\":\"iWmxxlUXOjTzbvJzWF8g\",\"dropTarget\":\"iWmxxlUXOjTzbvJzWF8g\",\"hovered\":\"B5wzgwCPupbnO1XB5Rwc\",\"send-wrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"sendWrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"send\":\"eFD46lVH5GCILXEOx9BO\",\"is-pointer-env\":\"Os76p3jpmhB2IWYxXigi\",\"isPointerEnv\":\"Os76p3jpmhB2IWYxXigi\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAttachment, ApiChatMember, ApiSticker,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\nimport { selectChat, selectIsChatWithSelf } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport buildClassName from '../../../util/buildClassName';\nimport { validateFiles } from '../../../util/files';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  getHtml: Signal<string>;\n  canShowCustomSendMenu?: boolean;\n  isReady?: boolean;\n  shouldSchedule?: boolean;\n  shouldSuggestCompression?: boolean;\n  shouldForceCompression?: boolean;\n  shouldForceAsFile?: boolean;\n  isForCurrentMessageList?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst MAX_LEFT_CHARS_TO_SHOW = 100;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  getHtml,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldSuggestCompression,\n  shouldForceCompression,\n  shouldForceAsFile,\n  isForCurrentMessageList,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n  onCustomEmojiSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n}) => {\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useRef<HTMLButtonElement | null>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n\n  const [shouldSendCompressed, setShouldSendCompressed] = useState(\n    shouldSuggestCompression ?? attachmentSettings.shouldCompress,\n  );\n  const isSendingCompressed = Boolean((shouldSendCompressed || shouldForceCompression) && !shouldForceAsFile);\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const renderingIsOpen = Boolean(renderingAttachments?.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  useEffect(() => {\n    if (!isOpen) {\n      closeSymbolMenu();\n    }\n  }, [closeSymbolMenu, isOpen]);\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const getSelectionRange = useGetSelectionRange(`#${EDITABLE_INPUT_MODAL_ID}`);\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    insertCustomEmoji,\n    closeCustomEmojiTooltip,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen && shouldSuggestCustomEmoji),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendCompressed(shouldSuggestCompression ?? attachmentSettings.shouldCompress);\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n    }\n  }, [attachmentSettings, isOpen, shouldSuggestCompression]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = (shouldSchedule || shouldSendScheduled) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(isSendingCompressed, shouldSendGrouped);\n      updateAttachmentSettings({\n        shouldCompress: isSendingCompressed,\n        shouldSendGrouped,\n      });\n    }\n  }, [\n    isOpen, shouldSchedule, onSendScheduled, onSendSilent, onSend, isSendingCompressed, shouldSendGrouped,\n    updateAttachmentSettings,\n  ]);\n\n  const handleSendSilent = useCallback(() => {\n    sendAttachments(true);\n  }, [sendAttachments]);\n\n  const handleSendClick = useCallback(() => {\n    sendAttachments();\n  }, [sendAttachments]);\n\n  const handleScheduleClick = useCallback(() => {\n    sendAttachments(false, true);\n  }, [sendAttachments]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  }, [isEverySpoiler, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  }, [isEverySpoiler, onFileAppend]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  }, [handleFileSelect]);\n\n  const handleDelete = useCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleEnableSpoilers = useCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: true })));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleDisableSpoilers = useCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleToggleSpoiler = useCallback((index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useDerivedState(() => {\n    if (!renderingIsOpen) return undefined;\n\n    const leftCharsBeforeLimit = captionLimit - getHtmlTextLength(getHtml());\n    return leftCharsBeforeLimit <= MAX_LEFT_CHARS_TO_SHOW ? leftCharsBeforeLimit : undefined;\n  }, [captionLimit, getHtml, renderingIsOpen]);\n\n  const isQuickGallery = isSendingCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio];\n  }, [renderingAttachments, isQuickGallery]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <DropdownMenu\n          className=\"attachment-modal-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{lang('Add')}</MenuItem>\n          {hasMedia && (\n            <>\n              {\n                !shouldForceAsFile && !shouldForceCompression && (isSendingCompressed ? (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"document\" onClick={() => setShouldSendCompressed(false)}>\n                    {lang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                  </MenuItem>\n                ) : (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"photo\" onClick={() => setShouldSendCompressed(true)}>\n                    {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                  </MenuItem>\n                ))\n              }\n              {isSendingCompressed && (\n                hasSpoiler ? (\n                  <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                    {lang('Attachment.DisableSpoiler')}\n                  </MenuItem>\n                ) : (\n                  <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                    {lang('Attachment.EnableSpoiler')}\n                  </MenuItem>\n                )\n              )}\n            </>\n          )}\n          {isMultiple && (\n            shouldSendGrouped ? (\n              <MenuItem\n                icon=\"grouped-disable\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setShouldSendGrouped(false)}\n              >\n                Ungroup All Media\n              </MenuItem>\n            ) : (\n              // eslint-disable-next-line react/jsx-no-bind\n              <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                Group All Media\n              </MenuItem>\n            )\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n        isMobile && styles.mobile,\n        isSymbolMenuOpen && styles.symbolMenuOpen,\n      )}\n      noBackdropClose\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={isSendingCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            filteredUsers={mentionFilteredUsers}\n            onInsertUserName={insertMention}\n            onClose={closeMentionTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onCustomEmojiSelect={insertCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <div className={styles.caption}>\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              onCustomEmojiSelect={onCustomEmojiSelect}\n              onRemoveSymbol={onRemoveSymbol}\n              onEmojiSelect={onEmojiSelect}\n              isAttachmentModal\n              canSendPlainText\n              className=\"attachment-modal-symbol-menu with-menu-transitions\"\n            />\n            <MessageInput\n              ref={inputRef}\n              id=\"caption-input-text\"\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              isActive={isOpen}\n              getHtml={getHtml}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={lang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && isForCurrentMessageList && attachments.length)}\n              captionLimit={leftChars}\n              shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n              onSuppressedFocus={closeSymbolMenu}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {lang('Send')}\n              </Button>\n              {canShowCustomSendMenu && (\n                <CustomSendMenu\n                  isOpen={isCustomSendMenuOpen}\n                  onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n                  onSendSchedule={handleScheduleClick}\n                  onClose={handleContextMenuClose}\n                  onCloseAnimationEnd={handleContextMenuHide}\n                  isSavedMessages={isChatWithSelf}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { language, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chat?.fullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n    };\n  },\n)(AttachmentModal));\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonymous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(index === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [correctOption, options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const handleQuestionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  }, []);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonymous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji';\nimport buildClassName from '../../../util/buildClassName';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `./img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\n\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 10;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n} from '../../../util/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { uncompressEmoji } from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n  const shouldRenderContent = emojis && canRenderContents;\n\n  useHorizontalScroll(headerRef, !(isMobile && shouldRenderContent));\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = containerRef.current!.closest<HTMLElement>('.SymbolMenu-main')!\n      .querySelector(`#emoji-category-${index}`)! as HTMLElement;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker, ApiChat } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION, STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { pickTruthy, uniqueByField } from '../../../util/iteratees';\nimport { selectChat, selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\n\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport PremiumIcon from '../../common/PremiumIcon';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers?: boolean;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldUpdateStickerSetsOrder?: boolean,\n  ) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  premiumStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  premiumStickers,\n  addedSetIds,\n  stickerSetsById,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const sendMessageAction = useSendMessageAction(chat!.id, threadId);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, addedSetIds));\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    if (isCurrentUserPremium) {\n      const addedPremiumStickers = existingAddedSetIds\n        .map(({ stickers }) => stickers?.filter((sticker) => sticker.hasEffect))\n        .flat()\n        .filter(Boolean);\n\n      const totalPremiumStickers = uniqueByField([...addedPremiumStickers, ...premiumStickers], 'id');\n\n      if (totalPremiumStickers.length) {\n        defaultSets.push({\n          id: PREMIUM_STICKER_SET_ID,\n          accessHash: '0',\n          title: lang('PremiumStickers'),\n          stickers: totalPremiumStickers,\n          count: totalPremiumStickers.length,\n        });\n      }\n    }\n\n    if (chat?.fullInfo?.stickerSet) {\n      const fullSet = stickerSetsById[chat.fullInfo.stickerSet.id];\n      if (fullSet) {\n        defaultSets.push({\n          id: CHAT_STICKER_SET_ID,\n          accessHash: fullSet.accessHash,\n          title: lang('GroupStickers'),\n          stickers: fullSet.stickers,\n          count: fullSet.stickers!.length,\n        });\n      }\n    }\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds, stickerSetsById, favoriteStickers, recentStickers, isCurrentUserPremium, chat, lang, premiumStickers,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents && !noPopulatedSets && canSendStickers;\n\n  useHorizontalScroll(headerRef, !shouldRenderContents);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const handleStickerFave = useCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  }, [faveSticker]);\n\n  const handleMouseMove = useCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, sendMessageAction]);\n\n  const handleRemoveRecentSticker = useCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  }, [removeRecentSticker]);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === PREMIUM_STICKER_SET_ID ? (\n            <PremiumIcon withGradient big />\n          ) : stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar chat={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noAnimate={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noAnimate={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!shouldRenderContents) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      premiumSet,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      premiumStickers: premiumSet.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuPosition from '../../hooks/useContextMenuPosition';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n\n  const getRootElement = useCallback(\n    () => ref.current!.closest('.custom-scroll, .no-scrollbar'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => ref.current!.querySelector('.gif-context-menu .bubble'),\n    [],\n  );\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  }, [isContextMenuOpen, onClick, gif, videoData]);\n\n  const handleUnsaveClick = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  }, [onUnsaveClick, gif]);\n\n  const handleContextDelete = useCallback(() => {\n    onUnsaveClick?.(gif);\n  }, [gif, onUnsaveClick]);\n\n  const handleSendQuiet = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  }, [gif, onClick, videoData]);\n\n  const handleSendScheduled = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  }, [gif, onClick, videoData]);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  }, [handleBeforeContextMenu]);\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs?: boolean;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  }, [saveGif]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={canSendGifs ? onGifSelect : undefined}\n            onUnsaveClick={handleUnsaveClick}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'CustomEmoji',\n  'Stickers',\n  'GIFs',\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen, isAttachmentModal,\n  canSendPlainText,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.Emoji)}\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.Stickers)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectTabState, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport CustomEmojiPicker from './CustomEmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\nconst STICKERS_TAB_INDEX = 2;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers?: boolean;\n  canSendGifs?: boolean;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    shouldUpdateStickerSetsOrder?: boolean\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  className?: string;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  positionX?: 'left' | 'right';\n  positionY?: 'top' | 'bottom';\n  transformOriginX?: number;\n  transformOriginY?: number;\n  style?: string;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isCurrentUserPremium?: boolean;\n  lastSyncTime?: number;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isLeftColumnShown,\n  isCurrentUserPremium,\n  lastSyncTime,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  isAttachmentModal,\n  canSendPlainText,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  className,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n  positionX,\n  positionY,\n  transformOriginX,\n  transformOriginY,\n  style,\n}) => {\n  const { loadPremiumSetStickers, loadFeaturedEmojiStickers } = getActions();\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  // If we can't send plain text, we should always show the stickers tab\n  useEffect(() => {\n    if (canSendPlainText) return;\n    setActiveTab(STICKERS_TAB_INDEX);\n  }, [canSendPlainText]);\n\n  useEffect(() => {\n    if (!lastSyncTime) return;\n    if (isCurrentUserPremium) {\n      loadPremiumSetStickers();\n    }\n    loadFeaturedEmojiStickers();\n  }, [isCurrentUserPremium, lastSyncTime, loadFeaturedEmojiStickers, loadPremiumSetStickers]);\n\n  useLayoutEffect(() => {\n    if (!isMobile || isAttachmentModal) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isAttachmentModal, isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  }, [onCustomEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect?.(sticker, isSilent, shouldSchedule, true, shouldUpdateStickerSetsOrder);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            chatId={chatId}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n            chatId={chatId}\n            threadId={threadId}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const mobileClassName = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n      isAttachmentModal && 'in-attachment-modal',\n    );\n\n    if (isAttachmentModal) {\n      return (\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      );\n    }\n\n    return (\n      <Portal>\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX={isAttachmentModal ? positionX : 'left'}\n      positionY={isAttachmentModal ? positionY : 'bottom'}\n      onClose={onClose}\n      withPortal={isAttachmentModal}\n      className={buildClassName('SymbolMenu', className)}\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      style={style}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      lastSyncTime: global.lastSyncTime,\n    };\n  },\n)(SymbolMenu));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { Signal } from '../../../util/signals';\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  getHtml: Signal<string>;\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n};\n\nconst BotCommandTooltip: FC<OwnProps & StateProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  getHtml,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.usernames![0].username}` : ''}`,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const handleSelect = useCallback((botCommand: ApiBotCommand) => {\n    // We need an additional check because tooltip is updated with throttling\n    if (!botCommand.command.startsWith(getHtml().slice(1))) {\n      return false;\n    }\n\n    handleSendCommand(botCommand);\n    return true;\n  }, [getHtml, handleSendCommand]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n)(BotCommandTooltip));\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  onClose,\n  stickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"o7fHB9vMHP_k5l9rZC2R\",\"emojiButton\":\"LzdBMbvLbmND0s2zfaff\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global/types';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  addRecentCustomEmoji,\n  onCustomEmojiSelect,\n  onClose,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleCustomEmojiSelect = useCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  }, [addRecentCustomEmoji, clearCustomEmojiForEmoji, isOpen, onCustomEmojiSelect]);\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  onSendSilent,\n  onSendSchedule,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu with-menu-transitions\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n  observeIntersection?: ObserveFn;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick, observeIntersection,\n}) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji\n        documentId={emoji.id}\n        size={CUSTOM_EMOJI_SIZE}\n        withSharedAnimation\n        shouldPreloadPreview\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\nimport CustomEmojiButton from './CustomEmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  }, [addRecentCustomEmoji, onCustomEmojiSelect]);\n\n  const handleSelect = useCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  }, [handleCustomEmojiSelect, handleSelectEmoji]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleCustomEmojiClick = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  }, [addRecentCustomEmoji, onCustomEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n              observeIntersection={observeIntersection}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\n\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      noShowPremium\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { isUserId } from '../../../global/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { getActions, getGlobal } from '../../../global';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  }, [chatId, onClose, saveDefaultSendAs]);\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = isUserId(id) ? usersById[id] : undefined;\n        const chat = !user ? chatsById[id] : undefined;\n        const userOrChat = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium && <i className=\"icon-lock-badge send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              user={user}\n              chat={chat}\n              className={buildClassName(selectedSendAsId === id && 'selected')}\n            />\n            <div className=\"info\">\n              {userOrChat && <FullNameTitle peer={userOrChat} noFake />}\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React, {\n  useMemo, memo, useRef, useEffect, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage, ApiUser, ApiChat } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n} from '../../global/helpers';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  animationLevel?: AnimationLevel;\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  animationLevel,\n  onClose,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return enableDirectTextInput;\n  }, [isActive]);\n\n  const handleSearchTextMessagesLocal = useCallback(() => {\n    searchTextMessagesLocal();\n  }, [searchTextMessagesLocal]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(handleSearchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, chat, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: {\n    message: ApiMessage;\n    senderUser?: ApiUser;\n    senderChat?: ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} animationLevel={animationLevel} withVideo />\n        <div className=\"info\">\n          <div className=\"search-result-message-top\">\n            <FullNameTitle peer={(senderUser || senderChat)!} />\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(RightSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useMemo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n  selectCanScheduleUntilOnline,\n  selectIsChatWithSelf, selectThreadInfo,\n} from '../../global/selectors';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({ gif, scheduledAt, isSilent });\n        });\n      } else {\n        sendMessage({ gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, requestCalendar, sendMessage, setGifSearchQuery]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId) && getCanPostInChat(chat, threadId, isComments);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n    };\n  },\n)(GifSearch));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChannelStatistics, ApiGroupStatistics, ApiMessageStatistics, StatisticsOverviewItem,\n} from '../../../api/types';\n\nimport { formatInteger, formatIntegerCompact } from '../../../util/textFormat';\nimport { formatFullDate } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport './StatisticsOverview.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n  isPlain?: boolean;\n  isApproximate?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nconst MESSAGE_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'views', title: 'Stats.Message.Views', isPlain: true },\n    {\n      name: 'forwards', title: 'Stats.Message.PrivateShares', isPlain: true, isApproximate: true,\n    },\n  ],\n  [\n    { name: 'publicForwards', title: 'Stats.Message.PublicShares', isPlain: true },\n  ],\n];\n\nexport type OwnProps = {\n  isGroup?: boolean;\n  isMessage?: boolean;\n  statistics: ApiChannelStatistics | ApiGroupStatistics | ApiMessageStatistics;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({ isGroup, isMessage, statistics }) => {\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName('StatisticsOverview__value', isChangeNegative && 'negative')}>\n        {isChangeNegative ? `-${formatIntegerCompact(Math.abs(change))}` : `+${formatIntegerCompact(change)}`}\n        {percentage && (\n          <>\n            {' '}\n            ({percentage}%)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const { period } = (statistics as ApiGroupStatistics);\n\n  return (\n    <div className=\"StatisticsOverview\">\n      <div className=\"StatisticsOverview__header\">\n        <div className=\"StatisticsOverview__title\">{lang('StatisticOverview')}</div>\n\n        {period && (\n          <div className=\"StatisticsOverview__caption\">\n            {formatFullDate(lang, period.minDate * 1000)} — {formatFullDate(lang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className=\"StatisticsOverview__table\">\n        {(isMessage ? MESSAGE_OVERVIEW : isGroup ? GROUP_OVERVIEW : CHANNEL_OVERVIEW).map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)[cell.name];\n\n              if (cell.isPlain) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">\n                      {cell.isApproximate ? `≈${formatInteger(field)}` : formatInteger(field)}\n                    </b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              if (cell.isPercentage) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">{field.percentage}%</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td className=\"StatisticsOverview__table-cell\">\n                  <b className=\"StatisticsOverview__table-value\">\n                    {formatIntegerCompact(field.current)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default memo(StatisticsOverview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsRecentMessage as StatisticsRecentMessageType } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useMedia from '../../../hooks/useMedia';\n\nimport './StatisticsRecentMessage.scss';\n\nexport type OwnProps = {\n  message: ApiMessage & StatisticsRecentMessageType;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        'StatisticsRecentMessage',\n        Boolean(mediaBlobUrl || mediaThumbnail) && 'StatisticsRecentMessage--with-image',\n      )}\n      onClick={handleClick}\n    >\n      <div className=\"StatisticsRecentMessage__title\">\n        <div className=\"StatisticsRecentMessage__summary\">\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {lang('ChannelStats.ViewsCount', message.views, 'i')}\n        </div>\n      </div>\n\n      <div className=\"StatisticsRecentMessage__info\">\n        <div className=\"StatisticsRecentMessage__date\">\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {message.forwards ? lang('ChannelStats.SharesCount', message.forwards) : 'No shares'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview__image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  StatisticsRecentMessage as StatisticsRecentMessageType,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { selectChat, selectStatistics } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  statistics,\n  dcId,\n  isGroup,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove('hidden');\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isGroup={isGroup} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className=\"Statistics__graph hidden\" />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentTopMessages?.length) && (\n        <div className=\"Statistics__messages\">\n          <h2 className=\"Statistics__messages-title\">{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentTopMessages.map((message) => (\n            <StatisticsRecentMessage message={message as ApiMessage & StatisticsRecentMessageType} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n\n    return {\n      statistics, dcId, isGroup,\n    };\n  },\n)(Statistics));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getActions } from '../../../global';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './StatisticsPublicForward.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsPublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => getMainUsername(data.chat), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className=\"StatisticsPublicForward\" onClick={handleClick}>\n      <Avatar size=\"medium\" chat={data.chat} />\n\n      <div className=\"StatisticsPublicForward__info\">\n        <div className=\"StatisticsPublicForward__title\">\n          {data.title}\n        </div>\n\n        <div className=\"StatisticsPublicForward__views\">\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsPublicForward);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiMessageStatistics, ApiMessagePublicForward, StatisticsGraph } from '../../../api/types';\nimport { selectChat, selectTabState } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsPublicForward from './StatisticsPublicForward';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiMessageStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiMessageStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isMessage />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className=\"Statistics__public-forwards\">\n          <h2 className=\"Statistics__public-forwards-title\">{lang('Stats.Message.PublicShares')}</h2>\n\n          {statistics.publicForwardsData!.map((item: ApiMessagePublicForward) => (\n            <StatisticsPublicForward data={item} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport { selectTabState } from '../../global/selectors';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage, selectTabState } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {Boolean(lastSyncTime) && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qj1MQaLfhumlxACIpkUl\",\"content\":\"ph5g3hCSQ_72FnZ3YkuA\",\"section\":\"bYZBp9H7Ks8tqaBvQm57\",\"top\":\"sV6D57DhbsFwQhRNzw9K\",\"bottom\":\"pUkmozcBdIn4yWGGPoX1\",\"iconWrapper\":\"JT0__kgf23rGv5BWQF2s\",\"icon\":\"gx85t_IsGh2fgS2yDGtk\",\"clickable\":\"TVwtYFuxdwJH5LZ7yvwu\",\"heading\":\"o9l56jP2uXfAul061gXq\",\"icon-picker\":\"ByQF8Qg3NcYnBCvGwoH0\",\"iconPicker\":\"ByQF8Qg3NcYnBCvGwoH0\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport { getTopicColors } from '../../util/forumColors';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport CustomEmojiPicker from '../middle/composer/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoom-fade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            idPrefix=\"create-topic-icons-set-\"\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport Loading from '../ui/Loading';\nimport CustomEmojiPicker from '../middle/composer/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top)}>\n              <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoom-fade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  idPrefix=\"edit-topic-icons-set-\"\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.topicId ? chat?.topics?.[editTopicPanel?.topicId] : undefined;\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  selectChat, selectTabState, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../global/selectors';\nimport { isUserBot, selectIsChatMuted } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Avatar from '../../common/Avatar';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n    uploadContactProfilePhoto,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n  const personalPhoto = user.fullInfo?.personalPhoto;\n  const notPersonalPhoto = user.fullInfo?.profilePhoto || user.fullInfo?.fallbackPhoto;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              {lang('UserInfo.SuggestPhoto', user.firstName)}\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              {lang('UserInfo.SetCustomPhoto', user.firstName)}\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    user={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"text-muted\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const { progress } = selectTabState(global).management;\n    const isMuted = chat && selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, progress, isMuted,\n    };\n  },\n)(ManageUser));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementProgress, ManagementScreens } from '../../../types';\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n} from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\nimport Switcher from '../../ui/Switcher';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\nconst ALL_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'sendMessages',\n  'embedLinks',\n  'sendPolls',\n  'changeInfo',\n  'inviteUsers',\n  'pinMessages',\n  'manageTopics',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n];\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = ALL_PERMISSIONS.length + 1;\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  lastSyncTime,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => hasLinkedChannel || isChatPublic(chat), [chat, hasLinkedChannel]);\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>(null);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime && canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, canInvite, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  const handleForumToggle = useCallback(() => {\n    toggleForum({ chatId, isEnabled: !chat.isForum });\n  }, [chat.isForum, chatId, toggleForum]);\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chat.fullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chat.fullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chat.fullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chat.fullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chat.fullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : `${enabledLength}`;\n  }, [availableReactions, chat, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = ALL_PERMISSIONS.filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chat.fullInfo?.adminMembersById || {}).length;\n  }, [chat.fullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={chat.isForum}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            maxLength={GROUP_MAX_DESCRIPTION}\n            maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT - (chat.isForum ? 0 : 1)}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={chat.isForum}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chat.fullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && (getHasAdminRight(chat, 'changeInfo') || chat.isCreator);\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      lastSyncTime: global.lastSyncTime,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.availableReactions,\n      canEditForum,\n    };\n  },\n)(ManageGroup));\n","import type React from '../../../lib/teact/teact';\nimport { useCallback, useEffect, useState } from '../../../lib/teact/teact';\n\nimport type { ApiChatBannedRights } from '../../../api/types';\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\nconst MEDIA_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'embedLinks',\n  'sendPolls',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n  'sendStickers',\n  'sendGifs',\n];\nconst MESSAGE_PERMISSIONS: typeof MEDIA_PERMISSIONS = [...MEDIA_PERMISSIONS, 'sendPlain'];\n\nexport default function useManagePermissions(defaultPermissions: ApiChatBannedRights | undefined) {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [defaultPermissions]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name: targetName } = e.target;\n\n    const name = targetName as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    const oldPermissions = permissions;\n\n    let newPermissions: ApiChatBannedRights = {\n      ...oldPermissions,\n      [name]: getUpdatedPermissionValue(oldPermissions[name]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(oldPermissions[name]),\n      }),\n    };\n\n    const checkMedia = () => {\n      const mediaPermissions = MEDIA_PERMISSIONS.map((key) => newPermissions[key]);\n      if (mediaPermissions.some((v) => !v)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: undefined,\n        };\n      } else if (mediaPermissions.every(Boolean)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: true,\n        };\n      }\n    };\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    } else {\n      newPermissions = {\n        ...newPermissions,\n        ...(MEDIA_PERMISSIONS.reduce((acc, key) => (\n          Object.assign(acc, { [key]: newPermissions.sendMedia })\n        ), {})),\n      };\n    }\n\n    // Embed links can't be enabled if plain text is banned\n    if (name !== 'embedLinks' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        embedLinks: true,\n      };\n    }\n\n    if (name !== 'sendPlain' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        sendPlain: undefined,\n      };\n    }\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    }\n\n    const sendMessages = MESSAGE_PERMISSIONS.every((key) => newPermissions[key]);\n    newPermissions = {\n      ...newPermissions,\n      sendMessages: sendMessages ? true : undefined,\n    };\n\n    setPermissions(newPermissions);\n\n    setHavePermissionChanged(!defaultPermissions || Object.keys(newPermissions).some((k) => {\n      const key = k as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n      return Boolean(defaultPermissions[key]) !== Boolean(newPermissions[key]);\n    }));\n  }, [defaultPermissions, permissions]);\n\n  return {\n    permissions,\n    isLoading,\n    havePermissionChanged,\n    handlePermissionChange,\n    setIsLoading,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport stopEvent from '../../../util/stopEvent';\nimport buildClassName from '../../../util/buildClassName';\nimport { isChatPublic } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  hasLinkedChat?: boolean;\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst BEFORE_ITEMS_COUNT = 2;\nconst ITEMS_COUNT = 9;\n\nfunction getLangKeyForBannedRightKey(key: keyof ApiChatBannedRights) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    case 'sendPlain':\n      return 'UserRestrictionsNoSendText';\n    case 'sendDocs':\n      return 'UserRestrictionsNoSendDocs';\n    case 'sendRoundvideos':\n      return 'UserRestrictionsNoSendRound';\n    case 'sendVoices':\n      return 'UserRestrictionsNoSendVoice';\n    case 'sendAudios':\n      return 'UserRestrictionsNoSendMusic';\n    case 'sendVideos':\n      return 'UserRestrictionsNoSendVideos';\n    case 'sendPhotos':\n      return 'UserRestrictionsNoSendPhotos';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  hasLinkedChat,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights, showNotification } = getActions();\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(chat?.defaultBannedRights);\n  const lang = useLang();\n  const { isForum } = chat || {};\n  const isPublic = useMemo(() => chat && isChatPublic(chat), [chat]);\n  const shouldDisablePermissionForPublicGroup = hasLinkedChat || isPublic;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  const handleDisabledClick = useCallback(() => {\n    showNotification({ message: lang('lng_rights_permission_unavailable') });\n  }, [lang, showNotification]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, setIsLoading, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, k) => {\n      const key = k as keyof ApiChatBannedRights;\n      if (\n        !bannedRights[key]\n        || (defaultBannedRights?.[key])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection with-checkbox\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection with-checkbox\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n            <div className=\"ListItem no-selection with-checkbox\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem no-selection with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                disabled={shouldDisablePermissionForPublicGroup}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem no-selection with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={shouldDisablePermissionForPublicGroup}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const hasLinkedChat = Boolean(chat?.fullInfo?.linkedChatId);\n\n    return { chat, currentUserId: global.currentUserId, hasLinkedChat };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chat.fullInfo?.members || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, search);\n  }, [chat.fullInfo?.members, currentUserId, search]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return { currentUserId };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport type { ApiAvailableReaction, ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatPublic } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  lastSyncTime,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chat?.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat?.fullInfo?.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = Object.keys(chat.fullInfo?.adminMembersById || {}).length;\n  const removedUsersCount = (chat?.fullInfo?.kickedMembers?.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chat.fullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chat.fullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chat.fullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    const text = totalLength ? `${enabledLength} / ${totalLength}` : `${enabledLength}`;\n    return text;\n  }, [availableReactions, chat, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            maxLength={CHANNEL_MAX_DESCRIPTION}\n            maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      lastSyncTime: global.lastSyncTime,\n      exportedInvites: invites,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ManageChannel));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { selectChat, selectTabState, selectManagement } from '../../../global/selectors';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ManageUsernames from '../../common/ManageUsernames';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n  const privateLink = chat.fullInfo?.inviteLink;\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? editableUsername : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '' });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 1;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n    };\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../global/helpers';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(linkedChat?.isJoinToSend);\n  const [isJoinRequest, setIsJoinRequest] = useState(linkedChat?.isJoinRequest);\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <Checkbox\n              checked={isJoinToSend}\n              onCheck={handleJoinToSendCheck}\n              label={lang('ChannelSettingsJoinToSend')}\n            />\n            {isJoinToSend && (\n              <Checkbox\n                checked={isJoinRequest}\n                onCheck={handleJoinRequestCheck}\n                label={lang('ChannelSettingsJoinRequest')}\n              />\n            )}\n            <p className=\"text-muted\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat?.fullInfo?.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport stopEvent from '../../../util/stopEvent';\nimport buildClassName from '../../../util/buildClassName';\nimport useManagePermissions from '../hooks/useManagePermissions';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst SHIFT_HEIGHT_MINUS = 1;\nconst BEFORE_ITEMS_COUNT = 2;\nconst BEFORE_USER_INFO_HEIGHT = 96;\nconst ITEMS_COUNT = 9;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(selectedChatMember?.bannedRights || chat?.defaultBannedRights);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  const { isForum } = chat || {};\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, setIsLoading, updateChatMemberBannedRights, permissions]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT - SHIFT_HEIGHT_MINUS}px;`\n           + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT + BEFORE_USER_INFO_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} forceShowSelf />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendPlain')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPhotos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  disabled={getControlIsDisabled('sendStickers')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  disabled={getControlIsDisabled('sendAudios')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  disabled={getControlIsDisabled('sendDocs')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVoices')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  disabled={getControlIsDisabled('sendRoundvideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  disabled={getControlIsDisabled('embedLinks')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPolls')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                disabled={getControlIsDisabled('inviteUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={getControlIsDisabled('changeInfo')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  disabled={getControlIsDisabled('manageTopics')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRecentActionsClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }, [onScreenSelect]);\n\n  const canAddNewAdmins = Boolean(chat.isCreator || chat.adminRights?.addAdmins);\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo?.adminMembersById) {\n      return [];\n    }\n\n    return Object.values(chat.fullInfo.adminMembersById).sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown={canAddNewAdmins}\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n    };\n  },\n)(ManageChatAdministrators));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const adminMembers = useMemo(() => {\n    if (!chat?.fullInfo?.adminMembersById) {\n      return [];\n    }\n\n    return Object.values(chat.fullInfo.adminMembersById).sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? chat.fullInfo?.adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [chat.fullInfo?.adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    if (chat.isCreator) {\n      return false;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n    };\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot, getHasAdminRight, isChatBasicGroup,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport DeleteMemberModal from '../DeleteMemberModal';\nimport Switcher from '../../ui/Switcher';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  isBasicGroup?: boolean;\n  areParticipantsHidden?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  isBasicGroup,\n  areParticipantsHidden,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement, toggleParticipantsHidden,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, true);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  }, [closeManagement, noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  const handleToggleParticipantsHidden = useCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  }, [areParticipantsHidden, chatId, toggleParticipantsHidden]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        {!isBasicGroup && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const adminMembersById = chat?.fullInfo?.adminMembersById;\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    return {\n      isBasicGroup: Boolean(chat && isChatBasicGroup(chat)),\n      areParticipantsHidden: Boolean(chat && chat.fullInfo?.areParticipantsHidden),\n      members,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { sortUserIds, isChatChannel } from '../../../global/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.usernames ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.usernames, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleCopyPrimaryClicked = useCallback(() => {\n    copyLink(primaryInviteLink!);\n  }, [copyLink, primaryInviteLink]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"Actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <p className=\"text-muted\">\n              {chat?.usernames ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n            </p>\n            <div className=\"primary-link\">\n              <input\n                className=\"form-control primary-link-input\"\n                value={primaryInviteLink}\n                readOnly\n                onClick={handleCopyPrimaryClicked}\n              />\n              <DropdownMenu\n                className=\"primary-link-more-menu\"\n                trigger={PrimaryLinkMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked}>{lang('Copy')}</MenuItem>\n                {!chat?.usernames && (\n                  <MenuItem icon=\"delete\" onClick={handlePrimaryRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n                )}\n              </DropdownMenu>\n            </div>\n            <Button onClick={handleCopyPrimaryClicked}>{lang('CopyLink')}</Button>\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useSyncEffect(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId];\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport { isSameReaction } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n  }, [enabledReactions]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n    } else {\n      setLocalEnabledReactions(undefined);\n    }\n    setIsTouched(true);\n  }, [enabledReactions]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n    setIsTouched(true);\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info mt-4\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('AvailableReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: chat.fullInfo?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n};\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: importer.userId })}\n            >\n              <PrivateChatInfo\n                userId={importer.userId}\n                status={formatMediaDateTime(lang, importer.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {Boolean(expireDate) && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n  animationLevel,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            user={user}\n            animationLevel={animationLevel}\n            withVideo\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../global/selectors';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import type { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  tabIndex?: number;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: React.ReactNode;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    tabIndex,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        tabIndex={tabIndex}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SM3T4awhZJvKn_c8aRuY\",\"description\":\"RWoBZem6PCNMF5hu6Shs\",\"checkout-picture\":\"prUKJGh6W9LIyjSnRbZc\",\"checkoutPicture\":\"prUKJGh6W9LIyjSnRbZc\",\"text\":\"xUG3uFeTiPPFkWHQELCc\",\"checkout-title\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkoutTitle\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkout-description\":\"LqaZe1TRdNI17BEa1gcl\",\"checkoutDescription\":\"LqaZe1TRdNI17BEa1gcl\",\"price-info\":\"mz2vhtmYPNRaJbeUrXKA\",\"priceInfo\":\"mz2vhtmYPNRaJbeUrXKA\",\"price-info-item\":\"Ct9Ine31cu5h7FCjtRWa\",\"priceInfoItem\":\"Ct9Ine31cu5h7FCjtRWa\",\"price-info-item-main\":\"JduVB3d3NxN9TybmxIgS\",\"priceInfoItemMain\":\"JduVB3d3NxN9TybmxIgS\",\"price-info-item-title\":\"O7d8G4OQ_yTJSHiHbgBR\",\"priceInfoItemTitle\":\"O7d8G4OQ_yTJSHiHbgBR\",\"tipsList\":\"zsSyrAOxg0qs0nPJWSEe\",\"tipsItem\":\"lcjeIUsdqs95BdK_oysT\",\"tipsItem_active\":\"XRnGKO5ClzA_4S8i81wC\",\"tipsItemActive\":\"XRnGKO5ClzA_4S8i81wC\",\"invoice-info\":\"MyMLGHhiEKOVIoG3aQTS\",\"invoiceInfo\":\"MyMLGHhiEKOVIoG3aQTS\",\"provider\":\"hLVHJSaVspSZdzxNlBJk\",\"stripe\":\"nrKVVKzRmr7s0TE15uG1\",\"smartglocal\":\"oONvjFUTa5AbWvrbzbWn\",\"checkout-info-item-info-title\":\"bkIqUpVUAY04wdT8fySX\",\"checkoutInfoItemInfoTitle\":\"bkIqUpVUAY04wdT8fySX\",\"checkout-info-item-info-data\":\"VAzhVfK6c1pUriepo4Ga\",\"checkoutInfoItemInfoData\":\"VAzhVfK6c1pUriepo4Ga\",\"tos-checkbox\":\"WjrdCzbl3hROmSBGGnjy\",\"tosCheckbox\":\"WjrdCzbl3hROmSBGGnjy\"};","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { LangCode, Price } from '../../types';\nimport type { ApiChat, ApiInvoice, ApiPaymentCredentials } from '../../api/types';\n\nimport { PaymentStep } from '../../types';\nimport { getWebDocumentHash } from '../../global/helpers';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport Checkbox from '../ui/Checkbox';\nimport Skeleton from '../ui/Skeleton';\nimport SafeLink from '../common/SafeLink';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  chat?: ApiChat;\n  invoice?: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: Price[];\n  currency: string;\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n};\n\nconst Checkout: FC<OwnProps> = ({\n  chat,\n  invoice,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    photo, title, text, isRecurring, recurringTermsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(tipAmount!, currency, lang.code)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(tip, currency, lang.code, true)}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = lang('PaymentCheckoutAcceptRecurrent', chat?.title);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, lang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && <img className={styles.checkoutPicture} src={photoUrl} alt=\"\" />}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {text && <div className={styles.checkoutDescription}>{renderText(text, ['br', 'links', 'emoji'])}</div>}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: lang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: lang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || !isInteractive) && renderCheckoutItem({\n          title: shippingAddress,\n          label: lang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: lang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: lang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || !isInteractive) && renderCheckoutItem({\n          title: shippingMethod,\n          label: lang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {isRecurring && renderTos(recurringTermsUrl!)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title : string | undefined;\n  label: string | undefined;\n  icon?: string;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  return (\n    <ListItem\n      multiline={Boolean(title && label !== title)}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n    >\n      {customIcon && <i className={customIcon} />}\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\nimport useLang from '../../hooks/useLang';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\nimport mirIconPath from '../../assets/mir.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv}\n            teactExperimentControlled\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            tabIndex={0}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ defaultName, name }) => (\n                <option\n                  value={defaultName}\n                  className=\"county-item\"\n                  selected={defaultName === state.billingCountry}\n                >\n                  {defaultName || name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            tabIndex={0}\n            maxLength={12}\n            error={formErrors.billingZip}\n          />\n        )}\n        <Checkbox\n          label={lang('PaymentCardSavePaymentInformation')}\n          checked={canSaveCredentials ? state.saveCredentials : false}\n          tabIndex={0}\n          onChange={handleChangeSaveCredentials}\n          disabled={!canSaveCredentials}\n        />\n        <p className=\"description\">\n          {lang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n        </p>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ninterface IframeCallbackEvent {\n  eventType: string;\n  eventData: {\n    path_full: string;\n  };\n}\n\nconst ConfirmPayment: FC<OwnProps> = ({ url, noRedirect, onClose }) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n\n      if (eventType !== 'web_app_open_tg_link') {\n        return;\n      }\n\n      if (!noRedirect) {\n        const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n        openTelegramLink({ url: linkUrl });\n      }\n\n      onClose();\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport PasswordMonkey from '../common/PasswordMonkey';\nimport PasswordForm from '../common/PasswordForm';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  error?: string;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  error,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const lang = useLang();\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={error ? lang(error) : undefined}\n        hint={passwordHint}\n        description={lang('PaymentConfirmationMessage', cardName)}\n        placeholder={lang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { payment } = selectTabState(global);\n  return {\n    error: payment.error?.message,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.savedCredentials,\n  };\n})(PasswordConfirm));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { ApiChat, ApiCountry, ApiPaymentCredentials } from '../../api/types';\nimport type { Price, ShippingOption } from '../../types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { PaymentStep } from '../../types';\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport ConfirmPayment from './ConfirmPayment';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport PasswordConfirm from './PasswordConfirm';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isNameRequested?: boolean;\n  isShippingAddressRequested?: boolean;\n  isPhoneRequested?: boolean;\n  isEmailRequested?: boolean;\n  shouldSendPhoneToProvider?: boolean;\n  shouldSendEmailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions: boolean;\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n};\n\ntype GlobalStateProps = Pick<TabState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoice' | 'error'\n)>;\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  chat,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  isNameRequested,\n  isShippingAddressRequested,\n  isPhoneRequested,\n  isEmailRequested,\n  shouldSendPhoneToProvider,\n  shouldSendEmailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n  isExtendedMedia,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={handleClearPaymentError}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            chat={chat}\n            prices={prices}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(isShippingAddressRequested)}\n            needEmail={Boolean(isEmailRequested || shouldSendEmailToProvider)}\n            needPhone={Boolean(isPhoneRequested || shouldSendPhoneToProvider)}\n            needName={Boolean(isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency!}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handleButtonClick = useCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (isEmailRequested && !email)\n          || (isPhoneRequested && !phone)\n          || (isNameRequested && !fullName);\n\n        if ((isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (isShippingAddressRequested && !paymentState.shipping) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  }, [\n    isEmailRequested, isNameRequested, isPhoneRequested, isShippingAddressRequested, nativeProvider, passwordValidUntil,\n    paymentDispatch, paymentState, requestId, savedInfo, sendCredentials, sendForm, setStep, smartGlocalToken, step,\n    stripeId, twoFaPassword, validatePaymentPassword, validateRequest,\n  ]);\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return lang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return lang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? lang('Checkout.PayPrice', formatCurrency(totalPrice, currency!, lang.code))\n    : lang('Next');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.isRecurring && !isTosAccepted);\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={closeModal}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <i className={step === PaymentStep.Checkout ? 'icon-close' : 'icon-arrow-left'} />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContainer,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      savedCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n    } = selectTabState(global).payment;\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n    } = (invoiceContainer || {});\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n      countryList: global.countryList.general,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      savedCredentials,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: Price[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, { memo, useMemo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { Price } from '../../types';\nimport type { ApiShippingAddress, ApiWebDocument } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  tipAmount?: number;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photo?: ApiWebDocument;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  tipAmount,\n  totalAmount,\n  currency,\n  info,\n  photo,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  const invoice = useMemo(() => {\n    return {\n      photo,\n      text: text!,\n      title: title!,\n      amount: totalAmount!,\n      currency: currency!,\n    };\n  }, [currency, photo, text, title, totalAmount]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={closeModal}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            tipAmount={tipAmount}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = selectTabState(global).payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n      tipAmount,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      tipAmount,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const stikerSize = isMobile ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  isForForum?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  isForForum,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target?.files?.[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl && croppedBlobUrl !== currentAvatarBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }, [croppedBlobUrl, currentAvatarBlobUrl, onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n    isForForum && 'rounded-square',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","getMessageHtmlId","MESSAGE_CONTENT_SELECTOR","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","objectFit","getSetPresentationMode","video","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","cache","Map","useMediaProps","mediaId","avatarOwner","delay","photo","getMessagePhoto","undefined","actionPhoto","getMessageActionPhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","videoSize","getMessageFileSize","avatarMedia","photos","isVideoAvatar","Boolean","isVideo","isPhoto","isGif","isFromSharedMedia","isFromSearch","getMediaHash","useMemo","isFull","getVideoAvatarMediaHash","getChatAvatarHash","getMessageMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useSyncEffect","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","useBlurSync","getMessageMediaThumbDataUri","bestData","fileName","getMessageFileName","hasVideoAvatar","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","VIDEO_AVATAR_FULL_DIMENSIONS","AVATAR_FULL_DIMENSIONS","avatarPhoto","memo","withGlobal","global","isSchedule","threadId","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","chat","selectChat","chatId","contactName","isUserId","getUserFirstOrLastName","selectUser","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","DeleteMessageModal","isOpen","album","onConfirm","onClose","deleteMessages","deleteScheduledMessages","getActions","handleDeleteMessageForAll","useCallback","messageIds","messages","map","shouldDeleteForAll","handleDeleteMessageForSelf","lang","useLang","React","Modal","onEnter","className","title","Button","color","isText","onClick","renderText","DeleteProfilePhotoModal","profileId","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","canUpdateMedia","currentMessageList","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","isCurrentAvatar","avatarHash","canUpdate","messageListType","type","avatarOwnerId","MediaViewerActions","canReport","zoomLevelChange","selectMedia","onReport","onCloseMediaViewer","onBeforeDelete","onForward","setZoomLevelChange","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useFlag","isMobile","useAppLayout","downloadMessageMedia","cancelMessageMediaDownload","updateProfilePhoto","updateChatPhoto","downloadProgress","handleDownloadClick","handleZoomOut","handleZoomIn","handleUpdate","MenuButton","onTrigger","round","ariaLabel","renderDeleteModals","menuItems","isForwardingAllowed","push","icon","children","Math","href","download","length","DropdownMenu","trigger","positionX","MenuItem","key","ProgressSpinner","progress","noCross","renderDownloadButton","prop","getBrowserFullscreenElementProp","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","MediaViewerFooter","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","PLAYBACK_RATES","VideoPlayerControls","bufferedRanges","bufferedProgress","currentTime","duration","fileSize","isForceMobileVersion","isPlaying","isFullscreenSupported","isFullscreen","isVisible","isBuffered","volume","isMuted","playbackRate","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","setVisibility","onSeek","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","seekerRef","isSeekingRef","isSeeking","IS_TOUCH_ENV","timeout","body","remove","handleSeek","left","getBoundingClientRect","clientX","MouseEvent","targetTouches","max","min","handleStartSeek","handleStopSeek","captureEvents","onCapture","onRelease","onDrag","volumeIcon","percentagePlayed","ref","start","end","renderSeekLine","ripple","IS_IOS","RangeSlider","bold","value","onChange","formatMediaDuration","renderTime","formatFileSize","Menu","positionY","autoClose","rate","disabled","VideoPlayer","url","posterData","posterSize","isMediaViewerOpen","noPlay","toggleControls","areControlsVisible","shouldCloseOnClick","isClickDisabled","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setCurrentTime","setFullscreen","exitFullscreen","elRef","setIsPlayed","setIsFullscreen","useLayoutEffect","listener","isEnabled","controls","listenerEnter","listenerExit","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreen","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","onLeave","isSupported","setIsSupported","setIsInPictureInPicture","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","handleVideoMove","handleVideoLeave","bounds","right","clientY","top","bottom","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","position","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","togglePayingStateBySpace","preventDefault","wrapperStyle","videoStyle","onMouseMove","onMouseOut","onContextMenu","onDoubleClick","_extends","autoPlay","controlsList","playsInline","loop","onPlay","onEnded","onPause","onTimeUpdate","join","square","ownProps","selectTabState","mediaViewer","selectChatMessage","senderId","selectScheduledMessage","props","isActive","animationLevel","onFooterClick","setControlsVisible","isMoving","isGhostAnimation","calculateMediaViewerDimensions","renderPhoto","textParts","content","action","renderMessageText","hasFooter","imageSize","canDrag","Spinner","renderVideoPreview","alt","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelAnimation","cancelZoomAnimation","SwipeDirection","MediaViewerSlides","getMediaId","rest","containerRef","activeSlideRef","transformRef","x","y","scale","lastTransformRef","swipeDirectionRef","isActiveRef","isReleasedRef","activeMediaId","setActiveMediaId","prevZoomLevelChange","usePrevious","hasZoomChanged","useFullscreenStatus","fullscreenProp","checkIfFullscreen","isMouseDown","setIsMouseDown","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","setTransform","selectMediaDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","pageX","useTimeout","lastTransform","lastDragOffset","lastZoomCenter","panDelta","initialContentRect","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","offset","animateNumber","from","to","timing","onUpdate","changeSlideOnClick","target","handleKeyDown","calculateOffsetBoundaries","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","maxOffsetX","isBetween","clamp","minOffsetY","maxOffsetY","absX","abs","absY","s1","scaleFactor","x1","y1","k","Vx","Vy","dirX","_transformRef$current","cleanup","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","checkIfControlTarget","event","captureEvent","dragOffsetX","dragOffsetY","cancelDrag","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","transform","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","nextMediaId","prevMediaId","hasPrev","hasNext","getAnimationStyle","MediaViewerContent","isRtl","toFixed","selector","matches","messageId","isAvatar","settings","byKey","sender","selectSender","SenderInfo","isFallbackAvatar","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","user","withVideo","formatMediaDateTime","date","shouldSkipHistoryAnimations","currentUserId","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","isChatAdmin","selectChatScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","MediaViewer","openMediaViewer","openForwardMenu","animationKey","prevSenderId","headerAnimation","isReportModalOpen","openReportModal","closeReportModal","singleMediaId","mediaIds","p","i","getChatMediaMessageIds","selectedMediaIndex","indexOf","disableDirectTextInput","enableDirectTextInput","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevIsHidden","prevOrigin","prevAvatarOwner","prevBestImageData","shouldAnimateOpening","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","handleFooterClick","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","fromId","index","handleBeforeDelete","ShowTransition","shouldAnimateFirstRender","noCloseTransition","Transition","activeKey","name","fullInfo","fallbackPhoto","ReportModal","subject","TOPIC_ICON_SIZE","ChatOrUserPicker","chatOrUserIds","chatsById","search","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","onCloseAnimationEnd","loadTopics","topicContainerRef","searchRef","topicSearchRef","viewportIds","getMore","useInfiniteScroll","forumId","setForumId","topicSearch","setTopicSearch","viewportOffset","resetSearch","useInputFocusOnOpen","topicIds","topics","topicsResult","searchTitle","toLowerCase","result","values","reduce","acc","topic","getCanPostInChat","keys","Number","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","useKeyboardListNavigation","isForum","handleTopicKeyDown","handleTopicClick","topicId","InputText","onKeyDown","placeholder","InfiniteScroll","items","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","ListItem","clickArg","TopicIcon","letterClassName","Loading","onLoadMore","PrivateChatInfo","status","userId","GroupChatInfo","chats","byId","listIds","orderedPinnedIds","activeListIds","active","archivedListIds","archived","pinnedIds","contactIds","contactList","userIds","RecipientPicker","filter","API_CHAT_TYPES","onSelectRecipient","setSearch","ids","priorityIds","unique","getGlobal","usersById","users","chatIds","isDeletedUser","MAIN_THREAD_ID","sorted","sortChatIds","filterChatsByName","filterUsersByName","filterChatIdsByType","renderingIds","useCurrentOrPrev","isManyMessages","forwardMessages","ForwardRecipientPicker","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","showNotification","isShown","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","DraftRecipientPicker","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","AttachBotRecipientPicker","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","Dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","isModalOpen","openModal","closeModal","dialog","contactRequest","invite","hash","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","header","renderInviteHeader","handleJoinClick","renderInvite","handleConfirm","contact","pick","getReadableErrorText","Notifications","notifications","dismissNotification","localId","actionText","Notification","onDismiss","SafeLinkModal","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","ConfirmDialog","confirmLabel","confirmHandler","UrlAuthModal","urlAuth","currentUser","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","request","button","isWriteAllowed","handleLoginChecked","Checkbox","checked","label","getUserFullName","onCheck","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","CalendarModal","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleSubmit","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","historyCalendarSelectedAt","HistoryCalendar","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","userStatus","selectUserStatus","phoneCodeList","countryList","phoneCodes","NewContactModal","isByPhoneNumber","_renderingUser$firstN","_renderingUser$lastNa","_renderingUser$phoneN","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","_renderingUser$firstN2","_renderingUser$lastNa2","_renderingUser$phoneN2","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","getUserStatus","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","close","webApp","attachBot","attachMenu","bots","selectCurrentChat","theme","selectTheme","isPaymentModalOpen","payment","paymentStatus","WebAppModal","closeWebApp","sendWebViewData","prolongWebView","toggleAttachBot","openTelegramLink","openChat","openInvoice","setWebAppPaymentSlug","mainButton","setMainButton","isBackButtonVisible","setIsBackButtonVisible","backgroundColor","setBackgroundColor","extractCurrentThemeParams","bg_color","headerColor","setHeaderColor","confirmClose","setConfirmClose","isCloseModalOpen","openCloseModal","closeCloseModal","isLoaded","markLoaded","markUnloaded","popupParams","setPopupParams","prevPopupParams","renderingPopupParams","frameRef","buttonText","queryId","replyToMessageId","isSimple","handleEvent","eventType","eventData","slug","linkUrl","TME_LINK_PREFIX","path_full","is_visible","themeParams","validateHexColor","newColor","color_key","data","button_color","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","need_confirmation","buttons","reloadFrame","sendEvent","sendViewport","sendTheme","useWebAppFrame","isSimpleView","onEvent","onLoad","ignoreEventsRef","lastFrameSizeRef","handleLoad","frame","once","contentWindow","postMessage","JSON","stringify","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","scrollbarColor","getComputedStyle","getPropertyValue","req_id","requestId","navigator","clipboard","readText","catch","then","shouldShowMainButton","useInterval","peerId","handleMainButtonClick","handleSettingsButtonClick","handleRefreshClick","handlePopupClose","buttonId","button_id","handlePopupModalClose","prevIsPaymentModalOpen","handleToggleClick","handleBackClick","openBotChat","MoreMenuButton","isMenuOpen","backButtonClassName","prevMainButtonColor","prevMainButtonTextColor","prevMainButtonIsActive","prevMainButtonText","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideButton","setShouldHideButton","buttonChangeTimeout","hasSettings","isAttachBot","destructive","sandbox","allow","allowFullScreen","confirmIsDestructive","hasCloseButton","BotTrustModal","cancelBotTrustRequest","markBotTrusted","previousBot","previousType","currentBot","currentType","handleBotTrustAccept","AttachBotInstallModal","confirmAttachBotInstall","cancelAttachBotInstall","setIsWriteAllowed","prevBot","renderingBot","_bot$shouldRequestWri","shortName","DeleteFolderDialog","deleteFolderDialogId","closeDeleteChatFolderModal","deleteChatFolder","handleDeleteFolderMessage","PremiumLimitsCompare","leftValue","rightValue","floatingBadgeIcon","rightStyle","dangerouslySetInnerHTML","__html","COLOR_START","COLOR_END","PremiumLimitPreview","description","colorStepProgress","lerp","PremiumFeaturePreviewVideo","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","useCanvasBlur","useMediaTransition","DeviceFrame","OptimizedVideo","canPlay","SliderDots","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","count","Array","fill","_","isLast","isPreLast","isFirst","isPreFirst","isInvisible","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","AnimatedSticker","tgsUrl","play","isLowPriority","noLoop","stickers","premium","PremiumFeaturePreviewStickers","setOffset","setSize","renderedStickers","slice","cycleRestrict","clientWidth","l","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","emoji_status","PREMIUM_FEATURE_DESCRIPTIONS","PREMIUM_FEATURE_SECTIONS","PREMIUM_BOTTOM_VIDEOS","LIMITS_ORDER","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","LIMITS_DESCRIPTIONS","PremiumFeatureModal","promo","initialSection","onClickSubscribe","isPremium","limits","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","handleLimitsScroll","scrollHeight","scrollContainer","fastSmoothScrollHorizontal","handleSelectSlide","async","options","find","option","months","onScroll","scrollLeft","scrollLeftOriginal","setProperty","toString","reverseIndex","ceil","prevElement","reverseElement","slide","section","defaultLimit","premiumLimit","videoSections","videos","thumbnail","isShiny","withPremiumGradient","formatCurrency","amount","currency","COLORS","PremiumFeatureItem","buttonClassName","PREMIUM_FEATURE_COLOR_ICONS","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","PremiumStatus","premiumModal","isClosing","isSuccess","isGift","monthsAmount","fromUser","fromUserId","toUser","toUserId","selectIsCurrentUserPremium","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","appConfig","premiumSlug","premiumInvoiceSlug","premiumBotUsername","premiumPromoOrder","PremiumMainModal","dialogRef","closePremiumModal","requestConfetti","isHeaderHidden","setHeaderHidden","currentSection","setCurrentSection","handleClickWithStartParam","showConfetti","prevIsPremium","filteredSections","isClosed","PremiumLogo","renderTextWithEntities","statusText","statusEntities","renderFooterText","GiftOption","fullMonthlyAmount","perMonth","floor","discount","handleChange","forUserId","monthlyCurrency","monthlyAmount","giftPremiumModal","gifts","premiumGifts","GiftPremiumModal","openPremiumModal","closeGiftPremiumModal","openUrl","renderedUser","renderedGifts","selectedOption","setSelectedOption","firstGift","cheaperGift","gift","selectedGift","botUrl","handlePremiumClick","parts","match","Link","isPrimary","renderPremiumFeaturesLink","LIMIT_DESCRIPTION","uploadMaxFileparts","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","PremiumLimitReachedModal","closeLimitReachedModal","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","StickerSet","stickerSet","loadAndPlay","idPrefix","favoriteStickers","isSavedMessages","isStatusPicker","isCurrentUserPremium","shouldHideRecentHeader","withDefaultTopicIcon","withDefaultStatusIcon","observeIntersection","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","onContextMenuOpen","onContextMenuClose","onContextMenuClick","clearRecentStickers","clearRecentCustomEmoji","toggleStickerSet","loadStickers","sharedCanvasRef","sharedCanvasHqRef","isConfirmModalOpen","openConfirmModal","closeConfirmModal","itemsPerRow","setItemsPerRow","isIntersecting","useIsIntersecting","stickerMarginPx","emojiMarginPx","isRecent","RECENT_SYMBOL_SET_ID","isFavorite","FAVORITE_SYMBOL_SET_ID","isEmoji","isPremiumSet","selectIsSetPremium","handleClearRecent","handleAddClick","stickerSetId","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","isLottie","stickerSetInfo","handleDefaultStatusIconClick","DEFAULT_STATUS_ICON_ID","itemSize","EMOJI_SIZE_PICKER","STICKER_SIZE_PICKER","margin","calculateItemsPerRow","entry","contentRect","useResizeObserver","accessHash","isLocked","some","isFree","isInstalled","installedDate","isArchived","canCut","isCut","expand","itemsBeforeCutout","totalItemsCount","heightWhenCut","shouldHideHeader","favoriteStickerIdsSet","Set","pill","fluid","grey","isHqEmoji","selectIsAlwaysHighPriorityEmoji","canvasRef","StickerButton","noAnimate","canViewSet","onUnfaveClick","has","onFaveClick","onRemoveRecentClick","StickerSetCover","STICKER_SIZE_PICKER_HEADER","hasThumbnail","isVideos","shouldFallbackToStatic","IS_WEBM_SUPPORTED","staticHash","getStickerPreviewHash","staticMediaData","mediaHash","isReady","useBoundsInSharedCanvas","sharedCanvas","sharedCanvasCoords","coords","getFirstLetters","stickerSetIntersections","setsById","stickerSetsById","customEmojis","customEmojisById","featuredIds","customEmojiFeaturedIds","statusRecent","emojis","recentStatusEmojis","recentCustomEmojis","recentCustomEmojiIds","addedCustomEmojiIds","added","setIds","canAnimate","shouldLoopStickers","defaultTopicIconsId","defaultStatusIconsId","CustomEmojiPicker","withDefaultTopicIcons","onCustomEmojiSelect","headerRef","activeSetIndex","setActiveSetIndex","pickTruthy","observe","useIntersectionObserver","rootRef","throttleMs","entries","forEach","startsWith","intersectingWithIndexes","observeIntersectionForCovers","areAddedLoaded","allSets","MEMO_EMPTY_ARRAY","defaultSets","defaultStatusIconsPack","concat","defaultTopicIconsPack","setIdsToDisplay","setsToDisplay","noPopulatedSets","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","shouldRenderContents","useHorizontalScroll","newLeft","offsetWidth","HEADER_BUTTON_WIDTH","selectStickerSet","stickerSetEl","fastSmoothScroll","handleEmojiSelect","emoji","fullClassName","firstSticker","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","CHAT_STICKER_SET_ID","PREMIUM_STICKER_SET_ID","faded","noContextMenu","areFeaturedStickersLoaded","StatusPickerMenu","statusButtonRef","onEmojiStatusSelect","loadFeaturedEmojiStickers","transformOriginX","isContextMenuShown","markContextMenuShown","unmarkContextMenuShown","Portal","noCompact","bubbleClassName","noCloseOnBackdrop","AboutAdsModal","SafeLink","isPrivateChat","isChatChannel","isGroup","isSuperGroup","canPinForAll","PinMessageModal","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","UnpinAllMessagesModal","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","DeleteSelectedMessageModal","exitMessageSelectMode","tabState","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","canForward","selectCanForwardMessages","isForwardModalOpen","isModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","MessageSelectToolbar","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","useCopySelectedMessages","useHotkeys","handleExitMessageSelectMode","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleCopy","handleDownload","prevSelectedMessagesCount","formattedMessagesCount","renderButton","seenByModal","memberIds","seenByUserIds","SeenByModal","closeSeenByModal","handleCloseSeenByModal","renderingMemberIds","noStatusOrTyping","reactorModal","reactions","reactors","availableReactions","ReactorListModal","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","handleLoadMore","allReactions","uniqueReactions","reaction","r","isSameReaction","nextOffset","LoadMoreDirection","formatIntegerCompact","reactionsCount","getReactionUniqueKey","ReactionStaticEmoji","flatMap","userReactions","reactor","FullNameTitle","peer","withEmojiStatus","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","EmojiInteractionAnimation","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectHash","effectTgsUrl","startSize","isReversed","quality","IS_ANDROID","messageLanguageModal","currentLanguageCode","selectLanguageCode","activeTranslationLanguage","selectRequestedTranslationLanguage","MessageLanguageModal","requestMessageTranslation","closeMessageLanguageModal","handleSelect","toLanguageCode","handleSearch","translateLanguages","SUPPORTED_TRANSLATION_LANGUAGES","langCode","translatedName","Intl","DisplayNames","of","originalName","filteredDisplayedLanguages","isSlim","teactExperimentControlled","secondaryIcon","multiline","narrow","highlight","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","orderedIds","LeftSearchResultChat","withUsername","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","contextActions","useChatContextActions","handleDelete","handleChatFolderChange","useSelectWithEnter","avatarSize","withVideoAvatar","DeleteChatModal","ChatFolderModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","RecentContacts","onReset","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","shouldReplaceHistory","handleClearRecentlyFoundChats","lastSyncTime","privateChatUser","ChatMessage","searchQuery","mediaThumbnail","getMessageSticker","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSelf","formatPastTimeShort","renderMessageSummary","isSpoiler","getMessageIsSpoiler","renderSummary","DateSuggest","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalSearch","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","ChatResults","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleChatClick","handlePickerItemClick","contactIdsWithMe","foundContactIds","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","PickerSelectedItem","chatOrUserId","LeftSearchResultTopic","foundTopicIds","searchChatId","ChatMessageResults","createMapStateToProps","isVoice","activeDownloads","isLoading","CURRENT_TYPE","MediaResults","observeIntersectionForMedia","handleSelectMedia","isMediaGrid","isMessageList","itemSelector","Media","LinkResults","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","FileResults","Document","withDate","datetime","smaller","onDateClick","AudioResults","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","CHAT_TABS","TRANSITION_RENDER_COUNT","currentContent","LeftSearch","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","payload","SettingsHeader","currentScreen","editedFolderId","onSaveFilter","onScreenSelect","signOut","openDeleteChatFolderModal","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","callback","currentAmountRef","useMultiClick","SettingsScreens","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","folderId","handleSignOutMessage","forceInitApi","SettingsMenuButton","renderHeaderContent","sessionCount","activeSessions","orderedHashes","SettingsMain","loadProfilePhotos","loadAuthorizations","ProfileInfo","canPlayVideo","forceShowSelf","ChatExtra","langName","leftElement","PremiumIcon","withGradient","big","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","UsernameInput","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","username","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","isValid","isUsernameValid","success","readOnly","TextArea","autoComplete","maxLengthIndicator","onInput","onKeyPress","onPaste","noReplaceNewlines","textareaRef","labelText","textarea","previousSelectionEnd","selectionEnd","htmlFor","ZERO_POINT","Draggable","onDragEnd","externalStyle","knobStyle","setState","isDragging","translation","handleMouseDown","getClientCoordinate","handleMouseMove","handleMouseUp","cssStyles","buildStyle","onMouseDown","onTouchStart","ManageUsernames","usernames","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","prevUsernameList","orderedUsernames","dragOrderUsernames","draggedIndex","handleCopyUsername","copyTextToClipboard","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","handleDrag","splice","handleDragEnd","usernameData","_state$orderedUsernam","_state$dragOrderUsern","isDragged","draggedTop","subtitle","handler","ERROR_FIRST_NAME_MISSING","editUsernameError","profileEdit","maxBioLength","selectCurrentLimit","currentFirstName","currentLastName","bio","currentBio","currentAvatarHash","SettingsEditProfile","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","shouldRenderUsernamesManage","isSaveButtonShown","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","s","renderPurchaseLink","FloatingActionButton","SettingsDataStorage","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","canAutoPlayGifs","canAutoPlayVideos","autoLoadFileMaxSizeMb","setSettingOption","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","handleCanAutoPlayGifsChange","handleCanAutoPlayVideosChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","SettingsFoldersMain","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","openLimitReachedModal","sortChatFolders","orderedFolderIds","dragOrderIds","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","folder","ALL_FOLDER_ID","getFolderDescriptionText","handleCreateFolderFromRecommended","canCreateNewFolder","AnimatedIcon","STICKER_SIZE_FOLDER_SETTINGS","LOCAL_TGS_URLS","_state$orderedFolderI","_state$dragOrderIds$i","isBlocked","inactive","isStatic","ShowMoreButton","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","SettingsFoldersEdit","dispatch","onAddIncludedChats","onAddExcludedChats","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","mode","folderUpdate","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","renderChatType","isTouched","maxChats","SettingsFoldersChatsPicker","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","onFilterChange","chatTypes","shouldMinimize","handleItemClick","newSelectedIds","handleChatTypeClick","newSelectedChatTypes","handleFilterChange","selectedType","isMinimized","canClose","isSelected","withChatType","SettingsFoldersChatFilters","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","displayedIds","newFilter","handleSelectedIdsChange","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","SettingsFolders","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","ANIMATION_LEVEL_OPTIONS","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","SettingsGeneral","messageTextSize","messageSendKeyCombo","timeFormat","APPEARANCE_THEME_OPTIONS","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","handleMessageTextSizeChange","newSize","documentElement","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","RadioGroup","selected","WallpaperTile","wallpaper","localMediaHash","thumbRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","SettingsGeneralBackground","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","handleResetToDefault","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","SettingsNotifications","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","canDisplayChatInTitle","privacy","blocked","passcode","hasPasscode","blockedCount","totalCount","webAuthCount","activeWebSessions","canDisplayAutoarchiveSetting","privacyPhoneNumber","privacyLastSeen","lastSeen","privacyProfilePhoto","profilePhoto","privacyForwarding","forwards","privacyVoiceMessages","voiceMessages","privacyGroupChats","chatInvite","privacyPhoneCall","phoneCall","privacyPhoneP2P","phoneP2P","SettingsPrivacy","loadPrivacySettings","loadBlockedContacts","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","updateGlobalPrivacySettings","loadWebAuthorizations","updatePageTitle","handleArchiveAndMuteChange","handleVoiceMessagesClick","handleChatInTitleChange","handleUpdateContentSettings","getVisibilityValue","visibility","blockCount","blockChatIds","blockUserIds","allowCount","allowChatIds","allowUserIds","total","exceptionString","allowDisabledClick","rightElement","language","languages","canTranslate","doNotTranslate","SettingsLanguage","loadLanguages","loadAttachBots","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","setLanguage","currentLangCode","shortLangCode","substr","nativeName","buildOptions","handleShouldTranslateChange","newValue","doNotTranslateText","allDoNotTranslateLanguages","handleDoNotSelectOpen","loadingOption","getPrivacyKey","screen","SelectAvatar","selectedFile","setSelectedFile","handleAvatarCrop","croppedImg","handleModalClose","accept","CropModal","file","SettingsPrivacyPublicProfilePhoto","loadFullUser","uploadProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","isFallback","handleConfirmDelete","handleOpenFileSelector","click","privacySettings","SettingsPrivacyVisibility","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","membersCount","handleVisibilityChange","getSessionIcon","session","platform","device","deviceModel","systemVersion","byHash","SettingsActiveSession","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","formatDateTimeToString","dateActive","appName","appVersion","ip","region","country","getLocation","Switcher","SettingsActiveSessions","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","areButtonsInColumn","SettingsActiveWebsite","terminateWebAuthorization","browser","SettingsActiveWebsites","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","blockedIds","userSearch","BlockUserModal","setUserSearchQuery","blockContact","query","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","chatsByIds","usersByIds","SettingsPrivacyBlockedUsers","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","isPrivate","userOrChat","userMainUsername","renderContact","SettingsTwoFaEnabled","AnimatedIconWithPreview","previewUrl","lockPreviewUrl","SettingsPasswordForm","shouldDisablePasswordManager","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","shouldResetValue","onChangePasswordVisibility","SettingsTwoFaStart","onStart","animatedEmoji","selectAnimatedEmoji","SettingsTwoFaSkippableForm","shouldConfirm","focusDelayTimeoutMs","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleInputChange","handleSkip","handleSkipConfirm","AnimatedIconFromSticker","SettingsTwoFaCongratulations","STICKER_SIZE_TWO_FA","codeLength","twoFaSettings","waitingEmailCodeLength","SettingsTwoFaEmailCode","SettingsTwoFa","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","SettingsTwoFaPassword","getCurrentPrivacySettings","SettingsPrivacyVisibilityExceptionList","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","filterPlaceholder","searchInputId","config","selectedReaction","defaultReaction","SettingsQuickReaction","setDefaultReaction","availableReaction","isInactive","emoticon","SettingsPasscodeStart","STICKER_SIZE_PASSCODE","SettingsPasscodeEnabled","SettingsPasscodeCongratulations","fullReset","SettingsPasscode","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","currentPasscode","decryptSession","SettingsPasscodeForm","StickerSetCard","handleCardClick","STICKER_SIZE_GENERAL_SETTINGS","renderPreview","DEFAULT_REACTION_SIZE","addedSetIds","customEmojiSetIds","SettingsStickers","shouldSuggestStickers","openStickerSet","stickerSettingsRef","handleStickerSetClick","handleSuggestStickersChange","handleShouldLoopStickersChange","stickerSets","SettingsCustomEmoji","shouldSuggestCustomEmoji","handleSuggestCustomEmojiChange","customEmojiSets","LOCAL_SUPPORTED_DETECTION_LANGUAGES","SUPPORTED_LANGUAGES","SettingsDoNotTranslate","displayedOptions","setDisplayedOptions","allSelected","useEffectWithPrevDeps","prevIsActive","unselected","partition","selectedFiltered","newDoNotTranslate","v","filteredDisplayedOptions","SettingsExperimental","nonInteractive","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","Settings","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","forceReturnToChatList","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","SettingsGeneralBackgroundColor","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","statusesById","userStatusesById","ContactList","openNewContactDialog","filteredIds","sortUserIds","isSearching","NewChatStep1","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","isUserBot","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","NewChatStep2","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","NewChat","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","ArchivedChats","isForumPanelOpen","archiveSettings","onTopicSearch","onSettingsScreenSelect","onLeftColumnContentChange","updateArchiveSettings","handleDisplayArchiveInChats","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","useForumPanelRender","onTransitionEnd","ChatList","folderType","ForumPanel","folderOrderedIds","editChatFolders","initialSelectedFolderIds","pinnedChatIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","getTouchY","changedTouches","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","el","_excludedClosestSelector","passive","onkeydown","enableScrolling","REACTION_SIZE","IS_COMPACT_MENU","cn","createClassNameBuilder","ReactionSelectorReaction","previewIndex","chosen","onToggleReaction","selectAnimation","activate","deactivate","isAnimationLoaded","markAnimationLoaded","shouldRenderStatic","shouldRenderAnimated","onMouseEnter","ReactionSelector","enabledReactions","currentReactions","maxUniqueReactions","itemsScrollRef","handleWheel","cancelable","reactionsToRender","canSendReaction","userReactionIndexes","chosenReactions","chosenOrder","findIndex","onWheelCapture","onTouchMove","MessageContextMenu","anchor","canSendNow","canReschedule","canReply","canEdit","noReplies","canPin","canUnpin","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canSaveGif","canRevote","canClosePoll","canShowOriginal","canSelectLanguage","repliesThreadInfo","canShowSeenBy","canShowReactionsCount","canShowReactionList","seenByRecentUsers","hasCustomEmoji","onReply","onOpenThread","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onCopyNumber","onDownload","onSaveGif","onCancelVote","onClosePoll","onShowSeenBy","onShowReactors","onCopyMessages","onAboutAds","onSponsoredHide","onTranslate","onShowOriginal","onSelectLanguage","openCustomEmojiSets","menuRef","scrollableRef","withReactions","isSponsoredMessage","markIsReady","unmarkIsReady","handleAfterCopy","copyOptions","afterEffect","getMessageText","getMessageContact","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","execCommand","clipboardText","copyHtmlToClipboard","getMessageTextWithSpoilers","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","getLayout","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","transformOriginY","menuStyle","withScroll","useContextMenuPosition","bubbleStyle","detectedLanguage","selectActiveDownloadIds","seenByExpiresAt","seenByMaxChatMembers","noOptions","isOwn","isOwnMessage","isScheduled","isLocal","isMessageLocal","isChatGroup","isAction","isActionMessage","areReactionsEmpty","canSeeList","canCopyNumber","customEmojiSetsInfo","selectMessageCustomEmojiSets","customEmojiSetsNotFiltered","every","translationRequestLanguage","hasTranslation","selectMessageTranslations","isTranslationEnabled","canTranslateLanguage","IS_TRANSLATION_SUPPORTED","emojiOnlyCount","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","canScheduleUntilOnline","selectCanScheduleUntilOnline","ContextMenuContainer","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","openReactorListModal","loadFullChat","copyMessagesByIds","saveGif","cancelPollVote","closePoll","toggleReaction","showOriginalMessage","openMessageLanguageModal","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isClosePollDialogOpen","openClosePollDialog","closeClosePollDialog","requestCalendar","calendar","useSchedule","recentReactions","uniqueReactors","msg","handleReport","closeMenu","closePinModal","handleReply","handleOpenThread","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleCancelVote","handlePollClose","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleRescheduleMessage","scheduledAt","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleCopyMessages","handleCopyLink","getChatMessageLink","handleCopyNumber","handleSaveGif","gif","handleToggleReaction","handleTranslate","handleShowOriginal","handleSelectLanguage","reportMessageIds","scheduledMaxDate","SponsoredMessageContextMenuContainer","handleAboutAdsOpen","handleSponsoredHide","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","threadInfo","selectThreadInfo","isComments","originChannelId","canSendStickers","shouldSchedule","selectShouldSchedule","StickerSetModal","prevStickerSet","renderingStickerSet","isAdded","isScheduleRequested","isPreloadedGlobally","shouldUpdateStickerSetsOrder","handleButtonClick","suffix","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","renderButtonText","CustomEmojiSetsModal","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","customEmojiSet","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","isMainThread","canReportChat","currentChatId","currentThreadId","chatBot","REPLIES_USER_ID","selectChatBot","canGiftPremium","canCreateTopic","isCreator","isUserRightBanned","getHasAdminRight","canEditTopic","getCanManageTopic","isTopic","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","botInfo","commands","isChatInfoShown","HeaderMenuContainer","withExtraActions","withForumActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestMasterAndRequestCall","toggleStatistics","openGiftPremiumModal","openChatWithInfo","openCreateTopicPanel","openEditTopicPanel","isViewGroupInfoShown","usePrevDuringAnimation","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleCreateTopicClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftPremiumClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleStatisticsClick","handleSelectMessages","handleOpenAsMessages","botButtons","cmd","MenuSeparator","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","MobileSearchFooter","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","input","div","contentEditable","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","handleCloseLocalTextSearch","SearchInput","getDayStartAt","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","findInViewport","selectorOrElements","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","setTooltipItemVisible","first","isFullyVisible","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","handleArrowKey","handleItemSelect","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","MentionTooltip","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","BLUR_CANVAS_SIZE","AttachmentModalItem","attachment","isSingle","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","File","filename","extension","getFileExtension","previewData","shouldSkipGrouping","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","recentEmojis","attachmentSettings","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","members","keywords","customEmojiForEmoji","forEmoji","captionLimit","AttachmentModal","attachments","getHtml","canShowCustomSendMenu","shouldSuggestCompression","shouldForceCompression","shouldForceAsFile","isForCurrentMessageList","onAttachmentsUpdate","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","onRemoveSymbol","onEmojiSelect","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","shouldSendCompressed","setShouldSendCompressed","shouldCompress","isSendingCompressed","shouldSendGrouped","setShouldSendGrouped","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","renderingIsOpen","isHovered","markHovered","unmarkHovered","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","getSelectionRange","useGetSelectionRange","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","closeEmojiTooltip","useEmojiTooltip","isCustomEmojiTooltipOpen","insertCustomEmoji","closeCustomEmojiTooltip","useCustomEmojiTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isContextMenuOpen","isCustomSendMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","sendAttachments","shouldSendScheduled","handleSendSilent","handleSendClick","handleScheduleClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleDisableSpoilers","handleToggleSpoiler","leftChars","useDerivedState","leftCharsBeforeLimit","html","innerHTML","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","isMultiple","isBottomDividerShown","renderHeader","noBackdropClose","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","uniqueId","EmojiTooltip","CustomEmojiTooltip","SymbolMenuButton","isAttachmentModal","canSendPlainText","MessageInput","isAttachmentModalInput","editableInputId","canAutoFocus","shouldSuppressFocus","onSuppressedFocus","CustomSendMenu","onSendSchedule","PollModal","isQuiz","shouldBeAnonymous","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","addNewOption","newOptions","list","scrollTo","behavior","handleCreate","questionTrimmed","substring","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","renderQuizNoOptionError","hidden","EmojiButton","native","image","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","EmojiCategory","category","allEmojis","useOnIntersect","emojisPerRow","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","EmojiPicker","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","MENU_TRANSITION_DURATION","shouldRenderContent","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","containerClassName","favorite","premiumSet","recentStickers","premiumStickers","StickerPicker","loadRecentStickers","addRecentSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","existingAddedSetIds","addedPremiumStickers","hasEffect","flat","totalPremiumStickers","uniqueByField","fullSet","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleRemoveRecentSticker","GifButton","onUnsaveClick","withThumb","videoData","shouldRenderVideo","isVideoReady","contextMenuPosition","handleBeforeContextMenu","handleUnsaveClick","handleContextDelete","handleSendQuiet","handleSendScheduled","preventMessageInputBlurWithBubbling","preload","gifs","saved","GifPicker","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","CustomEmoji","Stickers","GIFs","SYMBOL_MENU_TAB_ICONS","SymbolMenuFooter","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","SymbolMenu","loadPremiumSetStickers","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","recentCustomEmojisRef","documentId","handleCustomEmojiSelect","renderContent","mobileClassName","withPortal","onMouseLeave","BotCommand","withAvatar","botCommand","BotCommandTooltip","handleSendCommand","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","BotCommandMenu","StickerTooltip","prevStickers","displayedStickers","customEmoji","clearCustomEmojiForEmoji","ce","COMPOSER_EMOJI_SIZE_PICKER","isOpenToBottom","CustomEmojiButton","withSharedAnimation","shouldPreloadPreview","observeIntersectionForPlaying","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","setItemVisible","BaseResult","thumbUrl","thumbnailDataUrl","decoding","MediaResult","isForGallery","inlineResult","webThumbnail","ArticleResult","GifResult","_gif","StickerResult","STICKER_SIZE_INLINE_BOT_RESULT","noShowPremium","InlineBotTooltip","isGallery","inlineBotResults","switchPm","onSelectResult","startBot","renderedIsGallery","handleSendPm","param","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","SendAsMenu","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","noFake","messagesById","RightSearch","handleSearchTextMessagesLocal","viewportResults","senderUser","senderChat","forwardInfo","isChannelPost","foundResult","isOnTop","preloadBackwards","renderSearchResult","teactOrderKey","LastMessageMeta","shouldPlay","selectShouldLoopStickers","StickerSetResult","areStickersLoaded","_set$stickers$filter","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","StickerSearch","loadFeaturedStickers","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","canPostInChat","GifSearch","searchMoreGifs","setGifSearchQuery","handleGifClick","handleSearchMoreGifs","hasResults","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","MESSAGE_OVERVIEW","isPlain","isApproximate","StatisticsOverview","isMessage","statistics","period","formatFullDate","row","cell","field","formatInteger","percentage","renderOverviewItemValue","change","isChangeNegative","StatisticsRecentMessage","toggleMessageStatistics","views","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","selectStatistics","dcId","statisticsDcId","Statistics","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","ensureLovelyChart","zoomToken","create","callApi","zoomOutLabel","recentTopMessages","StatisticsPublicForward","openChatByUsername","GRAPH_TITLES","viewsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","publicForwards","publicForwardsData","answer","voters","offsets","pollResults","PollAnswerResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","PollResults","getMessagePoll","resultsByOption","buildCollectionByKey","ICON_SIZE","createTopicPanel","CreateTopic","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","prev","getTopicColors","handleCreateTopic","iconColor","dummyTopic","shouldCleanup","noLoopLimit","editTopicPanel","EditTopic","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","management","ManageUser","deleteContact","closeManagement","uploadContactProfilePhoto","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","isSuggestRef","handleSuggestPhoto","handleSetPersonalPhoto","handleResetPersonalAvatar","handleSelectAvatar","isSuggest","canSetPersonalPhoto","personalPhoto","notPersonalPhoto","withFullInfo","noPersonalPhoto","GROUP_TITLE_EMPTY","ALL_PERMISSIONS","TOTAL_PERMISSIONS_COUNT","limitReachedModal","hasLinkedChannel","isBasicGroup","invites","canEditForum","canChangeInfo","canBanUsers","canInvite","exportedInvites","isChannelsPremiumLimitReached","ManageGroup","_chat$membersCount","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","toggleForum","currentTitle","currentAbout","imageHash","isPublicGroup","isChatPublic","isPreHistoryHiddenCheckboxRef","isRevoked","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickPermissions","handleClickAdministrators","handleClickInvites","handleClickRequests","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","checkbox","chatReactionsDescription","enabledLength","allowed","totalLength","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembersById","handleDeleteGroup","isForForum","joinRequests","MEDIA_PERMISSIONS","MESSAGE_PERMISSIONS","useManagePermissions","defaultPermissions","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handlePermissionChange","targetName","getUpdatedPermissionValue","oldPermissions","newPermissions","checkMedia","mediaPermissions","sendMedia","embedLinks","sendPlain","sendMessages","ManageGroupPermissions","onChatMemberSelect","updateChatDefaultBannedRights","shouldDisablePermissionForPublicGroup","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","isMediaDropdownOpen","setIsMediaDropdownOpen","handleOpenMediaDropdown","handleDisabledClick","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","blocking","rightIcon","onClickLabel","sendPhotos","sendVideos","sendAudios","sendDocs","sendVoices","sendRoundvideos","sendPolls","inviteUsers","pinMessages","changeInfo","manageTopics","RemoveGroupUserModal","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","isAdmin","isOwner","canDeleteMembers","ManageChatRemovedUsers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","CHANNEL_TITLE_EMPTY","isSignaturesShown","ManageChannel","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","isChannelPublic","selectManagement","maxPublicLinks","ManageChatPrivacyType","updatePublicLink","updatePrivateLink","toggleIsProtected","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","forDiscussionIds","linkedChat","ManageDiscussion","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isPromotedByCurrentUser","isFormFullyDisabled","ManageGroupUserPermissions","selectedChatMemberId","selectedChatMember","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","handleBanFromGroup","viewMessages","getControlIsDisabled","ManageChatAdministrators","handleRecentActionsClick","canAddNewAdmins","adminRights","addAdmins","adminMembers","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","ManageGroupRecentActions","defaultRights","ManageGroupAdminRights","isNewAdmin","selectedUserId","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","manageCall","anonymous","areParticipantsHidden","ManageGroupMembers","noAdmins","toggleParticipantsHidden","deletingUserId","setDeletingUserId","adminIds","shouldUseSearchResults","listedIds","handleDeleteMembersModalClose","handleToggleParticipantsHidden","noScrollRestore","memberId","DeleteMemberModal","ManageGroupUserPermissionsCreate","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","ManageInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","expireDate","getServerTime","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","link","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","copyLink","handleCopyPrimaryClicked","prepareUsageText","requested","diff","formatCountdown","getInviteIconClass","prepareContextActions","actions","editInvite","PrimaryLinkMenuButton","STICKER_SIZE_INVITES","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","ManageInvite","exportChatInvite","isCalendarOpened","openCalendar","closeCalendar","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleExpireDateChange","handleSaveClick","n","ManageReactions","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","reactionsOptions","handleSaveReactions","availableActiveReactions","handleReactionsOptionChange","handleReactionChange","local","inviteInfo","importers","requesters","ManageInviteInfo","loadChatInviteImporters","loadChatInviteRequesters","adminId","isExpired","handleCopyClicked","renderImporters","importer","renderRequesters","requester","JoinRequest","hideChatJoinRequest","fullName","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","handleUserClick","ManageJoinRequests","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","managementType","selectCurrentManagementType","Management","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","iso2","defaultName","useFocusAfterAnimation","animationDuration","hasArrow","ShippingInfo","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","Select","Shipping","shippingOptions","handleShippingSelect","Checkout","invoice","prices","shippingPrices","checkoutInfo","totalPrice","isTosAccepted","onAcceptTos","hasShippingOptions","savedCredentials","setPaymentStep","isInteractive","isRecurring","recurringTermsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","getWebDocumentHash","handleTipsClick","tips","handlePaymentMethodClick","step","PaymentStep","handleShippingAddressClick","handleShippingMethodClick","Skeleton","forceAspectRatio","renderPaymentItem","tip","renderCheckoutItem","customIcon","langStringSplit","renderTosLink","main","ExpiryInput","endsWith","formatCardExpiry","CardInput","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","PaymentInfo","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","ConfirmPayment","noRedirect","SavedPaymentCredentials","onNewCardClick","passwordHint","PasswordConfirm","onPasswordChange","clearPaymentError","cardName","shouldShowSubmit","onInputChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","savedInfo","invoiceContainer","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","inputInvoice","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","isProviderError","isNameRequested","isShippingAddressRequested","isPhoneRequested","isEmailRequested","shouldSendPhoneToProvider","shouldSendEmailToProvider","general","smartGlocalToken","stripeId","passwordValidUntil","validUntil","PaymentModal","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","paymentState","paymentDispatch","setIsTosAccepted","twoFaPassword","setTwoFaPassword","canRenderFooter","setStep","nextStep","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","findShippingOption","getCheckoutInfo","handleNewCardClick","handleClearPaymentError","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","shouldFillRequestedData","modalHeader","isSubmitDisabled","getIsSubmitDisabled","currentStep","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","ReceiptModal","fullAddress","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","isFirstMonkeyLoaded","markFirstMonkeyLoaded","isPeekShown","markPeekShown","stikerSize","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","handleFirstMonkeyLoad","playSegment","croppedBlobUrl","setCroppedBlobUrl","URL","revokeObjectURL","createObjectURL","labelClassName"],"sourceRoot":""}