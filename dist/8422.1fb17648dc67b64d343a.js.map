{"version":3,"file":"8422.1fb17648dc67b64d343a.js","mappings":"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","sources":["webpack://telegram-t/./src/lib/ptp/protobuf/PTPChats/LoadChatsReq.ts","webpack://telegram-t/./src/lib/ptp/protobuf/PTPChats/LoadChatsRes.ts","webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts"],"sourcesContent":["import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { LoadChatsReq_Type } from './types';\n\nexport default class LoadChatsReq extends BaseMsg {\n  constructor(msg?: LoadChatsReq_Type) {\n    super('PTP.Chats.LoadChatsReq', msg);\n    this.setCommandId(ActionCommands.CID_LoadChatsReq);\n  }\n  decode(data: Uint8Array): LoadChatsReq_Type {\n    return this.__D(data);\n  }\n  pack(): Pdu {\n    return this.__pack();\n  }\n  static parseMsg(pdu : Pdu) {\n    return new LoadChatsReq().decode(pdu.getPbBody());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { LoadChatsRes_Type } from './types';\n\nexport default class LoadChatsRes extends BaseMsg {\n  constructor(msg?: LoadChatsRes_Type) {\n    super('PTP.Chats.LoadChatsRes', msg);\n    this.setCommandId(ActionCommands.CID_LoadChatsRes);\n  }\n  decode(data: Uint8Array): LoadChatsRes_Type {\n    return this.__D(data);\n  }\n  pack(): Pdu {\n    return this.__pack();\n  }\n  static parseMsg(pdu : Pdu) {\n    return new LoadChatsRes().decode(pdu.getPbBody());\n  }\n}\n","import type {RequiredGlobalActions} from '../../index';\nimport {addActionHandler, getGlobal, setGlobal,} from '../../index';\n\nimport type {ApiChat, ApiChatMember, ApiError, ApiUser,} from '../../../api/types';\nimport {MAIN_THREAD_ID} from '../../../api/types';\nimport {ChatCreationProgress, ManagementProgress, NewChatMembersProgress} from '../../../types';\nimport type {ActionReturnType, GlobalState, TabArgs,} from '../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  ARCHIVED_FOLDER_ID,\n  CHAT_LIST_LOAD_SLICE,\n  DEBUG,\n  RE_TG_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TME_WEB_DOMAINS,\n  TMP_CHAT_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n} from '../../../config';\nimport {callApi} from '../../../api/gramjs';\nimport {\n  addChatMembers,\n  addChats,\n  addMessages,\n  addUsers,\n  addUserStatuses,\n  deleteTopic,\n  leaveChat,\n  replaceChatListIds,\n  replaceChats,\n  replaceThreadParam,\n  replaceUsers,\n  replaceUserStatuses,\n  updateChat,\n  updateChatListIds,\n  updateChatListSecondaryInfo,\n  updateChats,\n  updateListedTopicIds,\n  updateManagementProgress,\n  updateThreadInfo,\n  updateTopic,\n  updateTopics,\n  updateUser,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatByUsername,\n  selectChatFolder,\n  selectChatListType,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsChatPinned,\n  selectLastServiceNotification,\n  selectSupportChat,\n  selectTabState,\n  selectThread,\n  selectThreadInfo,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectUser,\n  selectUserByPhoneNumber,\n  selectVisibleUsers,\n} from '../../selectors';\nimport {buildCollectionByKey, omit} from '../../../util/iteratees';\nimport {debounce, pause, throttle} from '../../../util/schedulers';\nimport {\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSummaryOnly,\n  isChatSuperGroup,\n  isUserBot,\n} from '../../helpers';\nimport {formatShareText, parseChooseParameter, processDeepLink} from '../../../util/deeplink';\nimport {updateGroupCall} from '../../reducers/calls';\nimport {selectGroupCall} from '../../selectors/calls';\nimport {getOrderedIds} from '../../../util/folderManager';\nimport * as langProvider from '../../../util/langProvider';\nimport {selectCurrentLimit} from '../../selectors/limits';\nimport {updateTabState} from '../../reducers/tabs';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\nimport Account from \"../../../worker/share/Account\";\nimport {LoadChatsReq, LoadChatsRes} from \"../../../lib/ptp/protobuf/PTPChats\";\nimport {ERR} from \"../../../lib/ptp/protobuf/PTPCommon\";\nimport MsgConn, {MsgClientState} from \"../../../lib/ptp/client/MsgConn\";\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst SERVICE_NOTIFICATIONS_USER_MOCK: ApiUser = {\n  id: SERVICE_NOTIFICATIONS_USER_ID,\n  accessHash: '0',\n  type: 'userTypeRegular',\n  isMin: true,\n  phoneNumber: '',\n};\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n      // eslint-disable-next-line @typescript-eslint/no-loop-func\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, threadId = MAIN_THREAD_ID,\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    //todo\n    // actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    actions.requestThreadInfoUpdate({ chatId: id, threadId });\n  }\n});\n\naddActionHandler('openComments', async (global, actions, payload): Promise<void> => {\n  const {\n    id, threadId, originChannelId, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      const chat = selectThreadOriginChat(global, id, threadId);\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n      const result = await callApi('requestThreadInfoUpdate', { chat, threadId, originChannelId });\n      if (!result) {\n        actions.openPreviousChat({ tabId });\n        return;\n      }\n      global = getGlobal();\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      setGlobal(global);\n\n      actions.openChat({ id, threadId: result.topMessageId, tabId });\n    } else {\n      actions.openChat({ id, threadId: topMessageId, tabId });\n    }\n  }\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('focusMessageInComments', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, messageId, tabId = getCurrentTabId(),\n  } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  actions.focusMessage({\n    chatId, threadId, messageId, tabId,\n  });\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const listType = payload.listType as 'active' | 'archived';\n  if(listType === \"archived\"){\n    return;\n  }\n  const { onReplace } = payload;\n  let { shouldReplace } = payload;\n  let i = 0;\n\n  const getOrderDate = (chat: ApiChat) => {\n    return chat.lastMessage?.date || chat.joinDate;\n  };\n  while (shouldReplace || !global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    //\n    // if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n    //   return;\n    // }\n\n    if (global.connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    const listIds = !shouldReplace && global.chats.listIds[listType];\n    const oldestChat = listIds\n      ? listIds\n        /* eslint-disable @typescript-eslint/no-loop-func */\n        .map((id) => global.chats.byId[id])\n        .filter((chat) => (\n          Boolean(chat && getOrderDate(chat))\n          && chat.id !== SERVICE_NOTIFICATIONS_USER_ID\n          && !selectIsChatPinned(global, chat.id)\n        ))\n        /* eslint-enable @typescript-eslint/no-loop-func */\n        .sort((chat1, chat2) => getOrderDate(chat1)! - getOrderDate(chat2)!)[0]\n      : undefined;\n    await loadChats(global,\n      listType,\n      oldestChat?.id,\n      oldestChat ? getOrderDate(oldestChat) : undefined,\n      shouldReplace,\n      true);\n\n    if (shouldReplace) {\n      onReplace?.();\n      shouldReplace = false;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, force, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(global, actions, chat, tabId);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(global, actions, chat, tabId));\n  }\n});\n\naddActionHandler('loadTopChats', (global): ActionReturnType => {\n  runThrottledForLoadTopChats(() => loadChats(global, 'active'));\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, isMuted } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = updateChat(global, chatId, { isMuted });\n  setGlobal(global);\n  void callApi('updateChatMutedState', { chat, isMuted });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, isMuted, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = updateTopic(global, chatId, topicId, { isMuted });\n  setGlobal(global);\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, tabId = getCurrentTabId(),\n  } = payload;\n\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n\n  try {\n    createdChannel = await callApi('createChannel', { title, about, users });\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('leaveChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const createdChat = await callApi('createGroupChat', {\n      title,\n      users,\n    });\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (e: any) {\n    if (e.message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId() } = payload!;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload!;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const lastTopicMessageId = chat.topics?.[topicId]?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatByInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n\n  const result = await callApi('openChatByInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.chatId, tabId });\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, tabId = getCurrentTabId(),\n  } = payload!;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.translate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  actions.openChat({ id: chat.id, tabId });\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', (global, actions, payload): ActionReturnType => {\n  const {\n    url,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    openChatByPhoneNumber,\n    openChatByInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    showNotification,\n    focusMessage,\n    openInvoice,\n    processAttachBotParameters,\n    openChatByUsername: openChatByUsernameAction,\n  } = actions;\n\n  if (url.match(RE_TG_LINK)) {\n    processDeepLink(url);\n    return;\n  }\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${uri.pathname}` : uri.pathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const startAttach = params.hasOwnProperty('startattach') && !params.startattach ? true : params.startattach;\n  const choose = parseChooseParameter(params.choose);\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach,\n      attach: params.attach,\n      tabId,\n    });\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    openChatByInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n  } else if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    const chatId = `-${chatOrChannelPostId}`;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      showNotification({ message: 'Chat does not exist', tabId });\n      return;\n    }\n\n    focusMessage({\n      chatId,\n      messageId,\n      tabId,\n    });\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      slug: part2,\n      tabId,\n    });\n  } else if (startAttach && choose) {\n    processAttachBotParameters({\n      username: part1,\n      filter: choose,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n      tabId,\n    });\n  } else {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach,\n      attach: params.attach,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('acceptInviteConfirmation', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!commentId) {\n    if (!startAttach && messageId && !startParam && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, tabId,\n      });\n      return;\n    }\n    await openChatByUsername(global, actions, username, threadId, messageId, startParam, startAttach, attach, tabId);\n    return;\n  }\n\n  const { chatId, type } = selectCurrentMessageList(global, tabId) || {};\n  const usernameChat = selectChatByUsername(global, username);\n  if (chatId && messageId && usernameChat && type === 'thread') {\n    const threadInfo = selectThreadInfo(global, chatId, messageId);\n\n    if (threadInfo && threadInfo.chatId === chatId) {\n      actions.focusMessage({\n        chatId: threadInfo.chatId,\n        threadId: threadInfo.threadId,\n        messageId: commentId,\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!messageId) return;\n\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  global = getGlobal();\n\n  const threadInfo = selectThreadInfo(global, chatByUsername.id, messageId);\n  let discussionChatId: string | undefined;\n\n  if (!threadInfo) {\n    const result = await callApi('requestThreadInfoUpdate', { chat: chatByUsername, threadId: messageId });\n    if (!result) return;\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    setGlobal(global);\n\n    discussionChatId = result.discussionChatId;\n  } else {\n    discussionChatId = threadInfo.chatId;\n  }\n\n  if (!discussionChatId) return;\n\n  actions.focusMessage({\n    chatId: discussionChatId,\n    threadId: messageId,\n    messageId: Number(commentId),\n    tabId,\n  });\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateChat(global, chat.id, {\n    fullInfo: {\n      ...chat.fullInfo,\n      isPreHistoryHidden: isEnabled,\n    },\n  });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const chatAfterUpdate = selectChat(global, chatId);\n\n  if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(members && isBanned && {\n        members: members.filter((m) => m.userId !== userId),\n      }),\n      ...(members && !isBanned && {\n        members: members.map((m) => (\n          m.userId === userId\n            ? { ...m, bannedRights }\n            : m\n        )),\n      }),\n      ...(isUnblocked && kickedMembers && {\n        kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n      }),\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  global = getGlobal();\n\n  global = updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(newAdminMembersById && { adminMembersById: newAdminMembersById }),\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    chat.fullInfo && chat.fullInfo.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  global = updateChat(global, chatId, {\n    avatarHash: undefined,\n    fullInfo: {\n      ...chat.fullInfo,\n      profilePhoto: undefined,\n    },\n  });\n  setGlobal(global);\n  // This method creates a new entry in photos array\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  // Explicitly delete the old photo reference\n  await callApi('deleteProfilePhotos', [photo]);\n  actions.loadFullChat({ chatId, tabId });\n  actions.loadProfilePhotos({ profileId: chatId });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const photosToDelete = [photo];\n  if (chat.avatarHash === photo.id) {\n    // Select next photo to set as avatar\n    const nextPhoto = chat.photos?.[1];\n    if (nextPhoto) {\n      photosToDelete.push(nextPhoto);\n    }\n    global = updateChat(global, chatId, {\n      avatarHash: undefined,\n      fullInfo: {\n        ...chat.fullInfo,\n        profilePhoto: undefined,\n      },\n    });\n    setGlobal(global);\n    // Set next photo as avatar\n    await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n      photo: nextPhoto,\n    });\n  }\n  // Delete references to the old photos\n  const result = await callApi('deleteProfilePhotos', photosToDelete);\n  if (!result) return;\n  actions.loadFullChat({ chatId, tabId });\n  actions.loadProfilePhotos({ profileId: chatId });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = addChats(global, addedById);\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  let { fullInfo } = chat;\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChat(global, chat.id, {\n      fullInfo: {\n        ...chat.fullInfo,\n        isPreHistoryHidden: false,\n      },\n    });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, tabId = getCurrentTabId() } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo?.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat, tabId);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = (chat.fullInfo?.members?.length) || undefined;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, users, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  await callApi('addChatMembers', chat, users);\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, enabledReactions, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchChatSettings', chat);\n  if (!result) return;\n  const { settings, users } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateChat(global, chat.id, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  const { chatId, force } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (!force && chat.listedTopicIds && chat.listedTopicIds.length === chat.topicsCount) {\n    return;\n  }\n\n  const offsetTopic = !force && chat.listedTopicIds ? chat.listedTopicIds.reduce((acc, el) => {\n    const topic = chat.topics?.[el];\n    const accTopic = chat.topics?.[acc];\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && chat.topics?.[offsetTopic]) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft?.formattedText);\n    global = replaceThreadParam(global, chatId, Number(threadId), 'replyingToId', draft?.replyingToId);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled, tabId = getCurrentTabId() } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const prevIsForum = chat.isForum;\n  global = updateChat(global, chatId, { isForum: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleForum', { chat, isEnabled });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, { isForum: prevIsForum });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = chat.fullInfo?.areParticipantsHidden;\n\n  global = updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      areParticipantsHidden: isEnabled,\n    },\n  });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      fullInfo: {\n        ...chat.fullInfo,\n        areParticipantsHidden: prevIsEnabled,\n      },\n    });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openChat({\n      id: chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('deleteTopic', { chat, topicId });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = chat?.topics?.[topicId];\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(chat.topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.translate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\nasync function loadChats<T extends GlobalState>(\n  global: T,\n  listType: 'active' | 'archived',\n  offsetId?: string,\n  offsetDate?: number,\n  shouldReplace = false,\n  isFullDraftSync?: boolean,\n) {\n  global = getGlobal();\n\n  let lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n  try {\n    const loadChatsRes = await Account.getCurrentAccount()?.sendPduWithCallback(new LoadChatsReq({\n      limit: CHAT_LIST_LOAD_SLICE,\n      offsetDate,\n      archived: listType === 'archived',\n      withPinned: shouldReplace,\n      // lastLocalServiceMessage:JSON.stringify(lastLocalServiceMessage),\n    }).pack())\n\n    if(!loadChatsRes){\n      return;\n    }\n\n    const res = LoadChatsRes.parseMsg(loadChatsRes);\n    if (!res || res.err !== ERR.NO_ERROR) {\n      return;\n    }\n\n    const result = JSON.parse(res.payload);\n    const { chatIds } = result;\n\n    if (chatIds.length > 0 && chatIds[0] === offsetId) {\n      chatIds.shift();\n    }\n\n    global = getGlobal();\n\n    lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n\n    if (shouldReplace && listType === 'active') {\n      // Always include service notifications chat\n      // if (!chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n      //   const result2 = await callApi('fetchChat', {\n      //     type: 'user',\n      //     user: SERVICE_NOTIFICATIONS_USER_MOCK,\n      //   });\n      //\n      //   global = getGlobal();\n      //\n      //   const notificationsChat = result2 && selectChat(global, result2.chatId);\n      //   if (notificationsChat) {\n      //     chatIds.unshift(notificationsChat.id);\n      //     result.chats.unshift(notificationsChat);\n      //     if (lastLocalServiceMessage) {\n      //       notificationsChat.lastMessage = lastLocalServiceMessage;\n      //     }\n      //   }\n      // }\n\n      const tabStates = Object.values(global.byTabId);\n      const visibleChats = tabStates.flatMap(({ id: tabId }) => {\n        const currentChat = selectCurrentChat(global, tabId);\n        return currentChat ? [currentChat] : [];\n      });\n\n      const visibleUsers = tabStates.flatMap(({ id: tabId }) => {\n        return selectVisibleUsers(global, tabId) || [];\n      });\n      if (global.currentUserId && global.users.byId[global.currentUserId]) {\n        visibleUsers.push(global.users.byId[global.currentUserId]);\n      }\n\n      global = replaceUsers(global, buildCollectionByKey(visibleUsers.concat(result.users), 'id'));\n      global = replaceUserStatuses(global, result.userStatusesById);\n      global = replaceChats(global, buildCollectionByKey(visibleChats.concat(result.chats), 'id'));\n      global = updateChatListIds(global, listType, chatIds);\n      global = {\n        ...global,\n        chatFolders:result.chatFolders\n      }\n    } else if (shouldReplace && listType === 'archived') {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addUserStatuses(global, result.userStatusesById);\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = replaceChatListIds(global, listType, chatIds);\n    } else {\n      const newChats = buildCollectionByKey(result.chats, 'id');\n      if (chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n        const notificationsChat = newChats[SERVICE_NOTIFICATIONS_USER_ID];\n        if (notificationsChat && lastLocalServiceMessage) {\n          newChats[SERVICE_NOTIFICATIONS_USER_ID] = {\n            ...notificationsChat,\n            lastMessage: lastLocalServiceMessage,\n          };\n        }\n      }\n\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addUserStatuses(global, result.userStatusesById);\n      global = updateChats(global, newChats);\n      global = updateChatListIds(global, listType, chatIds);\n\n    }\n\n    global = updateChatListSecondaryInfo(global, listType, result);\n\n    const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n    idsToUpdateDraft.forEach((chatId) => {\n      const draft = result.draftsById[chatId];\n      const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n      if (!draft && !thread) return;\n\n      if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n        global = replaceThreadParam(\n          global, chatId, MAIN_THREAD_ID, 'draft', draft,\n        );\n      }\n    });\n\n    const idsToUpdateReplyingToId = isFullDraftSync ? result.chatIds : Object.keys(result.replyingToById);\n    idsToUpdateReplyingToId.forEach((chatId) => {\n      const replyingToById = result.replyingToById[chatId];\n      const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n      if (!replyingToById && !thread) return;\n\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToById,\n      );\n    });\n\n    // if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    //   global = {\n    //     ...global,\n    //     chats: {\n    //       ...global.chats,\n    //       isFullyLoaded: {\n    //         ...global.chats.isFullyLoaded,\n    //         [listType]: true,\n    //       },\n    //     },\n    //   };\n    // }\n\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n\n    setGlobal(global);\n\n  }catch (e){\n    console.error(e)\n  }\n\n  return;\n  // const result = await callApi('fetchChats', {\n  //   limit: CHAT_LIST_LOAD_SLICE,\n  //   offsetDate,\n  //   archived: listType === 'archived',\n  //   withPinned: shouldReplace,\n  //   lastLocalServiceMessage,\n  // });\n  //\n\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    users, userStatusesById, fullInfo, groupCall, membersCount,\n  } = result;\n\n  global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  global = updateChat(global, chat.id, {\n    fullInfo,\n    ...(membersCount && { membersCount }),\n  });\n\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  if (stickerSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n      tabId,\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n) {\n  global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  setGlobal(global);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n    setGlobal(global);\n  }\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  username: string,\n  threadId?: number,\n  channelPostId?: number,\n  startParam?: string,\n  startAttach?: string | boolean,\n  attach?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!currentChat || !bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat.id,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n      tabId,\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({\n      chatId: chat.id, threadId, messageId: channelPostId, tabId,\n    });\n  } else if (!isCurrentChat) {\n    actions.openChat({ id: chat.id, threadId, tabId });\n  }\n\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n\nexport async function ensureIsSuperGroup<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatBasicGroup(chat)) {\n    return chat;\n  }\n\n  const newChat = await migrateChat(global, actions, chat, tabId);\n  if (!newChat) {\n    return undefined;\n  }\n\n  actions.openChat({ id: newChat.id, tabId });\n\n  return newChat;\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectTabState, selectUser,\n} from '../../selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\nimport type { ApiGroupCall } from '../../../api/types';\nimport type {\n  CallSound, ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\n\nimport { addChats, addUsers } from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { getMainUsername } from '../../helpers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport * as langProvider from '../../../util/langProvider';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestAnimationFrame(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants<T extends GlobalState>(\n  global: T,\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await fetchGroupCallParticipants(global, groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let { inviteLink } = chat.fullInfo!;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload!;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.translate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat, tabId);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) return;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall?.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash)) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(global, groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', async (global, actions, payload): Promise<void> => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.translate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.translate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\nimport type { ApiGroupCall } from '../../api/types';\nimport { selectGroupCall } from '../selectors/calls';\nimport { omit } from '../../util/iteratees';\nimport { updateChat } from './chats';\nimport { selectChat } from '../selectors';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChat(global, groupCall.chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          groupCallId: undefined,\n        },\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n"],"names":["LoadChatsReq","BaseMsg","constructor","msg","super","this","setCommandId","ActionCommands","decode","data","__D","pack","__pack","static","pdu","getPbBody","LoadChatsRes","SERVICE_NOTIFICATIONS_USER_ID","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","async","loadChats","global","listType","offsetId","offsetDate","shouldReplace","isFullDraftSync","getGlobal","lastLocalServiceMessage","selectLastServiceNotification","message","loadChatsRes","Account","sendPduWithCallback","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","res","parseMsg","err","ERR","result","JSON","parse","payload","chatIds","length","shift","tabStates","Object","values","byTabId","visibleChats","flatMap","id","tabId","currentChat","selectCurrentChat","visibleUsers","selectVisibleUsers","currentUserId","users","byId","push","replaceUsers","buildCollectionByKey","concat","replaceUserStatuses","userStatusesById","replaceChats","chats","updateChatListIds","chatFolders","addUsers","addUserStatuses","updateChats","replaceChatListIds","newChats","includes","notificationsChat","lastMessage","updateChatListSecondaryInfo","keys","draftsById","forEach","chatId","draft","thread","selectThread","MAIN_THREAD_ID","selectDraft","isLocal","replaceThreadParam","replyingToById","isFullyLoaded","setGlobal","e","console","error","loadFullChat","actions","chat","getCurrentTabId","callApi","fullInfo","groupCall","membersCount","existingGroupCall","selectGroupCall","updateGroupCall","omit","undefined","participantsCount","updateChat","stickerSet","loadStickers","stickerSetInfo","accessHash","fetchChatByUsername","username","localChat","selectChatByUsername","isMin","user","updateUser","getAttachBotOrNotify","selectUser","isUserBot","bot","showNotification","langProvider","openAttachMenuFromLink","attach","startAttach","callAttachBot","startParam","ensureIsSuperGroup","selectChat","isChatBasicGroup","newChat","openLimitReachedModal","showDialog","hasErrorKey","migrateChat","openChat","addActionHandler","preloadedChatIds","Set","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatIds","map","selectCurrentMessageList","filter","Boolean","nextChatId","getOrderedIds","ALL_FOLDER_ID","find","has","add","loadViewportMessages","threadId","hasUnreadMark","toggleChatUnread","isChatSummaryOnly","type","requestThreadInfoUpdate","originChannelId","topMessageId","selectThreadTopMessageId","selectThreadOriginChat","TMP_CHAT_ID","openPreviousChat","chatFullInfo","linkedChatId","messageId","focusMessage","selectSupportChat","shouldReplaceHistory","onReplace","getOrderDate","date","joinDate","DEBUG","connectionState","listIds","oldestChat","selectIsChatPinned","sort","chat1","chat2","force","lastLocalMessage","isMuted","topicId","updateTopic","title","about","photo","memberIds","createdChannel","updateTabState","chatCreation","progress","ChatCreationProgress","channelId","selectTabState","userId","leaveChat","createdChat","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","orderedPinnedIds","isChatArchived","recommendedChatFolders","recommended","idsToRemove","idsToAdd","some","includedId","emoticon","orderedIds","maxId","Math","max","recommendedId","description","newFolder","folderIds","unreadCount","lastTopicMessageId","topics","lastMessageId","updateThreadInfo","lastReadInboxMessageId","hash","phoneNumber","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","replace","url","openChatByPhoneNumber","openChatByInvite","openStickerSet","openChatWithDraft","joinVoiceChatByLink","openInvoice","processAttachBotParameters","openChatByUsername","openChatByUsernameAction","match","RE_TG_LINK","processDeepLink","uri","URL","toLowerCase","startsWith","TME_WEB_DOMAINS","hostname","pathname","window","open","toString","hostParts","split","part1","part2","part3","part","decodeURI","params","fromEntries","searchParams","hasOwnProperty","startattach","choose","parseChooseParameter","substr","shortName","chatOrChannelPostId","Number","commentId","comment","text","formatShareText","inviteHash","voicechat","livestream","slug","substring","start","usernames","c","channelPostId","isCurrentChat","startBot","botId","param","usernameChat","threadInfo","selectThreadInfo","chatByUsername","discussionChatId","isEnabled","isPreHistoryHidden","bannedRights","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","Promise","all","avatarHash","profilePhoto","loadProfilePhotos","profileId","photosToDelete","nextPhoto","photos","groups","addedById","reduce","group","isForum","addChats","forDiscussionIds","channel","fullChat","activeChatFolder","requestedDraft","offset","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","isProtected","enabledReactions","settings","isChatSuperGroup","isChatChannel","forumPanelChatId","attachMenu","bots","requestedAttachBotInstall","onConfirm","action","requestAttachBotInChat","listedTopicIds","topicsCount","offsetTopic","acc","el","topic","accTopic","offsetTopicId","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","addMessages","messages","updateTopics","count","updateListedTopicIds","entries","formattedText","replyingToId","readInboxMessageIdByTopicId","shouldCloseChatOnError","prevIsForum","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","appConfig","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","sound","prevSrc","src","muted","volume","play","then","currentTime","requestAnimationFrame","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","checkNavigatorUserMediaPermissions","isVideo","navigator","mediaDevices","getUserMedia","video","stream","getVideoTracks","checkMicrophonePermission","catch","audio","getAudioTracks","isCallPanelVisible","subscribed","peer","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","copyTextToClipboard","full","requestMasterAndCallAction","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","enabled","silence","safePlay","createAudioElement","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","state","participantId","adminId","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount"],"sourceRoot":""}