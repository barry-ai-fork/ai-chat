{"version":3,"file":"5769.8784e90f979fd0074135.js","mappings":"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zFstE,qBAAqC/1F,IAApBulB,EAAgC9lB,EAAO00C,eAAe5uB,IAAkBxiB,UAAO/C,EAChGysB,WAAWlI,EAAAA,EAAAA,IAA2B9kB,GACtC8U,eAAgB9U,EAAO+U,SAASC,MAAMF,eACtCm/E,oBACAoB,gBACAjF,eAAgBpwF,EAAOwsB,oBACvB4oE,gBACAI,oBACAe,uBAAwBv2F,EAAO+U,SAASC,MAAMwhF,aAC9Cd,oCACK3B,GAAiBwB,KAAe,CAAE7vF,aACnCoH,GAAc,CAAEmqE,gBAAgBwf,EAAAA,EAAAA,IAAqBz2F,EAAQiF,EAA6B,cAApBT,OAC5C,iBAAnB44E,GAA+B,CAAEA,qBACxCxO,GAAa,CAAEC,iBAAgBC,mBAAkBplE,uBACtD,GAtJeozC,EAn+BuB45C,EACzCzxF,UACA0uF,gBACAgD,+BACAxhB,gCACAC,gCACA7b,QACAsO,YACAurB,aACAD,iBACAyD,aACAxf,YACAtC,kBACAwe,iBACAtmE,YACA6pE,gBACAC,yBACAzD,wBACAgD,iBACAC,kBACAvhB,eACAl2C,QACAg1D,kBACAnuF,SACAquF,gBACAC,eACA3zD,YACA8zD,cACAC,kBACAz0E,eACA00E,qBACApd,iBACAmG,iBACA7zC,oBACAkmC,cACAmmB,kBACAhnB,YACAC,iBACAC,mBACAplE,sBACAkqF,eACAtzB,iBACAkzB,gBACAniC,YACA9lB,UACAikC,WACAl5C,gBACAm+D,aACAG,iBACAC,uBACAzE,kBACA7gB,kBACArS,cACA44B,mBACA11F,YACA80F,mBACA1sD,sBACAsC,mBACA5oC,mBACA6mC,2BACAvkC,mBACAwxF,gBACA1Y,iBACAiP,oBACA0J,oBACAE,sBACAD,yBACA7sE,qBACA8rE,qBACAlgB,wBACAngE,kBACAm/E,qBACAoB,gBACAD,gBACAI,oBACAe,0BACAb,oCAEA,MAAM,uBACJhqF,GAAsB,qBACtBgoD,GAAoB,uBACpB9nD,GAAsB,sBACtBmrF,GAAqB,iBACrB3tF,KACE0tB,EAAAA,EAAAA,MAGE2nB,IAAMtB,EAAAA,EAAAA,IAAuB,MAE7B65C,IAAkB75C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","sources":["webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.module.scss?16ed","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/util/permanentWebVersion.ts","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/hooks/useLayoutEffectWithPrevDeps.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/util/Deferred.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessageSuggestedAvatar.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.module.scss?29b9","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useMessageTranslation.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/lib/cleanDocsHtml.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useAttachmentModal.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotItem.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/MessageLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== id\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (id) {\n      global = replaceTabThreadParam(global, id, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      contentToBeScheduled: undefined,\n      ...(id !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (id) {\n    const chat = selectChat(global, id);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId: id!, tabId });\n    } else if (id !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  window.open(createMessageHashUrl(chatId, 'thread', threadId), '_blank');\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId, files, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('openDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\nimport type {\n  TabState, GlobalState, ActionReturnType,\n} from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  replaceTabThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage, updateFocusedMessageReached,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectChatScheduledMessages,\n  selectTabState,\n  selectRequestedTranslationLanguage,\n} from '../../selectors';\nimport { compact, findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('setReachedFocusedMessage', (global, actions, payload): ActionReturnType => {\n  const { hasReached = false, tabId = getCurrentTabId() } = payload;\n\n  return updateFocusedMessageReached(global, hasReached, tabId);\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage(global, undefined, undefined, undefined, undefined, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      threadId,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  global = replaceTabThreadParam(global, chatId, threadId, 'outlyingIds', undefined, tabId);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const byChatId = tabState.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  const byChatId = selectTabState(global, tabId).activeDownloads.byChatId;\n  const newByChatId: TabState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return updateTabState(global, {\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: [...(tabState.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (selectTabState(global, tabId).shouldShowContextMenuHint) {\n    actions.disableContextMenuHint({ tabId });\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (!selectTabState(global, tabId).shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    shouldShowContextMenuHint: false,\n  }, tabId);\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, id, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = selectRequestedTranslationLanguage(global, chatId, id, tabId);\n\n  return updateTabState(global, {\n    messageLanguageModal: { chatId, messageId: id, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    messageLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  const resultText = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, undefined, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyHtmlToClipboard(result.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport {\n  APP_VERSION, DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState, selectIsTrustedBot, selectChat,\n} from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\nimport { compact, unique } from '../../../util/iteratees';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\nimport * as langProvider from '../../../util/langProvider';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    top, left, width, height, tabId = getCurrentTabId(),\n  } = payload || {};\n  const { animationLevel } = global.settings.byKey;\n  if (animationLevel === 0) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (!isBlurred) {\n    actions.updateIsOnline(true);\n  }\n\n  const blurredTabTokens = unique(isBlurred\n    ? [...global.blurredTabTokens, tabId]\n    : global.blurredTabTokens.filter((t) => t !== tabId));\n\n  if (blurredTabTokens.length === getAllMultitabTokens().length) {\n    actions.updateIsOnline(false);\n  }\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  return {\n    ...global,\n    blurredTabTokens,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (messageList && canDisplayChatInTitle) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, undefined, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(PAGE_TITLE);\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: playbackRate || tabState.mediaViewer.playbackRate || global.mediaViewer.lastPlaybackRate,\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, setupPasscode,\n} from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport type { ActionReturnType } from '../../types';\nimport { signalPasscodeHash } from '../../../util/establishMultitabRole';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  await encryptSession(sessionJson, globalJson);\n\n  signalPasscodeHash();\n  global = getGlobal();\n  global = updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  });\n  setGlobal(global);\n\n  forceUpdateCache(true);\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: (global.passcode?.invalidAttemptsCount ?? 0) + 1,\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport {\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, omit, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n  updateSponsoredMessage,\n  updateTopic,\n  updateThreadInfo,\n  replaceTabThreadParam,\n  updateRequestedMessageTranslation,\n  removeRequestedMessageTranslation,\n  updateMessageTranslation, updateThread,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n  selectUser,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectIsCurrentUserPremium,\n  selectForwardsContainVoiceMessages,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectLanguageCode,\n  selectForwardsCanBeSentToChat,\n} from '../../selectors';\nimport {\n  debounce, onTickEnd, rafPromise,\n} from '../../../util/schedulers';\nimport {\n  getMessageOriginalId, getUserFullName, isDeletedUser, isServiceNotificationMessage, isUserBot,\n} from '../../helpers';\nimport { translate } from '../../../util/langProvider';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {buildLocalMessage} from \"../../../api/gramjs/apiBuilders/messages\";\nimport MsgConn from \"../../../lib/ptp/client/MsgConn\";\nimport {SendReq} from \"../../../lib/ptp/protobuf/PTPMsg\";\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n  let { chatId, threadId } = payload || {};\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId, tabId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, tabId,\n        );\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global, actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId!, direction, offsetId, tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId, replyingToId) : undefined;\n\n  const replyingToTopId = chat.isForum\n    ? selectThreadTopMessageId(global, chatId, threadId)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: replyingToId,\n    replyingToTopId,\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    }, tabId);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n        }, tabId);\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          }, tabId);\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      }, tabId);\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      }, tabId);\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const { text, entities, tabId = getCurrentTabId() } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, draft, shouldForce,\n  } = payload;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  draft.isLocal = true;\n  draft.shouldForce = shouldForce;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n\n  const result = await callApi('saveDraft', {\n    chat,\n    text,\n    entities,\n    replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    threadId: selectThreadTopMessageId(global, chatId, threadId),\n  });\n\n  if (result) {\n    draft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, localOnly, shouldForce,\n  } = payload;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly) {\n    void callApi('clearDraft', chat, selectThreadTopMessageId(global, chatId, threadId));\n  }\n\n  const newDraft: ApiDraft | undefined = shouldForce ? { shouldForce, text: '' } : undefined;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const topId = selectThreadTopMessageId(global, chatId, threadId);\n  await callApi('unpinAllMessages', { chat, threadId: topId });\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId, tabId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { message: text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const { isSilent, scheduledAt, tabId = getCurrentTabId() } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = selectTabState(global, tabId).forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      toThreadId,\n      messages: realMessages,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyingToTopId: toThreadId,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      }, tabId);\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) return;\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  global = getGlobal();\n  let flag = false;\n  if(!global.messages.byChatId[chatId]  || !global.messages.byChatId[chatId].threadsById || global.messages.byChatId[chatId].threadsById[\"-1\"].lastViewportIds == undefined){\n    global = safeReplaceViewportIds(global, chatId, threadId, [], tabId);\n    flag = true;\n  }\n  if(!global.messages.byChatId[chatId]  || !global.messages.byChatId[chatId].threadsById || global.messages.byChatId[chatId].threadsById[\"-1\"].listedIds == undefined){\n    global = updateListedIds(global, chatId, threadId, [])\n    flag = true;\n  }\n  if(flag){\n    setGlobal(global)\n  }\n  return;\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, chatId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids, tabId)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId, tabId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceTabThreadParam(global, chatId, threadId, 'outlyingIds', undefined, tabId);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  replyingToTopId?: number;\n  groupedId?: string;\n},\n...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : async (progress: number, localMessage: any)=>{\n    await MsgConn.getMsgClient()\n      ?.sendPduWithCallback(new SendReq({\n        payload:JSON.stringify({\n          msg:localMessage\n        })\n      }).pack());\n  };\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  global = getGlobal();\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && threadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n  await callApi('sendMessage', params, progressCallback);\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, threadId, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByUserIds: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, appConfig.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    if (!user.fullInfo) {\n      const { accessHash } = user;\n      user = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n    }\n\n    if (user?.fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId: topicId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectLanguageCode(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      views: update.views,\n      forwards: update.forwards,\n    });\n\n    const message = selectChatMessage(global, chatId, update.id);\n    if (!message) return;\n\n    const repliesChatId = message.repliesThreadInfo?.chatId;\n    const threadId = message.repliesThreadInfo?.threadId;\n    if (!repliesChatId || !threadId) return;\n\n    global = updateThreadInfo(global, repliesChatId, threadId, {\n      messagesCount: update.messagesCount,\n    });\n  });\n\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectTabState, selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { translate } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiChat, ApiTopic, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateTopics,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery, selectTabState } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        localChats, localUsers, globalChats, globalUsers,\n      } = result;\n\n      if (localChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n      }\n\n      if (localUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: localChats.map(({ id }) => id),\n          userIds: localUsers.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\nimport type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/langProvider';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfos,\n  updateUsers,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport { updateTabState } from '../../reducers/tabs';\nimport MsgConn, {MsgClientState} from \"../../../lib/ptp/client/MsgConn\";\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = {\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        };\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentThreadId && currentChatId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = allMessages.map(({ id }) => id);\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n        if (result.repliesThreadInfos.length) {\n          global = updateThreadInfos(global, currentChatId, result.repliesThreadInfos);\n        }\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\nlet previousMsgClientState: MsgClientState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState } = global;\n  const msgConn = MsgConn.getMsgClient();\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    if(msgConn && previousMsgClientState !== MsgClientState.logged && msgConn?.getState() === MsgClientState.logged ){\n        getActions().sync();\n    }\n    previousMsgClientState = msgConn?.getState();\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n  previousMsgClientState = msgConn?.getState();\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { translate } from '../../../util/langProvider';\nimport { addUsers } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) return;\n\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = user.fullInfo?.profilePhoto?.id !== newUser.fullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = user.fullInfo?.fallbackPhoto?.id !== newUser.fullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = user.fullInfo?.personalPhoto?.id !== newUser.fullInfo?.personalPhoto?.id;\n  if ((hasChangedAvatarHash || hasChangedProfilePhoto || hasChangedFallbackPhoto || hasChangedPersonalPhoto)\n    && user.photos?.length) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  if (user && !user?.fullInfo) {\n    const { id, accessHash } = user;\n    user = await callApi('fetchFullUser', { id, accessHash });\n    if (!user) return;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n  const fallbackPhoto = user?.fullInfo?.fallbackPhoto;\n  const personalPhoto = user?.fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { localUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (localUsers.length) {\n      global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n      localUserIds = localUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n","import type { GlobalState, TabArgs } from '../types';\nimport type { InlineBotSettings } from '../../types';\nimport { updateTabState } from './tabs';\nimport { selectTabState } from '../selectors';\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import { IS_ANDROID, IS_IOS } from './environment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser, selectThreadTopMessageId,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport MsgConn from \"../../../lib/ptp/client/MsgConn\";\nimport {SendReq} from \"../../../lib/ptp/protobuf/PTPMsg\";\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void sendBotCommand(\n    chat, threadId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedContact(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, MAIN_THREAD_ID, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n  const message = selectChatMessage(global, chat.id, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, message.viaBotId || message.senderId!);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n  const replyingTo = selectReplyingToId(global, chatId, threadId);\n  let replyingToTopId: number | undefined;\n\n  if (replyingTo && threadId !== MAIN_THREAD_ID) {\n    replyingToTopId = selectThreadTopMessageId(global, chatId, threadId)!;\n  }\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo,\n    replyingToTopId,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  let bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n  if (!bot.fullInfo) await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n  global = getGlobal();\n  bot = selectUser(global, botId)!;\n  if (bot.fullInfo?.isBlocked) await callApi('unblockContact', bot.id, bot.accessHash);\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    threadId,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyToMessageId: reply || undefined,\n      threadId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    threadId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action](callbackPayload);\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  await loadAttachBots(global, hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(global, bot, isEnabled, isWriteAllowed);\n});\n\nasync function toggleAttachBot<T extends GlobalState>(\n  global: T, bot: ApiUser, isEnabled: boolean, isWriteAllowed?: boolean,\n) {\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n  global = getGlobal();\n  await loadAttachBots(global);\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, bot, url, startParam, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isFromBotMenu = !bot;\n  if (!isFromBotMenu && !global.attachMenu.bots[bot.id]) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload,\n        },\n      },\n    }, tabId);\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId, threadId, tabId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId: isFromBotMenu ? chatId : bot.id,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n    tabId,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  await toggleAttachBot(global, botUser, true, isWriteAllowed);\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, threadId = MAIN_THREAD_ID, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyingToTopId: threadId,\n    text: command,\n    replyingTo,\n    sendAs,\n  },async (progress,localMessage)=>{\n    await MsgConn.getMsgClient()\n      ?.sendPduWithCallback(new SendReq({\n        payload:JSON.stringify({\n          msg:localMessage\n        })\n      }).pack());\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice, selectTabState,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { GlobalState } from '../types';\nimport type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport { isSameReaction, isReactionChosen } from '../helpers';\nimport { updateChatMessage } from './messages';\nimport { selectTabState } from '../selectors';\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ userId }) => userId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      userId: currentUserId!,\n      reaction,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage, selectCurrentChat, selectTabState,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isSameReaction, getUserReactions, isMessageLocal } from '../../helpers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', (global, actions, payload): ActionReturnType => {\n  const { chatId, reaction, tabId = getCurrentTabId() } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n\n  const reactions = newUserReactions.slice(-limit);\n\n  void callApi('sendReaction', { chat, messageId, reactions });\n\n  const { animationLevel } = global.settings.byKey;\n\n  const tabState = selectTabState(global, tabId);\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    const newActiveReactions = hasReaction ? omit(tabState.activeReactions, [messageId]) : {\n      ...tabState.activeReactions,\n      [messageId]: [\n        ...(tabState.activeReactions[messageId] || []),\n        {\n          messageId,\n          reaction,\n        },\n      ],\n    };\n    global = updateTabState(global, {\n      activeReactions: newActiveReactions,\n    }, tabId);\n  }\n\n  return addMessageReaction(global, message, reactions);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { messageId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.activeReactions[messageId]?.some((active) => isSameReaction(active.reaction, reaction))) {\n    return global;\n  }\n\n  const newMessageActiveReactions = tabState.activeReactions[messageId]\n    .filter((active) => !isSameReaction(active.reaction, reaction));\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [messageId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [messageId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const { animationLevel } = global.settings.byKey;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  updateStatistics, updateMessageStatistics, updateStatisticsGraph, addUsers,\n} from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  let result = await callApi('fetchMessageStatistics', { chat, messageId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUpdateChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit, pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat, updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectThreadParam,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport type { ActionReturnType } from '../../types';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId, threadId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction, ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  deleteTopic,\n  updateMessageTranslations,\n  clearMessageTranslation,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectChatScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsServiceChatReady,\n  selectThreadIdFromMessage,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && newMessage.isTopicReply\n        && !selectTopicFromMessage(global, newMessage)\n        && newMessage.replyToMessageId) {\n        actions.loadTopicById({ chatId, topicId: newMessage.replyToMessageId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action)) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n          if (threadInfo && !isLocal) {\n            actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: tabState.activeEmojiInteractions?.length || 0,\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: threadId });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (threadInfo.topMessageId === threadId && !chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = newThreadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId: getCurrentTabId() });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsViewportNewest(global, chatId, threadInfo.threadId, tabId)) {\n          global = addViewportId(global, chatId, threadInfo.threadId, id, tabId);\n\n          if (!firstMessageId) {\n            global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n          }\n        }\n      });\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n    });\n\n    if (!isMessageLocal(message)) {\n      global = updateThreadInfo(global, chatId, threadInfo.threadId, {\n        messagesCount: (threadInfo.messagesCount || 0) + 1,\n      });\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID, tabId);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      global = clearMessageTranslation(global, chatId, id);\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectIsCurrentUserPremium, selectUser } from '../../selectors';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          // TODO Do not display modal if premium is bought from another device\n          if (update.user.isPremium) actions.openPremiumModal({ isSuccess: true, tabId });\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUser = selectUser(global, botId);\n      if (!targetUser?.fullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUser(global, botId, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          botInfo: {\n            ...targetUser.fullInfo.botInfo,\n            menuButton: button,\n          },\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(global, update.id);\n      } else {\n        return removeBlockedContact(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder':\n      actions.reorderStickerSets({ order: update.order, isCustomEmoji: update.isCustomEmoji });\n      break;\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.setReplyingToId({ messageId: undefined, tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport {\n  addNotifyException, updateChat, updateTopic, updateNotifySettings,\n} from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/environment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage, selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default memo(StickerSetModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HAg4STRlxDV3frYuABYr\",\"particle\":\"HO3tML0GAC9vTH28baKB\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiReactionCustomEmoji } from '../../../api/types';\n\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/environment';\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './CustomEmojiEffect.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji | ApiEmojiStatus;\n  className?: string;\n  isLottie?: boolean;\n};\n\nconst EFFECT_AMOUNT = 7;\n\nconst CustomEmojiEffect: FC<OwnProps> = ({\n  reaction,\n  isLottie,\n  className,\n}) => {\n  const stickerHash = getStickerPreviewHash(reaction.documentId);\n\n  const previewMediaData = useMedia(!isLottie ? stickerHash : undefined);\n\n  const paths: string[] = useMemo(() => {\n    if (!IS_OFFSET_PATH_SUPPORTED) return [];\n    return Array.from({ length: EFFECT_AMOUNT }).map(() => generateRandomDropPath());\n  }, []);\n\n  if (!previewMediaData && !isLottie) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {paths.map((path) => {\n        const style = `--offset-path: path('${path}');`;\n        if (isLottie) {\n          return (\n            <CustomEmoji\n              documentId={reaction.documentId}\n              className={styles.particle}\n              style={style}\n              withSharedAnimation\n            />\n          );\n        }\n\n        return (\n          <img\n            src={previewMediaData}\n            alt=\"\"\n            className={styles.particle}\n            style={style}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiEffect);\n\nfunction generateRandomDropPath() {\n  const x = (10 + Math.random() * 60) * (Math.random() > 0.5 ? 1 : -1);\n  const y = 20 + Math.random() * 80;\n\n  return `M 0 0 C 0 0 ${x} ${-y - 20} ${x} ${y}`;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default memo(StatusPickerMenuAsync);\n","import React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useTimeout from '../../../hooks/useTimeout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport Button from '../../ui/Button';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../middle/message/CustomEmojiEffect';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect] as const);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global) => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { ApiChat } from '../../../api/types';\nimport type { TabState, GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  APP_NAME, APP_VERSION,\n  BETA_CHANGELOG_URL,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport { IS_PWA } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport {\n  selectCurrentMessageList, selectIsCurrentUserPremium, selectTabState, selectTheme,\n} from '../../../global/selectors';\nimport { isChatArchived } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'archiveSettings'> & Pick<TabState, 'canInstall'>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  onSearchQuery,\n  isClosingSearch,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canInstall,\n  archiveSettings,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n    openUrl,\n    signOut\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  }, [hasPasscode, lockScreen, requestNextSettingsScreen]);\n\n  useHotkeys({\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_PWA && { 'Mod+L': handleLockScreenHotkey }),\n  });\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  }, []);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const handleBugReportClick = useCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  }, [openUrl]);\n\n  const handleSignOutClick = useCallback(() => {\n    signOut({ forceInitApi: true });\n  }, [signOut]);\n  const handleLockScreen = useCallback(() => {\n    lockScreen();\n  }, [lockScreen]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  const menuItems = useMemo(() => (\n    <>\n      {/* <MenuItem */}\n      {/*   icon=\"saved-messages\" */}\n      {/*   onClick={handleSelectSaved} */}\n      {/* > */}\n      {/*   {lang('SavedMessages')} */}\n      {/* </MenuItem> */}\n      {/* {archiveSettings.isHidden && ( */}\n      {/*   <MenuItem */}\n      {/*     icon=\"archive\" */}\n      {/*     onClick={onSelectArchived} */}\n      {/*   > */}\n      {/*     <span className=\"menu-item-name\">{lang('ArchivedChats')}</span> */}\n      {/*     {archivedUnreadChatsCount > 0 && ( */}\n      {/*       <div className=\"right-badge\">{archivedUnreadChatsCount}</div> */}\n      {/*     )} */}\n      {/*   </MenuItem> */}\n      {/* )} */}\n      {/* <MenuItem */}\n      {/*   icon=\"user\" */}\n      {/*   onClick={onSelectContacts} */}\n      {/* > */}\n      {/*   {lang('Contacts')} */}\n      {/* </MenuItem> */}\n      {/* <MenuItem */}\n      {/*   icon=\"settings\" */}\n      {/*   onClick={onSelectSettings} */}\n      {/* > */}\n      {/*   {lang('Settings')} */}\n      {/* </MenuItem> */}\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('NightMode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Animations')}</span>\n        <Switcher\n          id=\"animations\"\n          label=\"Toggle Animations\"\n          checked={animationLevel > 0}\n        />\n      </MenuItem>\n      {/* <MenuItem */}\n      {/*   icon=\"help\" */}\n      {/*   onClick={handleOpenTipsChat} */}\n      {/* > */}\n      {/*   {lang('TelegramFeatures')} */}\n      {/* </MenuItem> */}\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('ReportBug')}\n      </MenuItem>\n      <MenuItem\n        icon=\"logout\"\n        onClick={handleSignOutClick}\n      >\n        {lang('SignOut')}\n      </MenuItem>\n      {/* {IS_BETA && ( */}\n      {/*   <MenuItem */}\n      {/*     icon=\"permissions\" */}\n      {/*     onClick={handleChangelogClick} */}\n      {/*   > */}\n      {/*     Beta Changelog */}\n      {/*   </MenuItem> */}\n      {/* )} */}\n      {/* {withOtherVersions && ( */}\n      {/*   <MenuItem */}\n      {/*     icon=\"char-K\" */}\n      {/*     href={WEBK_VERSION_URL} */}\n      {/*     onClick={handleSwitchToWebK} */}\n      {/*   > */}\n      {/*     Switch to K Version */}\n      {/*   </MenuItem> */}\n      {/* )} */}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n    </>\n  ), [\n    animationLevel, archivedUnreadChatsCount, canInstall, handleAnimationLevelChange, handleBugReportClick, lang,\n    handleChangelogClick, handleDarkModeToggle, handleOpenTipsChat, handleSelectSaved, handleSwitchToWebK,\n    onSelectArchived, onSelectContacts, onSelectSettings, theme, withOtherVersions, archiveSettings,\n  ]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          {menuItems}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      currentUserId, connectionState, isSyncing, archiveSettings,\n    } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../../global/types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectTabState, selectIsForumPanelOpen } from '../../../global/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  isForumPanelOpen?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  hasArchivedChats?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  shouldHideFolderTabs,\n  hasArchivedChats,\n  archiveSettings,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const allChatsFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n    };\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map(({ id, title }, i) => {\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n\n      return ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n      });\n    });\n  }, [displayedFolders, folderCountersById, maxFolders]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        lastSyncTime={lastSyncTime}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={hasArchivedChats && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n      )}\n    >\n      {shouldRenderFolders ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} areFolders />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      currentUserId,\n      lastSyncTime,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      isForumPanelOpen: selectIsForumPanelOpen(global),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      archiveSettings,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\nimport {getActions} from \"../../global\";\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const {updateGlobal} = getActions();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n\n  const handleTest = useCallback(() => {\n    updateGlobal({\n      users:globalData.users,\n      chats:globalData.chats,\n      messages:globalData.messages,\n      contactList:globalData.contactList,\n      recentlyFoundChatIds:globalData.recentlyFoundChatIds,\n      availableReactions:globalData.availableReactions,\n      trustedBotIds:globalData.trustedBotIds,\n      serviceNotifications:globalData.serviceNotifications,\n      chatFolders:globalData.chatFolders\n    })\n  }, []);\n\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n  return null;\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\nimport ForumPanel from './ForumPanel';\n\nimport './LeftMain.scss';\nimport { getActions } from '../../../global';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const { shouldRenderForumPanel, handleForumPanelAnimationEnd } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && content === LeftColumnContent.ChatList;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  }, [closeForumPanel, onContentChange]);\n\n  const handleUpdateClick = useCallback(() => {\n    window.location.reload();\n  }, []);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelVisible}\n          onTopicSearch={onTopicSearch}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, IS_PWA, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectTabState, selectCurrentChat, selectIsForumPanelOpen } from '../../global/selectors';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  chatCreationProgress?:ChatCreationProgress;\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\nconst leftColumnContent = window.sessionStorage.getItem(\"LeftColumnContent\") || LeftColumnContent.ChatList;\nconst LeftColumn: FC<StateProps> = ({\n  chatCreationProgress,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  isChatOpen,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n\n  const [content, setContent] = useState<LeftColumnContent>(Number(leftColumnContent));\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n  const setContent_ = (v:LeftColumnContent)=>{\n    setContent(v);\n    window.sessionStorage.setItem(\"LeftColumnContent\",v.toString())\n  }\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent_(LeftColumnContent.ChatList);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent_(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent_(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent_(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent_(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  }, [\n    content, isFirstChatFolderActive, setGlobalSearchClosing, resetChatCreation, setGlobalSearchQuery,\n    setGlobalSearchDate, setGlobalSearchChatId, settingsScreen, hasPasscode,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent_(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  const handleTopicSearch = useCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  }, [forumPanelChatId, setGlobalSearchChatId, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || (isFirstChatFolderActive && !isChatOpen && !isForumPanelOpen)\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent_(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleArchivedChats = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  }, []);\n\n  const handleHotkeySettings = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent_(LeftColumnContent.Settings);\n  }, []);\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    ...(IS_PWA && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_PWA && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n  }, [nextSettingsScreen, requestNextSettingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent_(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onTopicSearch={handleTopicSearch}\n                  foldersDispatch={foldersDispatch}\n                  onSettingsScreenSelect={handleSettingsScreenSelect}\n                  onLeftColumnContentChange={setContent_}\n                  isForumPanelOpen={isForumPanelOpen}\n                  archiveSettings={archiveSettings}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent_}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent_}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  isClosingSearch={isClosingSearch}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent_}\n                  onSearchQuery={handleSearchQuery}\n                  onSettingsScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                  isUpdateAvailable={isUpdateAvailable}\n                  isForumPanelOpen={isForumPanelOpen}\n                  onTopicSearch={handleTopicSearch}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      chatCreation,\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n    } = tabState;\n    const {\n      leftColumnWidth,\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      chatCreationProgress:chatCreation?.progress,\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      isChatOpen,\n      isUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n    };\n  },\n)(LeftColumn));\n","import type { RefObject } from 'react';\nimport {\n  useState, useEffect, useLayoutEffect, useCallback,\n} from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  const setElementStyle = useCallback((width?: number) => {\n    if (!elementRef.current) {\n      return;\n    }\n\n    const widthPx = width ? `${width}px` : '';\n    elementRef.current.style.width = widthPx;\n    if (cssPropertyName) {\n      elementRef.current.style.setProperty(cssPropertyName, widthPx);\n    }\n  }, [cssPropertyName, elementRef]);\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\nimport MediaSpoiler from '../common/MediaSpoiler';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName('HeaderPinnedMessage', noHoverColor && 'no-hover')}\n        onClick={onClick}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isSpoiler)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle ? renderText(customTitle) : `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">\n            <MessageSummary lang={lang} message={message} noEmoji={Boolean(mediaThumbnail)} />\n          </p>\n          <RippleEffect />\n        </div>\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className=\"inline-button\"\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string, isSpoiler?: boolean) {\n  const { width, height } = getPictogramDimensions();\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className=\"pinned-thumb\">\n      {!isSpoiler && <img className=\"pinned-thumb-image\" src={srcUrl} width={width} height={height} alt=\"\" />}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n    </div>\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import { getAverageColor, getColorLuma } from './colors';\n\nconst LUMA_THRESHOLD = 240;\n\nexport function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      const averageColor = await getAverageColor(img.src);\n      const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx2D = canvas.getContext('2d')!;\n        ctx2D.fillStyle = fillColor;\n        ctx2D.fillRect(0, 0, canvas.width, canvas.height);\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          ctx2D.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nasync function steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  const averageColor = await getAverageColor(img.src);\n  const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n  ctx.fillStyle = fillColor;\n  ctx.globalCompositeOperation = 'destination-over';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, { useCallback, useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectTabState, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const updatePlaybackRate = useCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  }, [setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const handlePlaybackClick = useCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  }, [handleContextMenuClose, isPlaybackRateActive, playbackRate, updatePlaybackRate]);\n\n  const PlaybackRateButton = useCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  }, [\n    handleBeforeContextMenu, handleContextMenu, handleContextMenuClose, handlePlaybackClick, isContextMenuOpen,\n    isMobile, isPlaybackRateActive, playbackRate,\n  ]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash: accessHash! });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectTabState,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n  isMobile?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isComments?: boolean;\n  isChatWithSelf?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  hasReachedFocusedMessage?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  hasReachedFocusedMessage,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    setReachedFocusedMessage,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const [isWaitingForPinnedMessageFocus, setWaitingForPinnedMessageFocus] = useState(false);\n  const { isTablet } = useAppLayout();\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (lastSyncTime && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady, isForum]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n    setWaitingForPinnedMessageFocus(false);\n  }, [pinnedMessageIds]);\n\n  useEffect(() => {\n    if (hasReachedFocusedMessage && isWaitingForPinnedMessageFocus) {\n      setReachedFocusedMessage({ hasReached: false });\n      setWaitingForPinnedMessageFocus(false);\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [\n    hasReachedFocusedMessage, isWaitingForPinnedMessageFocus, pinnedMessageIndex, pinnedMessagesCount,\n    setReachedFocusedMessage,\n  ]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n  }, [openChatWithInfo, chatId, threadId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  }, [pinMessage]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({\n        chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id, noForumTopicPanel: true,\n      });\n\n      setWaitingForPinnedMessageFocus(true);\n    }\n  }, [pinnedMessage, focusMessage, threadId]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  }, [openChat, chatId, threadId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    isMobile, isSelectModeActive, messageListType, currentTransitionKey, setBackButtonActive, isTablet,\n    shouldShowCloseButton,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              lang(isComments ? 'CommentsCount' : 'Replies', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isPinnedMessagesFullWidth && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n    const focusedMessage = selectTabState(global).focusedMessage;\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      hasReachedFocusedMessage: !focusedMessage || focusedMessage.hasReachedMessage,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n        isComments: Boolean(threadInfo?.originChannelId),\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { useLayoutEffect } from '../lib/teact/teact';\nimport usePrevious from './usePrevious';\n\nconst useLayoutEffectWithPrevDeps = <T extends readonly any[]>(\n  cb: (args: T | readonly []) => void, dependencies: T, debugKey?: string,\n) => {\n  const prevDeps = usePrevious<T>(dependencies);\n  return useLayoutEffect(() => {\n    return cb(prevDeps || []);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, dependencies, debugKey);\n};\n\nexport default useLayoutEffectWithPrevDeps;\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMentionsRead, animateUnreadReaction } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isOwnMessage,\n  getMessageVideo,\n  getMessageWebPageVideo,\n} from '../../../../global/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(\n  message: ApiMessage, asForwarded?: boolean, noAvatars?: boolean, isMobile?: boolean,\n) {\n  const isOwn = isOwnMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, asForwarded, isWebPagePhoto, noAvatars, isMobile)\n    : calculateVideoDimensions(video!, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\nlet fontFamily: string | undefined;\nexport default function calculateAuthorWidth(text: string) {\n  if (!fontFamily) {\n    fontFamily = getComputedStyle(document.documentElement).getPropertyValue('--font-family');\n  }\n\n  if (!element) {\n    element = document.createElement('span');\n    element.style.font = `400 12px ${fontFamily}`;\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.textContent = text;\n\n  return element.offsetWidth;\n}\n","import { getActions } from '../../../../global';\n\nimport type { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  const { setReachedFocusedMessage } = getActions();\n\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      setReachedFocusedMessage({\n        hasReached: true,\n      });\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [\n    elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, setReachedFocusedMessage,\n  ]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { createConnector } from './PostMessageConnector';\nimport Deferred from './Deferred';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nsetTimeout(initWorker, WORKER_INIT_DELAY);\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","export default class Deferred<T = void> {\n  promise: Promise<T>;\n\n  reject!: (reason?: any) => void;\n\n  resolve!: (value: T | PromiseLike<T>) => void;\n\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.reject = reject;\n      this.resolve = resolve;\n    });\n  }\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage } from '../../api/types';\nimport type { TextPart } from '../../types';\nimport { MediaViewerOrigin, SettingsScreens } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { getMessageMediaHash } from '../../global/helpers';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Avatar from '../common/Avatar';\nimport CropModal from '../ui/CropModal';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ntype OwnProps = {\n  message: ApiMessage;\n  content?: TextPart;\n};\n\nconst ActionMessageSuggestedAvatar: FC<OwnProps> = ({\n  message,\n  content,\n}) => {\n  const {\n    openMediaViewer, uploadProfilePhoto, showNotification,\n  } = getActions();\n\n  const { isOutgoing } = message;\n\n  const lang = useLang();\n  const [cropModalBlob, setCropModalBlob] = useState<Blob | undefined>();\n  const [isVideoModalOpen, openVideoModal, closeVideoModal] = useFlag(false);\n  const suggestedPhotoUrl = useMedia(getMessageMediaHash(message, 'full'));\n  const isVideo = message.content.action!.photo?.isVideo;\n\n  const showAvatarNotification = useCallback(() => {\n    showNotification({\n      title: lang('ApplyAvatarHintTitle'),\n      message: lang('ApplyAvatarHint'),\n      action: {\n        action: 'requestNextSettingsScreen',\n        payload: {\n          screen: SettingsScreens.Main,\n        },\n      },\n      actionText: lang('Open'),\n    });\n  }, [lang, showNotification]);\n\n  const handleSetSuggestedAvatar = useCallback((file: File) => {\n    setCropModalBlob(undefined);\n    uploadProfilePhoto({ file });\n    showAvatarNotification();\n  }, [showAvatarNotification, uploadProfilePhoto]);\n\n  const handleCloseCropModal = useCallback(() => {\n    setCropModalBlob(undefined);\n  }, []);\n\n  const handleSetVideo = useCallback(async () => {\n    closeVideoModal();\n    showAvatarNotification();\n\n    // TODO Once we support uploading video avatars, add crop/trim modal here\n    const photo = message.content.action!.photo!;\n    const blobUrl = await mediaLoader.fetch(`videoAvatar${photo.id}?size=u`, ApiMediaFormat.BlobUrl);\n    const blob = await fetch(blobUrl).then((r) => r.blob());\n    uploadProfilePhoto({\n      file: new File([blob], 'avatar.mp4'),\n      isVideo: true,\n      videoTs: photo.videoSizes?.find((l) => l.videoStartTs !== undefined)?.videoStartTs,\n    });\n  }, [closeVideoModal, message.content.action, showAvatarNotification, uploadProfilePhoto]);\n\n  const handleViewSuggestedAvatar = async () => {\n    if (!isOutgoing && suggestedPhotoUrl) {\n      if (isVideo) {\n        openVideoModal();\n      } else {\n        setCropModalBlob(await fetch(suggestedPhotoUrl).then((r) => r.blob()));\n      }\n    } else {\n      openMediaViewer({\n        chatId: message.chatId,\n        mediaId: message.id,\n        threadId: MAIN_THREAD_ID,\n        origin: MediaViewerOrigin.SuggestedAvatar,\n      });\n    }\n  };\n\n  return (\n    <span className=\"action-message-suggested-avatar\" tabIndex={0} role=\"button\" onClick={handleViewSuggestedAvatar}>\n      <Avatar\n        photo={message.content.action!.photo}\n        showVideoOverwrite\n        loopIndefinitely\n        withVideo={isVideo}\n        size=\"jumbo\"\n      />\n      <span>{content}</span>\n\n      <span className=\"action-message-button\">{lang(isVideo ? 'ViewVideoAction' : 'ViewPhotoAction')}</span>\n      <CropModal\n        file={cropModalBlob}\n        onClose={handleCloseCropModal}\n        onChange={handleSetSuggestedAvatar}\n      />\n      <ConfirmDialog\n        isOpen={isVideoModalOpen}\n        title={lang('SuggestedVideo')}\n        confirmHandler={handleSetVideo}\n        onClose={closeVideoModal}\n        textParts={content}\n      />\n    </span>\n  );\n};\n\nexport default memo(ActionMessageSuggestedAvatar);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat, ApiSticker, ApiTopic,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\nimport ActionMessageSuggestedAvatar from './ActionMessageSuggestedAvatar';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersectionForReading?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n  isInsideTopic?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  topic?: ApiTopic;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  isInsideTopic,\n  topic,\n  memoFirstUnreadIdRef,\n  observeIntersectionForReading,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersectionForReading);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n  const isSuggestedAvatar = message.content.action?.type === 'suggestProfilePhoto' && message.content.action!.photo;\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter(Boolean)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    topic,\n    { isEmbedded },\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  // TODO Refactoring for action rendering\n  const shouldSkipRender = isInsideTopic && message.content.action?.text === 'TopicWasCreatedAction';\n  if (shouldSkipRender) {\n    return <span ref={ref} />;\n  }\n\n  if (isEmbedded) {\n    return <span ref={ref} className=\"embedded-action-message\">{content}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    (isGift || isSuggestedAvatar) && 'centered-action',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    !isGift && !isSuggestedAvatar && 'in-one-row',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      {!isSuggestedAvatar && <span className=\"action-message-content\">{content}</span>}\n      {isGift && renderGift()}\n      {isSuggestedAvatar && (\n        <ActionMessageSuggestedAvatar\n          message={message}\n          content={content}\n        />\n      )}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const {\n      direction: focusDirection,\n      noHighlight: noFocusHighlight,\n    } = (isFocused && selectTabState(global).focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n    const topic = selectTopicFromMessage(global, message);\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      topic,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat,\n} from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n  getMessageIsSpoiler,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\nimport MessageSummary from './MessageSummary';\nimport MediaSpoiler from './MediaSpoiler';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n  const isSpoiler = Boolean(message && getMessageIsSpoiler(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected, isSpoiler)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage\n              message={message}\n              isEmbedded\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          ) : (\n            <MessageSummary\n              lang={lang}\n              message={message}\n              noEmoji={Boolean(mediaThumbnail)}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n  isSpoiler?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className={buildClassName('embedded-thumb', isRoundVideo && 'round')}>\n      {!isSpoiler && (\n        <img\n          src={srcUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className=\"pictogram\"\n          draggable={false}\n        />\n      )}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  noReplies,\n  isTranslated,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  };\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread}>\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon-reply-filled\" />\n        </span>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getActions } from '../../../global';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n  shouldPlayEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n  shouldPlayEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  }, [onStopEffect, stopPlayingEffect]);\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect]);\n\n  const openModal = useCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet, sticker]);\n\n  const handleClick = useCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  }, [\n    hasEffect, isPlayingEffect, lang, onPlayEffect, openModal, showNotification, startPlayingEffect,\n    sticker.stickerSetInfo,\n  ]);\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n        cacheBuster={lastSyncTime}\n      />\n      {hasEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import {\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport safePlay from '../../../util/safePlay';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  }, [sendEmojiInteraction, chatId, messageId, emoji]);\n\n  const play = useCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  }, [soundMediaData]);\n\n  const handleClick = useCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  }, [chatId, emoji, interactWithAnimatedEmoji, isOwn, messageId, play, sendInteractionBunch, size]);\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n  };\n})(AnimatedCustomEmoji));\n","import type { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = 'anonymous';\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, isDisabled?: boolean | string) {\n  const { isMobile } = useAppLayout();\n\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(isDisabled),\n    isMobile && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import React, {\n  useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  asForwarded?: boolean;\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  asForwarded,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n\n  const [withThumb] = useState(!fullMediaData);\n  const noThumb = Boolean(fullMediaData);\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(photo.isSpoiler);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'), !isDownloading, getMessageMediaFormat(message, 'download'),\n  );\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  }, [fullMediaData, hideSpoiler, isSpoilerShown, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [shouldAffectAppendix, fullMediaData, isOwn, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, asForwarded, noAvatars, isMobile);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = size === 'inline' ? `height: ${height}px;${dimensionsStyle}` : undefined;\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <img\n        src={fullMediaData}\n        className=\"full-media\"\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {withThumb && (\n        <canvas ref={thumbRef} className={buildClassName('thumbnail', thumbClassNames)} />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(video.isSpoiler);\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay && !isSpoilerShown);\n\n  const fullMediaHash = getMessageMediaHash(message, 'inline');\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash, !shouldLoad, getMessageMediaFormat(message, 'inline'), lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n  const hasThumb = Boolean(thumbDataUri);\n\n  const previewMediaHash = getMessageMediaHash(message, 'preview');\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading && lastSyncTime;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview, undefined, lastSyncTime);\n  const previewClassNames = useMediaTransition((hasThumb || previewBlobUrl) && !isPlayerReady);\n\n  const noThumb = !hasThumb || previewBlobUrl || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n    lastSyncTime,\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n  );\n\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner));\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = videoRef.current?.duration || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const {\n    width, height,\n  } = dimensions || calculateVideoDimensions(video, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  }, [\n    isUploading, isDownloading, fullMediaData, isPlayAllowed, isSpoilerShown, onClick, message, onCancelUpload,\n    hideSpoiler,\n  ]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className=\"full-media\"\n          canPlay={isPlayAllowed && isIntersectingForPlaying}\n          muted\n          loop\n          playsInline\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n        />\n      )}\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas\n          ref={thumbRef}\n          className={buildClassName('thumbnail', thumbClassNames)}\n        />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <i className={buildClassName('icon-large-play', playButtonClassNames)} />\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n  animationLevel: AnimationLevel;\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, animationLevel,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} animationLevel={animationLevel} withVideo />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useState, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + getServerTimeOffset(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  asForwarded,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n  const { isMobile } = useAppLayout();\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message, undefined, undefined, isMobile);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          asForwarded={asForwarded}\n          nonInteractive={!isMediaInteractive}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      {isArticle && (\n        <div className=\"WebPage-text\">\n          <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n          {!inPreview && title && (\n            <p className=\"site-title\">{renderText(title)}</p>\n          )}\n          {truncatedDescription && (\n            <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n          )}\n        </div>\n      )}\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersectionForLoading={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          asForwarded={asForwarded}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n            crossOrigin=\"anonymous\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton width={photo.dimensions?.width} height={photo.dimensions?.height} forceAspectRatio />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  lastSyncTime,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  }, [chatId, id, loadExtendedMedia]);\n\n  useInterval(refreshExtendedMedia, lastSyncTime ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  }, [chatId, id, openInvoice]);\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'https://maps.google.com/maps';\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  const { openUrl } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    openUrl({ url });\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffectWithPrevDeps(([prevShouldRenderText]) => {\n    if (shouldRenderText) {\n      if (!prevShouldRenderText) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (mapBlobUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldRenderText, isOwn, isInSelectMode, isSelected, theme, mapBlobUrl]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={iconSrc} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useFlag from '../../../hooks/useFlag';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openComments } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openComments({ id: chatId, threadId, originChannelId });\n  }, [openComments, chatId, threadId, originChannelId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JY0NZH9bysPBqR3sIbLu\",\"is-custom-emoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"isCustomEmoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"animated-icon\":\"WTrBqa2uxq57nYJAIelk\",\"animatedIcon\":\"WTrBqa2uxq57nYJAIelk\",\"effect\":\"z9v8vlAIGxI3ITxuyEG1\",\"animating\":\"sB0FGOzwkiDvNWHWcVEL\"};","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction, ApiReaction, ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isSameReaction } from '../../../global/helpers';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmojiEffect from './CustomEmojiEffect';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n};\n\nconst CENTER_ICON_SIZE = 2.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  genericEffects,\n  activeReactions,\n  availableReactions,\n  observeIntersection,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isCustom = 'documentId' in reaction;\n\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((r) => isSameReaction(r.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const centerIconId = availableReaction?.centerIcon?.id;\n\n  const customEmoji = useCustomEmoji(isCustom ? reaction.documentId : undefined);\n\n  const assignedEffectId = useMemo(() => {\n    if (!isCustom) return availableReaction?.aroundAnimation?.id;\n\n    if (!customEmoji) return undefined;\n    const assignedId = availableReactions?.find((available) => available.reaction.emoticon === customEmoji.emoji)\n      ?.aroundAnimation?.id;\n    return assignedId;\n  }, [availableReaction, availableReactions, customEmoji, isCustom]);\n\n  const effectId = useMemo(() => {\n    if (assignedEffectId) {\n      return assignedEffectId;\n    }\n\n    if (!genericEffects?.stickers) {\n      return undefined;\n    }\n\n    const { stickers } = genericEffects;\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n\n    return stickers[randomIndex].id;\n  }, [assignedEffectId, genericEffects]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active.reaction, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlay = Boolean(activeReaction && (isCustom || mediaDataCenterIcon) && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    if (!activeReaction?.messageId) return;\n    stopActiveReaction({ messageId: activeReaction.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !isCustom && (!shouldPlay || !isAnimationLoaded);\n\n  const className = buildClassName(\n    styles.root,\n    shouldRenderAnimation && styles.animating,\n    isCustom && styles.isCustomEmoji,\n  );\n\n  return (\n    <div className={className} ref={ref}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />}\n      {isCustom && (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          className={styles.customEmoji}\n          observeIntersectionForPlaying={observeIntersection}\n        />\n      )}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName(styles.effect, animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play={isIntersecting}\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n          {isCustom ? (\n            !assignedEffectId && isIntersecting && <CustomEmojiEffect reaction={reaction} />\n          ) : (\n            <AnimatedSticker\n              key={centerIconId}\n              className={buildClassName(styles.animatedIcon, animationClassNames)}\n              size={CENTER_ICON_SIZE}\n              tgsUrl={mediaDataCenterIcon}\n              play={isIntersecting}\n              noLoop\n              forceOnHeavyAnimation\n              onLoad={markAnimationLoaded}\n              onEnded={unmarkAnimationLoaded}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { isSameReaction, isReactionChosen } from '../../../global/helpers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './Reactions.scss';\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  withRecentReactors?: boolean;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  activeReactions,\n  availableReactions,\n  withRecentReactors,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, toggleReaction]);\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReactions={activeReactions}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : <AnimatedCounter text={formatIntegerCompact(reaction.count)} />}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiMessage, ApiStickerSet } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReactions,\n  availableReactions,\n  metaChildren,\n  genericEffects,\n  observeIntersection,\n  noRecentReactors,\n}) => {\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          activeReactions={activeReactions}\n          availableReactions={availableReactions}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          genericEffects={genericEffects}\n          observeIntersection={observeIntersection}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestMasterAndRequestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={isVideo ? 'icon-video-outlined' : 'icon-phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon-arrow-right', styles.arrow, isMissed && styles.missed, !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon-lock\" />}\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ActiveEmojiInteraction, ActiveReaction, ChatTranslatedMessages, MessageListType,\n} from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n  ApiChatMember,\n  ApiUsername,\n  ApiTopic,\n  ApiReaction,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type {\n  AnimationLevel, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { AudioOrigin } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectIsCurrentUserPremium,\n  selectIsChatProtected,\n  selectTopicFromMessage,\n  selectTabState,\n  selectChatTranslations,\n  selectRequestedTranslationLanguage,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n  getMessageSingleCustomEmoji,\n  hasMessageText,\n  isChatGroup,\n  getMessageLocation,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport {\n  calculateDimensionsForMessageMedia,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { isAnimatingScroll } from '../../../util/fastSmoothScroll';\n\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\nimport TopicChip from '../../common/TopicChip';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    memoFirstUnreadIdRef: { current: number | undefined };\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsernames?: ApiUsername[];\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  genericEffects?: ApiStickerSet;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  animationLevel: AnimationLevel;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  requestedTranslationLanguage?: string;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsernames,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  genericEffects,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReactions,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  animationLevel,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  requestedTranslationLanguage,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasSubheader = hasTopicChip || hasReply;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    (Boolean(activeReactions) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const { result: detectedLanguage } = useTextLanguage(areTranslationsEnabled ? text?.text : undefined);\n\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, messageId, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, true);\n\n  const currentText = isTranslationPending ? (previousTranslatedText || text) : translatedText;\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime()),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !hasAnimatedEmoji) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  const shouldFocusOnResize = isLastInGroup;\n\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.target.clientHeight;\n    messageHeightRef.current = newHeight;\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage]);\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(shouldFocusOnResize ? ref : undefined, throttledResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      }\n    } else if (invoice?.extendedMedia && (\n      invoice.extendedMedia.width && invoice.extendedMedia.height\n    )) {\n      const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n      width = calculateDimensionsForMessageMedia({\n        width: previewWidth,\n        height: previewHeight,\n        fromOwnMessage: isOwn,\n        asForwarded,\n        noAvatars,\n        isMobile,\n      }).width;\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(currentText), withCommentButton), width);\n      if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(\n      getMinMediaWidth(Boolean(currentText), withCommentButton), albumLayout.containerStyle.width,\n    );\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n        observeIntersection={observeIntersectionForLoading}\n        animationLevel={animationLevel}\n        withVideo\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    return (\n      <MessageText\n        message={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReactions={activeReactions}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded && !isOwn) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const chatUsername = useMemo(() => chatUsernames?.find((c) => c.isActive), [chatUsernames]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">\n              {lang('ForwardedMessage')}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReactions && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji\n                reaction={defaultReaction}\n                size={QUICK_REACTION_SIZE}\n                availableReactions={availableReactions}\n                observeIntersection={observeIntersectionForPlaying}\n              />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReactions={activeReactions}\n            availableReactions={availableReactions}\n            genericEffects={genericEffects}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername?.username}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, repliesThreadInfo, forwardInfo,\n      transcriptionId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsernames = chat?.usernames;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chat.fullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const isLocation = Boolean(getMessageLocation(message));\n    const chatTranslations = selectChatTranslations(global, chatId);\n    const requestedTranslationLanguage = selectRequestedTranslationLanguage(global, chatId, message.id);\n\n    return {\n      theme: selectTheme(global),\n      chatUsernames,\n      forceSenderName,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      lastSyncTime,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReactions: reactionMessage && activeReactions[reactionMessage.id],\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      senderAdminMember,\n      messageTopic,\n      genericEffects: global.genericEmojiEffects,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled: global.settings.byKey.canTranslate,\n      requestedTranslationLanguage,\n      ...((canShowSender || isLocation) && { sender }),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type {\n  ApiChat, ApiTopic, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n    openMessageLanguageModal,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId!,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n      noForumTopicPanel: true,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId!,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  const handleTranslationClick = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openMessageLanguageModal({ chatId, id: messageId });\n  }, [chatId, messageId, openMessageLanguageModal]);\n\n  const handleOpenThread = useCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n  }, [message.chatId, message.id, openChat]);\n\n  const handleTopicChipClick = useCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  }, [chatId, focusMessage, isChatWithRepliesBot, messageTopic, messageId, replyToChatId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n  };\n}\n","import { detectLanguage } from '../util/languageDetection';\nimport useAsync from './useAsync';\n\nexport default function useTextLanguage(text?: string) {\n  const language = useAsync(() => (text ? detectLanguage(text) : Promise.resolve(undefined)), [text], undefined);\n  return language;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { ChatTranslatedMessages } from '../../../../global/types';\n\nexport default function useMessageTranslation(\n  chatTranslations: ChatTranslatedMessages | undefined,\n  chatId: string,\n  messageId: number,\n  requestedLanguageCode?: string,\n) {\n  const { translateMessages } = getActions();\n  const messageTranslation = requestedLanguageCode\n    ? chatTranslations?.byLangCode[requestedLanguageCode]?.[messageId] : undefined;\n\n  const { isPending, text } = messageTranslation || {};\n\n  useEffect(() => {\n    if (!text && !isPending && requestedLanguageCode) {\n      translateMessages({ chatId, messageIds: [messageId], toLanguageCode: requestedLanguageCode });\n    }\n  }, [chatId, text, isPending, messageId, requestedLanguageCode, translateMessages]);\n\n  return {\n    isPending,\n    translatedText: text,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default memo(AboutAdsModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(SponsoredMessageContextMenuContainerAsync);\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        const isTopicTopMessage = message.id === threadTopMessageId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] > LOCAL_MESSAGE_MIN_ID;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  const toggleScrollToolsRef = useRef<typeof toggleScrollTools>();\n  toggleScrollToolsRef.current = toggleScrollTools;\n  useSyncEffect(() => {\n    if (isReady) {\n      toggleScrollToolsRef.current!();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [freezeForFab, freezeForNotch, messageIds, unfreezeForFab, unfreezeForNotch]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageListType } from '../../global/types';\nimport type { ApiTopic } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon topic={topic} size={ICON_SIZE} className=\"icon topic-icon\" />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('ChatYourSelfTitle')}</h3>\n        <ul className=\"description\">\n          <li>{lang('ChatYourSelfDescription1')}</li>\n          <li>{lang('ChatYourSelfDescription2')}</li>\n          <li>{lang('ChatYourSelfDescription3')}</li>\n          <li>{lang('ChatYourSelfDescription1')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium, selectLastScrollOffset, selectThreadInfo,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getVideoDimensions,\n  getPhotoFullDimensions,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { DPR } from '../../util/environment';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\n\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useMedia from '../../hooks/useMedia';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useResizeObserver from '../../hooks/useResizeObserver';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport Skeleton from '../ui/Skeleton';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isComments?: boolean;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: AnimationLevel;\n  lastMessage?: ApiMessage;\n  isLoadingBotInfo?: boolean;\n  botInfo?: ApiBotInfo;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n  topic?: ApiTopic;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  isLoadingBotInfo,\n  botInfo,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread'\n    && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0);\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat, lastSyncTime, loadSponsoredMessages]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && threadFirstMessageId !== threadTopMessageId\n      && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return listedMessages.length\n      ? groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current)\n      : undefined;\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.repliesThreadInfo?.isComments);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  }, []);\n  useResizeObserver(containerRef, handleResize);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] > LOCAL_MESSAGE_MIN_ID;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useSyncEffect(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useSyncEffect` above\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `as const` not yet supported by linter\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botInfo ? (\n        <div className=\"empty\">\n          {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n          {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n          {botInfo && (\n            <div\n              className=\"bot-info\"\n              style={botInfoRealDimensions && (\n                `width: ${botInfoRealDimensions.width}px`\n              )}\n            >\n              {botInfoPhotoUrl && (\n                <img\n                  src={botInfoPhotoUrl}\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                  alt=\"Bot info\"\n                />\n              )}\n              {botInfoGifUrl && (\n                <OptimizedVideo\n                  canPlay\n                  src={botInfoGifUrl}\n                  loop\n                  disablePictureInPicture\n                  muted\n                  playsInline\n                />\n              )}\n              {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n                <Skeleton\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                />\n              )}\n              {botInfo.description && (\n                <div className=\"bot-info-description\">\n                  <p className=\"bot-info-title\">{lang('BotInfoTitle')}</p>\n                  {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botInfo = chatBot.fullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n\n    const topic = chat.topics?.[threadId];\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      isComments: Boolean(threadInfo?.originChannelId),\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      isLoadingBotInfo,\n      botInfo,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      topic,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    const img = await preloadImage(blobUrl);\n    const { width, height } = img;\n    const shouldShrink = Math.max(width, height) > MAX_QUICK_IMG_SIZE;\n    const isGif = mimeType === GIF_MIME_TYPE;\n\n    if (!options?.compressedBlobUrl && !isGif && (shouldShrink || mimeType !== 'image/jpeg')) {\n      const resizedUrl = await scaleImage(\n        blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n      );\n      URL.revokeObjectURL(blobUrl);\n      return buildAttachment(filename, blob, {\n        compressedBlobUrl: resizedUrl,\n      });\n    }\n\n    if (mimeType === 'image/jpeg') {\n      filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n    }\n\n    quick = { width, height };\n    previewBlobUrl = blobUrl;\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    uniqueId: `${Date.now()}-${Math.random()}`,\n    ...options,\n  };\n}\n\nexport function prepareAttachmentsToSend(\n  attachments: ApiAttachment[], shouldSendCompressed?: boolean,\n): ApiAttachment[] {\n  return attachments.map((attach) => {\n    if (shouldSendCompressed) {\n      if (attach.compressedBlobUrl) {\n        return {\n          ...attach,\n          blobUrl: attach.compressedBlobUrl,\n        };\n      }\n      return attach;\n    }\n\n    return {\n      ...attach,\n      shouldSendAsFile: !attach.voice ? true : undefined,\n      shouldSendAsSpoiler: undefined,\n    };\n  });\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\nimport parseEmojiOnlyString from '../../../../util/parseEmojiOnlyString';\nimport twemojiRegex from '../../../../lib/twemojiRegex';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst MAX_LENGTH = 8;\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  stickers?: ApiSticker[],\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const getSingleEmoji = useDerivedSignal(() => {\n    const html = getHtml();\n    if (!isEnabled || !html || (IS_EMOJI_SUPPORTED && html.length > MAX_LENGTH)) return undefined;\n\n    const hasEmoji = html.match(IS_EMOJI_SUPPORTED ? twemojiRegex : EMOJI_IMG_REGEX);\n    if (!hasEmoji) return undefined;\n\n    const cleanHtml = prepareForRegExp(html);\n    const isSingleEmoji = cleanHtml && (\n      (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n      || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n    );\n\n    return isSingleEmoji\n      ? (IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!)\n      : undefined;\n  }, [getHtml, isEnabled]);\n\n  const isActive = useDerivedState(() => Boolean(getSingleEmoji()), [getSingleEmoji]);\n  const hasStickers = Boolean(stickers?.length);\n\n  useEffect(() => {\n    if (!isEnabled) return;\n\n    const singleEmoji = getSingleEmoji();\n    if (singleEmoji) {\n      if (!hasStickers) {\n        loadStickersForEmoji({ emoji: singleEmoji });\n      }\n    } else {\n      clearStickersForEmoji();\n    }\n  }, [isEnabled, getSingleEmoji, hasStickers, loadStickersForEmoji, clearStickersForEmoji]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isStickerTooltipOpen: Boolean(isActive && hasStickers && !isManuallyClosed),\n    closeStickerTooltip: markManuallyClosed,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","// Utility for cleaning html code from Google Docs.\n// Original source from DocsSoap:\n// https://www.npmjs.com/package/docs-soap\n\nconst GDOCS_ELEMENT_ID_REGEXP = /id=\"docs-internal-guid/i;\n\nconst GDOCS_STYLES = {\n  BOLD: '700',\n  ITALIC: 'italic',\n  UNDERLINE: 'underline',\n  STRIKETHROUGH: 'line-through',\n  SUPERSCRIPT: 'super',\n  SUBSCRIPT: 'sub',\n};\n\nconst ELEMENTS = {\n  ANCHOR: 'a',\n  BOLD: 'strong',\n  ITALIC: 'em',\n  UNDERLINE: 'u',\n  STRIKETHROUGH: 'del',\n  SUPERSCRIPT: 'sup',\n  SUBSCRIPT: 'sub',\n};\n\nconst headers = [\n  'H1',\n  'H2',\n  'H3',\n  'H4',\n  'H5',\n  'H6',\n];\n\nfunction parseHtml(html: string): HTMLElement {\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(html, 'text/html');\n\n  return doc.body;\n}\n\nfunction wrapNodeAnchor(node: Node, href: string): HTMLAnchorElement {\n  const anchor = document.createElement(ELEMENTS.ANCHOR) as HTMLAnchorElement;\n  anchor.href = href;\n  anchor.appendChild(node.cloneNode(true));\n\n  return anchor;\n}\n\nfunction wrapNodeInline(node: Node, style: string): Node {\n  const el = document.createElement(style);\n  el.appendChild(node.cloneNode(true));\n\n  return el;\n}\n\nfunction wrapNode(inner: HTMLElement, result: Node): Node {\n  let newNode = result.cloneNode(true);\n  if (!inner) {\n    return newNode;\n  }\n  if (inner.style && inner.style.fontWeight === GDOCS_STYLES.BOLD) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.BOLD);\n  }\n  if (inner.style && inner.style.fontStyle === GDOCS_STYLES.ITALIC) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.ITALIC);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.UNDERLINE) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.UNDERLINE);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.STRIKETHROUGH) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.STRIKETHROUGH);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUPERSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUPERSCRIPT);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUBSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUBSCRIPT);\n  }\n\n  return newNode;\n}\n\nfunction applyBlockStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = document.createTextNode('') as Node;\n  if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n    styledNode = node.childNodes[0];\n  }\n  if (node.childNodes[0] && node.childNodes[0].nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode.cloneNode(true), (node.childNodes[0] as HTMLAnchorElement).href);\n    styledNode = node.childNodes[0].childNodes[0];\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction applyInlineStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = node;\n  if (node.nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode, (node as HTMLAnchorElement).href);\n    if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n      styledNode = node.childNodes[0];\n    }\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction getCleanNode(node: Node): Node[] {\n  if (node.childNodes && (node.childNodes.length <= 1 || node.nodeName === 'OL' || node.nodeName === 'UL')) {\n    let newWrapper: Node | undefined;\n    let newNode = document.createTextNode(node.textContent || '') as Node;\n    if (node.nodeName === 'UL' || node.nodeName === 'OL' || node.nodeName === 'LI') {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = document.createDocumentFragment();\n      const items = [];\n      for (let i = 0; i < node.childNodes.length; i++) {\n        items.push(...getCleanNode(node.childNodes[i]));\n      }\n      items.map((i: Node): Node => newNode.appendChild(i));\n    } else if (headers.indexOf(node.nodeName) !== -1) {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = applyInlineStyles(node.childNodes[0]);\n    } else if (node.nodeName === 'P') {\n      newWrapper = document.createElement('p');\n      newNode = applyBlockStyles(node);\n    } else if (node.nodeName === 'BR') {\n      newNode = node;\n    } else {\n      newWrapper = document.createElement('span');\n      newNode = applyInlineStyles(node);\n    }\n    if (newWrapper) {\n      newWrapper.appendChild(newNode);\n      return [newWrapper];\n    }\n\n    return [node.cloneNode(true)];\n  }\n\n  if (node.childNodes) {\n    const nodes = [];\n    for (let i = 0; i < node.childNodes.length; i++) {\n      nodes.push(...getCleanNode(node.childNodes[i]));\n    }\n    return nodes;\n  }\n\n  return [node];\n}\n\nfunction filterNode(node: Node): boolean {\n  return node.nodeType !== 8; // Node.COMMENT_NODE = 8\n}\n\nfunction getCleanDocument(dirty: HTMLElement): HTMLElement {\n  const body = document.createElement('body');\n  const nodes = dirty.childNodes;\n  const filteredNodes = Array.from(nodes).filter(filterNode);\n  const cleanNodes = [];\n\n  for (const node of filteredNodes) {\n    cleanNodes.push(...getCleanNode(node));\n  }\n\n  for (let i = 0; i < cleanNodes.length; i++) {\n    body.appendChild(cleanNodes[i].cloneNode(true));\n  }\n\n  return body;\n}\n\nexport default function cleanDocsHtml(clipboardContent: string): string {\n  if (!clipboardContent.match(GDOCS_ELEMENT_ID_REGEXP)) {\n    return parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, '')).innerHTML;\n  }\n\n  return getCleanDocument(parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, ''))).innerHTML;\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { DEBUG, EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\nimport parseMessageInput, { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseMessageInput';\nimport cleanDocsHtml from '../../../../lib/cleanDocsHtml';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\n\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\n\nfunction preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  try {\n    html = cleanDocsHtml(html);\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) return;\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const html = e.clipboardData.getData('text/html');\n      let pastedFormattedText = html ? parseMessageInput(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] | undefined = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (!files?.length && !pastedText) {\n        return;\n      }\n\n      if (files?.length && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file);\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      if (textToPaste) {\n        insertTextAndUpdateCursor(textToPaste, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { InlineBotSettings } from '../../../../types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport memoized from '../../../../util/memoized';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useSyncEffect from '../../../../hooks/useSyncEffect';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst THROTTLE = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isEnabled: boolean,\n  chatId: string,\n  getHtml: Signal<string>,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot, resetAllInlineBots } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const extractBotQueryThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('@') ? parseBotQuery(html) : MEMO_NO_RESULT;\n  }, [getHtml, isEnabled], THROTTLE);\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDerivedState(extractBotQueryThrottled, [extractBotQueryThrottled, getHtml], true);\n\n  useSyncEffect(([prevUsername]) => {\n    if (prevUsername) {\n      resetInlineBot({ username: prevUsername });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [username, resetInlineBot] as const);\n\n  useEffect(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query,\n    });\n  }, [chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = (usernameLowered && inlineBots?.[usernameLowered]) || {};\n\n  const isOpen = Boolean((results?.length || switchPm) && !isManuallyClosed);\n\n  useEffect(() => {\n    if (!isOpen && !username) {\n      resetAllInlineBots();\n    }\n  }, [isOpen, resetAllInlineBots, username]);\n\n  const loadMore = useCallback(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [chatId, offset, query, queryInlineBot, usernameLowered]);\n\n  return {\n    isOpen,\n    botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: markManuallyClosed,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nconst buildQueryStateMemo = memoized((username: string, query: string, canShowHelp: boolean) => ({\n  username,\n  query,\n  canShowHelp,\n  usernameLowered: username.toLowerCase(),\n}));\n\nfunction parseBotQuery(html: string) {\n  if (!html.startsWith('@')) {\n    return MEMO_NO_RESULT;\n  }\n\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return buildQueryStateMemo(result[1], result[2], result[2] === '' && !text.match(HAS_NEW_LINE));\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  tempEl.querySelectorAll<HTMLElement>('[alt]').forEach((el) => {\n    if (!el.innerText) {\n      el.innerText = el.getAttribute('alt')!;\n    }\n  });\n\n  return tempEl.innerText;\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst RE_COMMAND = /^\\/([\\w@]{1,32})?$/i;\n\nconst THROTTLE = 300;\n\nexport default function useBotCommandTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const detectCommandThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('/') ? prepareForRegExp(html).match(RE_COMMAND)?.[0].trim() : undefined;\n  }, [getHtml, isEnabled], THROTTLE);\n\n  const getCommand = useDerivedSignal(\n    detectCommandThrottled, [detectCommandThrottled, getHtml], true,\n  );\n\n  useEffect(() => {\n    const command = getCommand();\n    const commands = botCommands || chatBotCommands;\n    if (!command || !commands) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const filter = command.substring(1);\n    const nextFilteredBotCommands = commands.filter((c) => !filter || c.command.startsWith(filter));\n\n    setFilteredBotCommands(\n      nextFilteredBotCommands?.length ? nextFilteredBotCommands : undefined,\n    );\n  }, [getCommand, botCommands, chatBotCommands]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isOpen: Boolean(filteredBotCommands?.length && !isManuallyClosed),\n    close: markManuallyClosed,\n    filteredBotCommands,\n  };\n}\n","import { useCallback, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiAttachment } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\n\nexport default function useAttachmentModal({\n  attachments,\n  fileSizeLimit,\n  setHtml,\n  setAttachments,\n  chatId,\n  canSendAudios,\n  canSendVideos,\n  canSendPhotos,\n  canSendDocuments,\n}: {\n  attachments: ApiAttachment[];\n  fileSizeLimit: number;\n  setHtml: (html: string) => void;\n  setAttachments: (attachments: ApiAttachment[]) => void;\n  chatId: string;\n  canSendAudios?: boolean;\n  canSendVideos?: boolean;\n  canSendPhotos?: boolean;\n  canSendDocuments?: boolean;\n}) {\n  const { openLimitReachedModal, showAllowedMessageTypesNotification } = getActions();\n  const [shouldForceAsFile, setShouldForceAsFile] = useState<boolean>(false);\n  const [shouldForceCompression, setShouldForceCompression] = useState<boolean>(false);\n  const [shouldSuggestCompression, setShouldSuggestCompression] = useState<boolean | undefined>(undefined);\n\n  const handleClearAttachments = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, [setAttachments]);\n\n  const handleSetAttachments = useCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (!newAttachments.length) {\n        handleClearAttachments();\n        return;\n      }\n\n      if (newAttachments.some((attachment) => {\n        const type = getAttachmentType(attachment);\n\n        return (type === 'audio' && !canSendAudios && !canSendDocuments)\n          || (type === 'video' && !canSendVideos && !canSendDocuments)\n          || (type === 'image' && !canSendPhotos && !canSendDocuments)\n          || (type === 'file' && !canSendDocuments);\n      })) {\n        showAllowedMessageTypesNotification({ chatId });\n      } else if (newAttachments.some(({ size }) => size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n        const shouldForce = newAttachments.some((attachment) => {\n          const type = getAttachmentType(attachment);\n\n          return (type === 'audio' && !canSendAudios)\n            || (type === 'video' && !canSendVideos)\n            || (type === 'image' && !canSendPhotos);\n        });\n\n        setShouldForceAsFile(Boolean(shouldForce && canSendDocuments));\n        setShouldForceCompression(!canSendDocuments);\n      }\n    }, [\n      attachments, canSendAudios, canSendDocuments, canSendPhotos, canSendVideos, chatId, fileSizeLimit,\n      handleClearAttachments, openLimitReachedModal, setAttachments, showAllowedMessageTypesNotification,\n    ],\n  );\n\n  const handleAppendFiles = useCallback(async (files: File[], isSpoiler?: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => (\n        buildAttachment(file.name, file, { shouldSendAsSpoiler: isSpoiler || undefined })\n      ))),\n    ]);\n  }, [attachments, handleSetAttachments]);\n\n  const handleFileSelect = useCallback(async (files: File[], suggestCompression?: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file))));\n    setShouldSuggestCompression(suggestCompression);\n  }, [handleSetAttachments]);\n\n  return {\n    shouldSuggestCompression,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate: setHtml,\n    handleClearAttachments,\n    handleSetAttachments,\n    shouldForceCompression,\n    shouldForceAsFile,\n  };\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'image';\n  }\n\n  if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'video';\n  }\n\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'audio';\n  }\n\n  return 'file';\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiDraft } from '../../../../global/types';\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { ApiMessageEntityTypes } from '../../../../api/types';\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useStateRef } from '../../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useRunDebounced from '../../../../hooks/useRunDebounced';\n\nlet isFrozen = false;\n\nfunction freeze() {\n  isFrozen = true;\n  requestAnimationFrame(() => {\n    isFrozen = false;\n  });\n}\n\nconst useDraft = (\n  draft: ApiDraft | undefined,\n  chatId: string,\n  threadId: number,\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  lastSyncTime?: number,\n) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n\n  const isEditing = Boolean(editedMessage);\n\n  const updateDraft = useCallback((prevState: { chatId?: string; threadId?: number } = {}, shouldForce = false) => {\n    if (isEditing || !lastSyncTime) return;\n\n    const html = getHtml();\n\n    if (html) {\n      saveDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        draft: parseMessageInput(html),\n        shouldForce,\n      });\n    } else {\n      clearDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        shouldForce,\n      });\n    }\n  }, [chatId, threadId, isEditing, lastSyncTime, getHtml, saveDraft, clearDraft]);\n\n  const forceUpdateDraft = useCallback(() => {\n    updateDraft(undefined, true);\n  }, [updateDraft]);\n\n  const updateDraftRef = useStateRef(updateDraft);\n  const runDebouncedForSaveDraft = useRunDebounced(DRAFT_DEBOUNCE, true, undefined, [chatId, threadId]);\n\n  // Restore draft on chat change\n  useEffectWithPrevDeps(([prevChatId, prevThreadId, prevDraft]) => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n\n      if (!draft?.shouldForce) {\n        return;\n      }\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    const customEmojiIds = draft.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [\n    chatId, threadId, draft, setHtml, editedMessage, loadCustomEmojis,\n  ] as const);\n\n  // Save draft on chat change\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      if (!isEditing) {\n        // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n        updateDraftRef.current({ chatId, threadId });\n      }\n\n      freeze();\n    };\n  }, [chatId, threadId, isEditing, updateDraftRef]);\n\n  const chatIdRef = useStateRef(chatId);\n  const threadIdRef = useStateRef(threadId);\n  useEffect(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    if (!getHtml()) {\n      updateDraftRef.current();\n\n      return;\n    }\n\n    const scopedShatId = chatIdRef.current;\n    const scopedThreadId = threadIdRef.current;\n\n    runDebouncedForSaveDraft(() => {\n      if (chatIdRef.current === scopedShatId && threadIdRef.current === scopedThreadId) {\n        updateDraftRef.current();\n      }\n    });\n  }, [chatIdRef, getHtml, runDebouncedForSaveDraft, threadIdRef, updateDraftRef]);\n\n  useBackgroundMode(forceUpdateDraft);\n  useBeforeUnload(forceUpdateDraft);\n};\n\nexport default useDraft;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef, useCallback, memo } from '../../lib/teact/teact';\n\nimport type { OwnProps as ButtonProps } from './Button';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button from './Button';\n\ntype OwnProps = {\n  onActivate: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate(e);\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate(e);\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    isMouseInside.current = true;\n    onActivate(e);\n  }, [onActivate]);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      // onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      // onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={!IS_TOUCH_ENV ? onActivate : handleClick}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vL8HfVVnjTeFmp1ECFj8\",\"compact\":\"N3E1geoPu1vesCKf545F\",\"image\":\"Fb4aIyDYEwOlaqY8oZkV\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((path) => {\n      path.style.stroke = color;\n      path.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, IS_COMPACT_MENU && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, IS_COMPACT_MENU && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import React, {\n  memo, useMemo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW, SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { validateFiles } from '../../../util/files';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  canSendPhotos: boolean;\n  canSendVideos: boolean;\n  canSendDocuments: boolean;\n  canSendAudios: boolean;\n  isScheduled?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  onFileSelect: (files: File[], shouldSuggestCompression?: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  canSendPhotos,\n  canSendVideos,\n  canSendDocuments,\n  canSendAudios,\n  attachBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const canSendVideoAndPhoto = canSendPhotos && canSendVideos;\n  const canSendVideoOrPhoto = canSendPhotos || canSendVideos;\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, shouldSuggestCompression?: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileSelect(validatedFiles, shouldSuggestCompression);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(canSendVideoAndPhoto ? CONTENT_TYPES_WITH_PREVIEW : (\n        canSendPhotos ? SUPPORTED_IMAGE_CONTENT_TYPES : SUPPORTED_VIDEO_CONTENT_TYPES\n      )).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [canSendPhotos, canSendVideoAndPhoto, handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog(!canSendDocuments && canSendAudios\n      ? Array.from(SUPPORTED_AUDIO_CONTENT_TYPES).join(',') : (\n        '*'\n      ), (e) => handleFileSelect(e, false));\n  }, [canSendAudios, canSendDocuments, handleFileSelect]);\n\n  const bots = useMemo(() => {\n    return Object.values(attachBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bots' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n  return null;\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            {canSendVideoOrPhoto && (\n              <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n                {lang(canSendVideoAndPhoto ? 'AttachmentMenu.PhotoOrVideo'\n                  : (canSendPhotos ? 'InputAttach.Popover.Photo' : 'InputAttach.Popover.Video'))}\n              </MenuItem>\n            )}\n            {(canSendDocuments || canSendAudios)\n              && (\n                <MenuItem icon=\"document\" onClick={handleDocumentSelect}>\n                  {lang(!canSendDocuments && canSendAudios ? 'InputAttach.Popover.Music' : 'AttachDocument')}\n                </MenuItem>\n              )}\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            threadId={threadId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  threadId?: number;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  threadId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleAttachBot]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachBot({\n        bot,\n        chatId,\n        threadId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectTabState,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId, stripCustomEmoji } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n  shouldForceShowEditing?: boolean;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  shouldForceShowEditing,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [\n    replyingToId, shouldForceShowEditing, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId,\n    exitForwardMode,\n  ]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id, noForumTopicPanel: true });\n  }, [focusMessage, isForwarding, message]);\n\n  const handleClearClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  }, [clearEmbedded]);\n\n  const handleChangeRecipientClick = useCallback(() => {\n    changeForwardRecipient();\n  }, [changeForwardRecipient]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getRootElement = useCallback(() => ref.current!, []);\n  const getMenuElement = useCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'), []);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId, shouldForceShowEditing]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div>\n        <div className=\"embedded-left-icon\">\n          <i className={leftIcon} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: false,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: true,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: false,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: true,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { shouldForceShowEditing }): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = selectTabState(global);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId && !shouldForceShowEditing) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message && !shouldForceShowEditing) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import type { Signal } from '../../../util/signals';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageEntityTextUrl, ApiWebPage } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectTabState, selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport { useDebouncedResolver } from '../../../hooks/useAsyncResolvers';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  getHtml: Signal<string>;\n  isDisabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  getHtml,\n  isDisabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n    const linkEntity = entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n\n    return linkEntity?.url || text.match(RE_LINK)?.[0];\n  }, [getHtml], DEBOUNCE_MS, true);\n\n  const getLink = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffect(() => {\n    const link = getLink();\n\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [getLink, chatId, threadId, clearWebPagePreview, loadWebPagePreview, toggleMessageWebPage]);\n\n  useSyncEffect(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId, clearWebPagePreview, threadId, toggleMessageWebPage]);\n\n  const isShown = useDerivedState(() => {\n    return Boolean(webPagePreview && getHtml() && !noWebPage && !isDisabled);\n  }, [isDisabled, getHtml, noWebPage, webPagePreview]);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: selectTabState(global).webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  TabState, MessageListType, GlobalState, ApiDraft,\n} from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiBotCommand,\n  ApiBotMenuButton,\n  ApiAttachMenuPeerType,\n} from '../../../api/types';\nimport type { InlineBotSettings, ISettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_ID,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_UPLOAD_FILEPART_SIZE, EDITABLE_INPUT_MODAL_ID,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_IOS } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatMessage,\n  selectUser,\n  selectCanScheduleUntilOnline,\n  selectEditingScheduledDraft,\n  selectEditingDraft,\n  selectRequestedDraftText,\n  selectTheme,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectChatType,\n  selectRequestedDraftFiles,\n  selectTabState,\n  selectReplyingToId,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatSuperGroup,\n  isChatChannel,\n  isUserId,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment, { prepareAttachmentsToSend } from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport { insertHtmlInSelection } from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { buildCustomEmojiHtml } from './helpers/customEmoji';\nimport { processMessageInputForCustomEmoji } from '../../../util/customEmojiManager';\nimport { getTextWithEntitiesAsHtml } from '../../common/helpers/renderTextWithEntities';\n\nimport useSignal from '../../../hooks/useSignal';\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAttachmentModal from './hooks/useAttachmentModal';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useDraft from './hooks/useDraft';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  isMobile?: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiDraft;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    replyingToId?: number;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: TabState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: TabState['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraftText?: string;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n    attachmentSettings: GlobalState['attachmentSettings'];\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = TabState['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  isMobile,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  replyingToId,\n  requestedDraftText,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  attachmentSettings,\n  theme,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    addRecentCustomEmoji,\n    showNotification,\n    showAllowedMessageTypesNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const [getHtml, setHtml] = useSignal('');\n  const getSelectionRange = useGetSelectionRange(EDITABLE_INPUT_CSS_SELECTOR);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsPeerIds = chat?.sendAsPeerIds;\n  const canShowSendAs = sendAsPeerIds\n    && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some((peer) => peer.id === currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  useEffect(processMessageInputForCustomEmoji, [getHtml]);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsPeerIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useSyncEffect(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n  const hasAttachments = Boolean(attachments.length);\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n    canSendVoices, canSendPlainText, canSendAudios, canSendVideos, canSendPhotos, canSendDocuments,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isComposerBlocked = !canSendPlainText && !editingMessage;\n\n  const {\n    shouldSuggestCompression,\n    shouldForceCompression,\n    shouldForceAsFile,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate,\n    handleClearAttachments,\n    handleSetAttachments,\n  } = useAttachmentModal({\n    attachments,\n    setHtml,\n    setAttachments,\n    fileSizeLimit,\n    chatId,\n    canSendAudios,\n    canSendVideos,\n    canSendPhotos,\n    canSendDocuments,\n  });\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const isEditingRef = useStateRef(Boolean(editingMessage));\n  useEffect(() => {\n    if (getHtml() && !isEditingRef.current) {\n      sendMessageAction({ type: 'typing' });\n    }\n  }, [getHtml, isEditingRef, sendMessageAction]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestStickers && !hasAttachments),\n    getHtml,\n    setHtml,\n    undefined,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    closeCustomEmojiTooltip,\n    insertCustomEmoji,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestCustomEmoji && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isStickerTooltipOpen,\n    closeStickerTooltip,\n  } = useStickerTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestStickers && canSendStickers && !hasAttachments),\n    getHtml,\n    stickersForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    botId: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments && lastSyncTime),\n    chatId,\n    getHtml,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean(isReady && isForCurrentMessageList && ((botCommands && botCommands?.length) || chatBotCommands?.length)),\n    getHtml,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const insertHtmlAndUpdateCursor = useCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    if (inputId === EDITABLE_INPUT_ID && isComposerBlocked) return;\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${getHtml()}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [isComposerBlocked, getHtml, setHtml]);\n\n  const insertFormattedTextAndUpdateCursor = useCallback((\n    text: ApiFormattedText, inputId: string = EDITABLE_INPUT_ID,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertCustomEmojiAndUpdateCursor = useCallback((emoji: ApiSticker, inputId: string = EDITABLE_INPUT_ID) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  useDraft(draft, chatId, threadId, getHtml, setHtml, editingMessage, lastSyncTime);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n\n    setAttachments(MEMO_EMPTY_ARRAY);\n\n    closeEmojiTooltip();\n    closeCustomEmojiTooltip();\n    closeStickerTooltip();\n    closeMentionTooltip();\n\n    if (isMobile) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [\n    setHtml, isMobile, closeStickerTooltip, closeCustomEmojiTooltip, closeMentionTooltip, closeEmojiTooltip,\n    closeSymbolMenu,\n  ]);\n\n  const [handleEditComplete, handleEditCancel, shouldForceShowEditing] = useEditing(\n    getHtml,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n    replyingToId,\n  );\n\n  // Handle chat change (should be placed after `useDraft` and `useEditing`)\n  const resetComposerRef = useStateRef(resetComposer);\n  const stopRecordingVoiceRef = useStateRef(stopRecordingVoice);\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      stopRecordingVoiceRef.current();\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      resetComposerRef.current();\n    };\n  }, [chatId, threadId, resetComposerRef, stopRecordingVoiceRef]);\n\n  const showCustomEmojiPremiumNotification = useCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint2'),\n        action: {\n          action: 'openChat',\n          payload: { id: currentUserId, shouldReplaceHistory: true },\n        },\n        actionText: lang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  }, [currentUserId, lang, showNotification]);\n\n  const mainButtonState = useDerivedState(() => {\n    if (editingMessage && shouldForceShowEditing) {\n      return MainButtonState.Edit;\n    }\n\n    if (IS_VOICE_RECORDING_SUPPORTED && !activeVoiceRecording && !isForwarding && !(getHtml() && !hasAttachments)) {\n      return MainButtonState.Record;\n    }\n\n    if (shouldSchedule) {\n      return MainButtonState.Schedule;\n    }\n\n    return MainButtonState.Send;\n  }, [\n    activeVoiceRecording, editingMessage, getHtml, hasAttachments, isForwarding, shouldForceShowEditing, shouldSchedule,\n  ]);\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  useClipboardPaste(\n    isForCurrentMessageList,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const validateTextLength = useCallback((text: string, isAttachmentModal?: boolean) => {\n    const maxLength = isAttachmentModal ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength.toString(),\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return false;\n    }\n    return true;\n  }, [captionLimit, showDialog]);\n\n  const checkSlowMode = useCallback(() => {\n    if (slowMode && !isAdmin) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n      const nowSeconds = getServerTime();\n      const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n        && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n      const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n      if (\n        (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n        || nextSendDateNotReached\n      ) {\n        const secondsRemaining = nextSendDateNotReached\n          ? slowMode.nextSendDate! - nowSeconds\n          : slowMode.seconds - secondsSinceLastMessage!;\n        showDialog({\n          data: {\n            message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n            isSlowMode: true,\n            hasErrorKey: false,\n          },\n        });\n\n        messageInput?.blur();\n\n        return false;\n      }\n    }\n    return true;\n  }, [isAdmin, lang, showDialog, slowMode]);\n\n  const sendAttachments = useCallback(({\n    attachments: attachmentsToSend,\n    sendCompressed = attachmentSettings.shouldCompress,\n    sendGrouped = attachmentSettings.shouldSendGrouped,\n    isSilent,\n    scheduledAt,\n  }: {\n    attachments: ApiAttachment[];\n    sendCompressed?: boolean;\n    sendGrouped?: boolean;\n    isSilent?: boolean;\n    scheduledAt?: number;\n  }) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n    if (!text && !attachmentsToSend.length) {\n      return;\n    }\n    if (!validateTextLength(text, true)) return;\n    if (!checkSlowMode()) return;\n\n    sendMessage({\n      text,\n      entities,\n      scheduledAt,\n      isSilent,\n      shouldUpdateStickerSetsOrder: true,\n      attachments: prepareAttachmentsToSend(attachmentsToSend, sendCompressed),\n      shouldGroupMessages: sendGrouped,\n    });\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    attachmentSettings.shouldCompress, attachmentSettings.shouldSendGrouped, connectionState, getHtml,\n    validateTextLength, checkSlowMode, sendMessage, clearDraft, chatId, resetComposer,\n  ]);\n\n  const handleSendAttachments = useCallback((\n    sendCompressed: boolean,\n    sendGrouped: boolean,\n    isSilent?: boolean,\n    scheduledAt?: number,\n  ) => {\n    sendAttachments({\n      attachments,\n      sendCompressed,\n      sendGrouped,\n      isSilent,\n      scheduledAt,\n    });\n  }, [attachments, sendAttachments]);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (currentAttachments.length) {\n      sendAttachments({\n        attachments: currentAttachments,\n      });\n      return;\n    }\n\n    if (!text && !isForwarding) {\n      return;\n    }\n\n    if (!validateTextLength(text)) return;\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (text) {\n      if (!checkSlowMode()) return;\n\n      sendMessage({\n        text,\n        entities,\n        scheduledAt,\n        isSilent,\n        shouldUpdateStickerSetsOrder: true,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, getHtml, isForwarding, validateTextLength, clearDraft,\n    chatId, stopRecordingVoice, sendAttachments, checkSlowMode, sendMessage, forwardMessages, resetComposer,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') {\n      return;\n    }\n\n    callAttachBot({\n      chatId, url: botMenuButton.url, threadId,\n    });\n  }, [botMenuButton, callAttachBot, chatId, threadId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else if (args.sendCompressed !== undefined || args.sendGrouped !== undefined) {\n      const { sendCompressed = false, sendGrouped = false } = args;\n      void handleSendAttachments(sendCompressed, sendGrouped, isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSendAttachments, handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraftText) {\n      setHtml(requestedDraftText);\n      resetOpenChatWithDraft();\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedDraftText, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      handleFileSelect(requestedDraftFiles);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker, inputId?: string) => {\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji, inputId);\n  }, [insertCustomEmojiAndUpdateCursor, isChatWithSelf, isCurrentUserPremium, showCustomEmojiPremiumNotification]);\n\n  const handleCustomEmojiSelectAttachmentModal = useCallback((emoji: ApiSticker) => {\n    handleCustomEmojiSelect(emoji, EDITABLE_INPUT_MODAL_ID);\n  }, [handleCustomEmojiSelect]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    isScheduleRequested?: boolean,\n    shouldPreserveInput = false,\n    shouldUpdateStickerSetsOrder?: boolean,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent, shouldUpdateStickerSetsOrder });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const sendSilent = useCallback((additionalArgs?: ScheduledMessageArgs) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ ...additionalArgs, isSilent: true }, scheduledAt);\n      });\n    } else if (additionalArgs && ('sendCompressed' in additionalArgs || 'sendGrouped' in additionalArgs)) {\n      const { sendCompressed = false, sendGrouped = false } = additionalArgs;\n      void handleSendAttachments(sendCompressed, sendGrouped, true);\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, handleSendAttachments, requestCalendar, shouldSchedule]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!isMobile || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu, isMobile]);\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  useEffect(() => {\n    if (!isComposerBlocked) return;\n\n    setHtml('');\n  }, [isComposerBlocked, setHtml, attachments]);\n\n  const insertTextAndUpdateCursorAttachmentModal = useCallback((text: string) => {\n    insertTextAndUpdateCursor(text, EDITABLE_INPUT_MODAL_ID);\n  }, [insertTextAndUpdateCursor]);\n\n  const removeSymbol = useCallback((inputId = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(getHtml()));\n  }, [getHtml, setHtml]);\n\n  const removeSymbolAttachmentModal = useCallback(() => {\n    removeSymbol(EDITABLE_INPUT_MODAL_ID);\n  }, [removeSymbol]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({\n      id: chatId, threadId, type: 'scheduled', noForumTopicPanel: true,\n    });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && isMobile) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu, isMobile]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy || !canSendVoices);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          } else if (!canSendVoices) {\n            showAllowedMessageTypesNotification({ chatId });\n          }\n        } else {\n          startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, handleEditComplete, activeVoiceRecording, requestCalendar, areVoiceMessagesNotAllowed,\n    canSendVoiceByPrivacy, showNotification, lang, chat?.title, startRecordingVoice, pauseRecordingVoice,\n    handleMessageSchedule, chatId, showAllowedMessageTypesNotification, canSendVoices,\n  ]);\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilent = useCallback(() => {\n    sendSilent();\n  }, [sendSilent]);\n\n  const handleSendScheduledAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({ sendCompressed, sendGrouped }, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilentAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    sendSilent({ sendCompressed, sendGrouped });\n  }, [sendSilent]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const withBotMenuButton = isChatWithBot && botMenuButton?.type === 'webApp' && !editingMessage;\n  const isBotMenuButtonOpen = useDerivedState(() => {\n    return withBotMenuButton && !getHtml() && !activeVoiceRecording;\n  }, [withBotMenuButton, getHtml, activeVoiceRecording]);\n\n  const withBotCommands = isChatWithBot && botMenuButton?.type === 'commands' && !editingMessage\n    && botCommands !== false && !activeVoiceRecording;\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        getHtml={getHtml}\n        isReady={isReady}\n        shouldSuggestCompression={shouldSuggestCompression}\n        shouldForceCompression={shouldForceCompression}\n        shouldForceAsFile={shouldForceAsFile}\n        isForCurrentMessageList={isForCurrentMessageList}\n        onCaptionUpdate={onCaptionUpdate}\n        onSendSilent={handleSendSilentAttachments}\n        onSend={handleSendAttachments}\n        onSendScheduled={handleSendScheduledAttachments}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachments}\n        onAttachmentsUpdate={handleSetAttachments}\n        onCustomEmojiSelect={handleCustomEmojiSelectAttachmentModal}\n        onRemoveSymbol={removeSymbolAttachmentModal}\n        onEmojiSelect={insertTextAndUpdateCursorAttachmentModal}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filteredUsers={mentionFilteredUsers}\n        onInsertUserName={insertMention}\n        onClose={closeMentionTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        getHtml={getHtml}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n\n        <InlineBotTooltip\n          isOpen={isInlineBotTooltipOpen}\n          botId={inlineBotId}\n          isGallery={isInlineBotTooltipGallery}\n          inlineBotResults={inlineBotResults}\n          switchPm={inlineBotSwitchPm}\n          loadMore={loadMoreForInlineBot}\n          isSavedMessages={isChatWithSelf}\n          canSendGifs={canSendGifs}\n          isCurrentUserPremium={isCurrentUserPremium}\n          onSelectResult={handleInlineBotSelect}\n          onClose={closeInlineBotTooltip}\n        />\n        <ComposerEmbeddedMessage\n          onClear={handleEmbeddedClear}\n          shouldForceShowEditing={Boolean(shouldForceShowEditing && editingMessage)}\n        />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          getHtml={getHtml}\n          isDisabled={!canAttachEmbedLinks || hasAttachments}\n        />\n        <div className=\"message-input-wrapper\">\n          {withBotMenuButton && (\n            <BotMenuButton\n              isOpen={isBotMenuButtonOpen}\n              text={botMenuButton.text}\n              isDisabled={Boolean(activeVoiceRecording)}\n              onClick={handleClickBotMenu}\n            />\n          )}\n          {withBotCommands && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {(!isComposerBlocked || canSendGifs || canSendStickers) && (\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              canSendStickers={canSendStickers}\n              canSendGifs={canSendGifs}\n              onGifSelect={handleGifSelect}\n              onStickerSelect={handleStickerSelect}\n              onCustomEmojiSelect={handleCustomEmojiSelect}\n              onRemoveSymbol={removeSymbol}\n              onEmojiSelect={insertTextAndUpdateCursor}\n              closeBotCommandMenu={closeBotCommandMenu}\n              closeSendAsMenu={closeSendAsMenu}\n              isSymbolMenuForced={isSymbolMenuForced}\n              canSendPlainText={!isComposerBlocked}\n            />\n          )}\n          <MessageInput\n            ref={inputRef}\n            id=\"message-input-text\"\n            editableInputId={EDITABLE_INPUT_ID}\n            chatId={chatId}\n            canSendPlainText={!isComposerBlocked}\n            threadId={threadId}\n            isActive={!hasAttachments}\n            getHtml={getHtml}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : (!isComposerBlocked\n                  ? (botKeyboardPlaceholder || lang('Message'))\n                  : lang('Chat.PlaceholderTextNotAllowed'))\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && isForCurrentMessageList && !hasAttachments}\n            noFocusInterception={hasAttachments}\n            shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {Boolean(botKeyboardMessageId) && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && Boolean(currentRecordTime) && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            threadId={threadId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            canSendPhotos={canSendPhotos}\n            canSendVideos={canSendVideos}\n            canSendDocuments={canSendDocuments}\n            canSendAudios={canSendAudios}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            theme={theme}\n          />\n          {Boolean(botKeyboardMessageId) && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n            onClose={closeStickerTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChatWithUser = isUserId(chatId);\n    const messageWithActualBotKeyboard = (isChatWithBot || !isChatWithUser)\n      && selectNewestMessageWithBotKeyboardButtons(global, chatId, threadId);\n    const scheduledIds = selectScheduledIds(global, chatId, threadId);\n    const { language, shouldSuggestStickers, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsPeerIds && defaultSendAsId && (\n      chat.sendAsPeerIds.some((peer) => peer.id === defaultSendAsId)\n        ? defaultSendAsId\n        : (chat?.adminRights?.anonymous ? chat?.id : undefined)\n    );\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedDraftText = selectRequestedDraftText(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !user.fullInfo?.noVoiceMessages) ?? true;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n\n    const tabState = selectTabState(global);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      replyingToId,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === tabState.forwardMessages.toChatId,\n      pollModal: tabState.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: tabState.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: tabState.inlineBots.byUsername,\n      isInlineBotLoading: tabState.inlineBots.isLoading,\n      chatBotCommands: chat?.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot?.fullInfo ? (chatBot.fullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBot?.fullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedDraftText,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n      attachmentSettings: global.attachmentSettings,\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\nconst useEditing = (\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n  replyingToId?: number,\n): [VoidFunction, VoidFunction, boolean] => {\n  const { editMessage, setEditingDraft } = getActions();\n  const [shouldForceShowEditing, setShouldForceShowEditing] = useState<boolean>();\n\n  useEffectWithPrevDeps(([prevEditedMessage, prevReplyingToId]) => {\n    if (!editedMessage) {\n      return;\n    }\n\n    if (replyingToId && prevReplyingToId !== replyingToId) {\n      setHtml('');\n      setShouldForceShowEditing(false);\n      return;\n    }\n\n    if (prevEditedMessage?.id === editedMessage.id && replyingToId === prevReplyingToId) {\n      return;\n    }\n\n    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;\n    const html = getTextWithEntitiesAsHtml(text);\n\n    setHtml(html);\n    setShouldForceShowEditing(true);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `as const` not yet supported by linter\n  }, [editedMessage, replyingToId, setHtml] as const);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      const edited = parseMessageInput(getHtml());\n      const update = edited.text.length ? edited : undefined;\n\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, getHtml, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(getHtml());\n    const update = edited.text.length ? edited : undefined;\n\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel, shouldForceShowEditing];\n};\n\nexport default useEditing;\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default memo(GiftPremiumModalAsync);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './MessageLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MessageLanguageModal = useModuleLoader(Bundles.Extra, 'MessageLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageLanguageModal ? <MessageLanguageModal {...props} /> : undefined;\n};\n\nexport default memo(MessageLanguageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  GENERAL_TOPIC_ID,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { MASK_IMAGE_DISABLED } from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectTabState,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectTheme,\n  selectThreadInfo,\n  selectChatMessage,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat,\n  getMessageSendingRestrictionReason,\n  getForumComposerPlaceholder,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport MessageLanguageModal from './MessageLanguageModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  replyingToId?: number;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isMessageLanguageModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  lastSyncTime?: number;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  chat,\n  replyingToId,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isMessageLanguageModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? 450 + ANIMATION_END_DELAY : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n      && hasAudioPlayer\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, threadId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, renderingShouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId: chatId! });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(replyingToId));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n              isMobile={isMobile}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {isMobile\n                  && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest)) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                <MessageLanguageModal isOpen={isMessageLanguageModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      messageLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chats: { listIds }, lastSyncTime } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isMessageLanguageModalOpen: Boolean(messageLanguageModal),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isComments);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(chat && isChatGroup(chat) && !chat.fullInfo && lastSyncTime);\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !replyingToId && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      replyingToId,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: (\n        (threadId !== MAIN_THREAD_ID && !chat?.isForum)\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n      ),\n      hasAudioPlayer: Boolean(audioMessage),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch, selectTabState,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, getCanManageTopic, isChatAdmin, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport { getDayStartAt } from '../../util/dateFormat';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const toggleEditTopic = useCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  }, [chatId, openEditTopicPanel, threadId]);\n\n  const handleToggleManagement = useCallback(() => {\n    toggleManagement();\n  }, [toggleManagement]);\n\n  const handleToggleStatistics = useCallback(() => {\n    toggleStatistics();\n  }, [toggleStatistics]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {/* {currentInviteInfo && !currentInviteInfo.isRevoked && ( */}\n              {/*   <Button */}\n              {/*     round */}\n              {/*     color=\"translucent\" */}\n              {/*     size=\"smaller\" */}\n              {/*     ariaLabel={lang('Edit')} */}\n              {/*     onClick={handleEditInviteClick} */}\n              {/*   > */}\n              {/*     <i className=\"icon-edit\" /> */}\n              {/*   </Button> */}\n              {/* )} */}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {/* {canAddContact && ( */}\n              {/*   <Button */}\n              {/*     round */}\n              {/*     color=\"translucent\" */}\n              {/*     size=\"smaller\" */}\n              {/*     ariaLabel={lang('AddContact')} */}\n              {/*     onClick={handleAddContact} */}\n              {/*   > */}\n              {/*     <i className=\"icon-add-user\" /> */}\n              {/*   </Button> */}\n              {/* )} */}\n              {/* {canManage && !isInsideTopic && ( */}\n              {/*   <Button */}\n              {/*     round */}\n              {/*     color=\"translucent\" */}\n              {/*     size=\"smaller\" */}\n              {/*     ariaLabel={lang('Edit')} */}\n              {/*     onClick={handleToggleManagement} */}\n              {/*   > */}\n              {/*     <i className=\"icon-edit\" /> */}\n              {/*   </Button> */}\n              {/* )} */}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  lastSyncTime?: number,\n  topicId?: number,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel, topicId]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    lastSyncTime,\n    topicId,\n  );\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          {/* <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} /> */}\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chat?.fullInfo?.members;\n    const adminMembersById = chat?.fullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chat.fullInfo && !chat.fullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './CreateTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default memo(CreateTopicAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './EditTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default memo(EditTopicAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectChat,\n  selectCurrentMessageList, selectTabState,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n    closeCreateTopicPanel, closeEditTopicPanel,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { Thread } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: Record<string, number[]>;\n  messages: Record<string, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages[chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { createLocationHash } from '../../util/routing';\nimport { selectTabState } from '../../global/selectors';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default memo(AttachBotInstallModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\nimport { selectTabState } from '../../global/selectors';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestAnimationFrame(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestAnimationFrame(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumMainModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumLimitReachedModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { deleteFolderDialogId } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !deleteFolderDialogId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default memo(DeleteFolderDialogAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default memo(CustomEmojiSetsModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(DraftRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(AttachBotRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useCallback, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { AnimationLevel, LangCode } from '../../types';\nimport type {\n  ApiAttachBot,\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/environment';\nimport {\n  selectChatMessage,\n  selectTabState,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport { fastRaf } from '../../util/schedulers';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport updateIcon from '../../util/updateIcon';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: AnimationLevel;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUser?: ApiUser;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialogId?: number;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  lastSyncTime,\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUser,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isCurrentUserPremium,\n  deleteFolderDialogId,\n  isMasterTab,\n}) => {\n  const {\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      loadDefaultStatusIcons();\n      checkAppVersion();\n      if (isCurrentUserPremium) {\n        loadRecentEmojiStatuses();\n      }\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachBots, loadContactList,\n    loadPremiumGifts, checkAppVersion, loadConfig, loadGenericEmojiEffects, loadDefaultTopicIcons,\n    loadDefaultStatusIcons, loadRecentEmojiStatuses, isCurrentUserPremium, isMasterTab,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    if (!prevLastSyncTime && lastSyncTime && isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [lastSyncTime, isMasterTab, loadCustomEmojis]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [\n    lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers, addedCustomEmojiIds,\n    isMasterTab,\n  ]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (lastSyncTime && parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [lastSyncTime]);\n\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    if (!prevLastSyncTime && lastSyncTime) {\n      openChat({\n        id: parsedLocationHash.chatId,\n        threadId: parsedLocationHash.threadId,\n        type: parsedLocationHash.type,\n      });\n    }\n  }, [lastSyncTime, openChat]);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      fastRaf(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [animationLevel, forceUpdate, isLeftColumnOpen]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useSyncEffect(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (animationLevel === 0) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [animationLevel, forceUpdate, isRightColumnOpen]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  }, [onTabFocusChange]);\n\n  const handleFocus = useCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  }, [onTabFocusChange, updatePageTitle]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    closeStickerSetModal();\n  }, [closeStickerSetModal]);\n\n  const handleCustomEmojiSetsModalClose = useCallback(() => {\n    closeCustomEmojiSets();\n  }, [closeCustomEmojiSets]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className}>\n      <LeftColumn />\n      <MiddleColumn isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal bot={botTrustRequestBot} type={botTrustRequest?.type} />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog deleteFolderDialogId={deleteFolderDialogId} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          animationLevel, language, wasTimeFormatSetManually,\n        },\n      },\n      lastSyncTime,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n\n    return {\n      lastSyncTime,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUser,\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialogId: deleteFolderDialogModal,\n      isMasterTab,\n      requestedDraft,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 180000; // 3 minutes\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(\n    resetInvalidUnlockAttempts,\n    invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? TIMEOUT_RESET_INVALID_ATTEMPTS_MS\n      : undefined,\n  );\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [invalidAttemptsCount, lang, logInvalidUnlockAttempt, unlockScreen]);\n\n  useEffect(() => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [invalidAttemptsCount, lang]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { IS_MULTITAB_SUPPORTED } from '../util/environment';\nimport { DEBUG } from '../config';\n\n// eslint-disable-next-line import/no-cycle\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","tabId","getCurrentTabId","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","undefined","replaceLocalTextSearchResults","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","selectTabState","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","noForumTopicPanel","currentMessageList","tabState","premiumModal","promo","isOpen","updateTabState","replaceTabThreadParam","activeReactions","exitMessageSelectMode","isStatisticsShown","contentToBeScheduled","forwardMessages","toChatId","selectChat","isForum","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","window","open","createMessageHashUrl","isChatInfoShown","lastIsChatInfoShown","setGlobal","openChat","text","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","folderId","deleteFolderDialogModal","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","messageListType","lang","langProvider","chatMessages","selectChatScheduledMessages","selectChatMessages","messages","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","result","reduce","acc","sender","selectSender","push","getSenderTitle","emoji","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","join","getMessageSummaryDescription","renderMessageSummaryHtml","resultText","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","replaceThreadParam","messageId","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","lastMessage","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","getIsMobile","pollResults","voters","setTimeout","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","hasReached","updateFocusedMessageReached","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","noAuthors","noCaptions","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","RELEASE_DATETIME","Date","now","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","content","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","activeLanguage","selectRequestedTranslationLanguage","messageLanguageModal","chat","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","isClosing","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickerSearch","resultIds","gifSearch","offset","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","updateIcon","asUnread","document","querySelectorAll","link","href","replace","setPageTitleInstant","nextTitle","title","setPageTitle","debounce","notificationInterval","force","leftColumnWidth","management","isActive","screen","nextScreen","getIsTablet","isLeftColumnShown","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","sticker","recent","stickers","hash","newStickers","s","documentId","recentCustomEmojis","order","isCustomEmoji","added","setIds","customEmojis","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","l","lastDelimiter","allowedContentString","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","selectChatMessage","botId","viaBotId","senderId","selectIsTrustedBot","botTrustRequest","onConfirm","action","openedGame","top","left","width","height","animationLevel","settings","byKey","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limit","limitReachedModal","openedStickerSetShortName","openedCustomEmojiSetIds","lastRendered","unique","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","topicId","editTopicPanel","archiveSettings","isHidden","isMinimized","APP_VERSION_REGEX","fetch","then","response","trim","test","isUpdateAvailable","catch","DEBUG","console","error","multitabNextAction","reestablishMasterToSelf","isBlurred","updateIsOnline","blurredTabTokens","t","getAllMultitabTokens","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","currentUserId","INACTIVE_MARKER","PAGE_TITLE","round","newUnread","messageList","currentChat","getChatTitle","topics","status","payment","clearPayment","closeInvoice","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","noLockOnUnload","onBeforeUnload","passcode","hasPasscode","byTabId","clearStoredSession","async","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","values","session","parse","storeSession","previousGlobal","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","isScreenLocked","invalidAttemptsCount","isMasterTab","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","_global$passcode$inva","uploadProgressCallbacks","Map","runDebouncedForMarkRead","cb","offsetId","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","MESSAGE_LIST_SLICE","flag","threadsById","lastViewportIds","safeReplaceViewportIds","listedIds","updateListedIds","getViewportSlice","sourceIds","index","i","findClosestIndex","indexForDirection","from","to","newViewportIds","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","localMessage","MsgConn","sendPduWithCallback","SendReq","msg","pack","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","replyingToTopId","callApi","delete","getAttachmentType","shouldSendAsFile","mimeType","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","isRestricted","selectListedIds","outlyingIds","selectOutlyingIds","historyIds","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","updateChatMessage","addUsers","buildCollectionByKey","users","replyMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","omit","scheduledAt","replyingToMessage","replyToTopMessageId","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","arr","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","isFirst","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","draft","shouldForce","user","selectUser","isDeletedUser","isLocal","updateChat","draftDate","replyToMsgId","localOnly","selectDraft","newDraft","isUnpin","isOneSide","isSilent","topId","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","translate","isUserBot","minId","selectFirstUnreadId","unreadCount","readCount","count","countSortedIds","topic","updateThreadInfo","lastReadInboxMessageId","newTopicUnreadCount","updateTopic","webPagePreview","options","poll","option","shouldResetVoters","offsets","nextOffset","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","a","b","realMessages","m","isServiceNotificationMessage","byId","replaceScheduledMessages","scheduledPerThread","selectThreadIdFromMessage","scheduledInThread","entries","scheduledIds","selectScheduledMessage","transcriptionId","isTranscriptionError","ignoreCache","newCustomEmojiIds","customEmoji","addChatMessagesById","addChats","seenByUserIds","sendAsId","sendAsChat","fullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","shouldSkipModal","urlWithProtocol","ensureProtocol","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","parsedUrl","URL","autologinDomains","hostname","searchParams","autologinToken","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","showDialog","getUserFullName","selectForwardsCanBeSentToChat","closeMediaViewer","showAllowedMessageTypesNotification","toLanguageCode","selectLanguageCode","updateRequestedMessageTranslation","removeRequestedMessageTranslation","updateMessageTranslation","isPending","update","views","forwards","repliesChatId","repliesThreadInfo","messagesCount","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetInfo","stickerSet","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","Promise","all","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchWords","updateStickerSearch","config","gifSearchUsername","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","searchSharedMedia","SHARED_MEDIA_SLICE","topMessageId","newFoundIds","selectCurrentMediaSearch","updateLocalMediaSearchResults","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","timestamp","ManagementProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","releaseStatusTimeout","previousMsgClientState","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","acc2","editingDraft","selectEditingDraft","currentChatId","currentThreadId","activeThreadId","threadInfo","lastReadInboxId","newCurrentChatId","currentChatMessages","localMessages","isDeleted","topicLastMessages","allMessages","concat","allMessagesWithTopicLastMessages","otherTabId","tabThreads","otherChatId","otherThreadId","updateChats","updateUsers","repliesThreadInfos","updateThreadInfos","loadTopics","loadTopicById","shouldCloseChatOnError","threads","updateThread","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","addCallback","connectionState","authState","msgConn","MsgClientState","getState","getActions","sync","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","webAuthorizations","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","newUser","hasChangedAvatarHash","avatarHash","hasChangedProfilePhoto","profilePhoto","hasChangedFallbackPhoto","fallbackPhoto","hasChangedPersonalPhoto","personalPhoto","photos","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","isPrivate","isUserId","userOrChat","userSearch","updateUserSearchFetchingStatus","emojiStatus","expires","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","isWriteAllowed","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","openUrl","openGame","alert","isError","getPaymentForm","inputInvoice","form","invoice","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","button","openPollModal","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","peerId","requestBotUrlAuth","buttonId","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","webViewUrl","webApp","isFromBotMenu","reply","closeWebApp","slug","trustedBotIds","newTrustedBotIds","add","Array","callbackPayload","requestedAttachBotInstall","botUser","actionPayload","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","isPaymentModalOpen","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","step","isClosed","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","timestamps","reaction","selectDefaultReaction","isMessageLocal","toggleReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","userReactions","getUserReactions","hasReaction","some","userReaction","isSameReaction","newUserReactions","selectMaxUserReactions","reactions","ANIMATION_LEVEL_MAX","newActiveReactions","currentReactions","isReactionChosen","chosenOrder","existingIndex","r","recentReactions","addMessageReaction","active","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","isGroup","stats","recentTopMessages","msgId","updateStatistics","dcId","statisticsDcId","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","prevIsForum","lastReadOutboxMessageId","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","pick","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","orderedPinnedTopicIds","ANIMATION_DELAY","updateReactions","areDeepEqual","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","firstUnreadId","candidateGlobal","updateChatLastMessage","currentLastMessage","selectTopicFromMessage","findLastMessage","deleteMessages","newLastMessage","clearMessageTranslation","deleteTopic","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","isTopicReply","selectIsMessageInCurrentMessageList","getMessageText","selectScheduledIds","threadScheduledIds","deleteChatScheduledMessages","thread","markMessageListRead","pickTruthy","updatePerThread","currentUpdatedInThread","pinnedIds","selectPinnedIds","newPinnedIds","currentThreadInfo","newThreadInfo","lastReadInboxMessageIdInThread","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","oldResults","isMin","isChosen","updatedPoll","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","media","preview","extendedMedia","transcriptions","sendingState","translations","updateMessageTranslations","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","openPremiumModal","loadFullUser","statusUpdate","targetUser","botInfo","menuButton","addBlockedContact","loadFavoriteStickers","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","loadSavedGifs","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","useBeforeUnload","callback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","memo","props","StickerSetModal","useModuleLoader","Bundles","React","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","CustomEmojiEffect","isLottie","stickerHash","getStickerPreviewHash","previewMediaData","useMedia","paths","useMemo","IS_OFFSET_PATH_SUPPORTED","generateRandomDropPath","buildClassName","path","style","CustomEmoji","styles","withSharedAnimation","src","alt","StatusPickerMenu","withGlobal","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","useRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","useCallback","handleEmojiStatusClick","ref","ripple","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","onClose","ANIMATION_LEVEL_OPTIONS","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","LeftMainHeader","shouldHideSearch","contactsFilter","onSearchQuery","isClosingSearch","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","requestNextSettingsScreen","skipLockOnUnload","signOut","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","archivedUnreadChatsCount","total","isChatArchived","handleLockScreenHotkey","stopPropagation","SettingsScreens","useHotkeys","IS_PWA","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ariaLabel","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","newTheme","shouldUseSystemTheme","switchTheme","handleAnimationLevelChange","newLevel","_","classList","toggle","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","localStorage","setItem","clearWebsync","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleSignOutClick","forceInitApi","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","menuItems","MenuItem","icon","Switcher","label","checked","noAnimation","getPromptInstall","DropdownMenu","trigger","footer","APP_NAME","positionX","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","orderedFolderIds","archived","shouldSkipHistoryAnimations","activeChatFolder","isForumPanelOpen","selectIsForumPanelOpen","hasArchivedChats","maxFolders","ChatFolders","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","transitionRef","allChatsFolder","ALL_FOLDER_ID","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","forceOnHeavyAnimation","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","TabList","tabs","activeTab","onSwitchTab","areFolders","renderCount","LeftSearch","Loading","ContactList","NewChatButton","isShown","onNewPrivateChat","onNewChannel","onNewGroup","updateGlobal","isMenuOpen","setIsMenuOpen","globalData","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderForumPanel","handleForumPanelAnimationEnd","useForumPanelRender","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","reload","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","ForumPanel","onCloseAnimationEnd","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","leftColumnContent","sessionStorage","getItem","nextSettingsScreen","isChatOpen","chatCreationProgress","isFirstChatFolderActive","LeftColumn","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","setContent_","v","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleTopicSearch","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_MAC_OS","useSyncEffect","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","remove","useLayoutEffect","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","onScreenSelect","isChannel","onMouseDown","onMouseUp","onDoubleClick","drawRect","radius","PinnedMessageNavigation","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","HeaderPinnedMessage","customTitle","onUnpinMessage","onAllPinnedClick","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","getMessageMediaHash","isSpoiler","getMessageIsSpoiler","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","srcUrl","MediaSpoiler","isVisible","renderPictogram","renderText","MessageSummary","noEmoji","RippleEffect","shouldStopPropagation","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","resolve","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","averageColor","getAverageColor","fillColor","getColorLuma","res","canvas","createElement","ctx2D","getContext","fillStyle","fillRect","ctx","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","globalCompositeOperation","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","AudioPlayer","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","handleClose","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onContextMenu","volumeIcon","renderAudio","subtitle","renderVoice","disabled","RangeSlider","bold","forceOpen","positionY","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ChatReportPanel","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","confirmIsDestructive","Checkbox","onCheck","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatChannel","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","focusedMessage","isRightColumnShown","isSelectModeActive","selectIsInSelectMode","isChatWithSelf","selectIsChatWithSelf","currentTransitionKey","hasButtonInHeader","hasReachedFocusedMessage","hasReachedMessage","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","isComments","originChannelId","firstPinnedMessage","MiddleHeader","isReady","pinMessage","openPreviousChat","setReachedFocusedMessage","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isWaitingForPinnedMessageFocus","setWaitingForPinnedMessageFocus","isTablet","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","cycleRestrict","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","handleAllPinnedClick","setBackButtonActive","handleBackClick","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","usePrevious","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","withVideoAvatar","emojiStatusSize","noRtl","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","getMessageKey","HeaderActions","canExpandActions","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","useLayoutEffectWithPrevDeps","dependencies","debugKey","prevDeps","INTERSECTION_THROTTLE_FOR_MEDIA","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","asForwarded","noAvatars","isOwn","isOwnMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","isWebPageVideo","getMessageWebPageVideo","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","fontFamily","calculateAuthorWidth","getComputedStyle","documentElement","getPropertyValue","font","whiteSpace","opacity","appendChild","textContent","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","target","contains","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","container","clientY","getBoundingClientRect","isVisibleX","isVisibleY","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","worker","initializationDeferred","_defineProperty","promise","reject","createConnector","Worker","ContextMenuContainer","ActionMessageSuggestedAvatar","openMediaViewer","uploadProfilePhoto","cropModalBlob","setCropModalBlob","isVideoModalOpen","openVideoModal","closeVideoModal","suggestedPhotoUrl","showAvatarNotification","actionText","handleSetSuggestedAvatar","handleCloseCropModal","handleSetVideo","File","videoTs","videoSizes","videoStartTs","tabIndex","role","MediaViewerOrigin","Avatar","showVideoOverwrite","loopIndefinitely","withVideo","CropModal","textParts","usersById","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","isChat","senderUser","senderChat","premiumGiftSticker","ActionMessage","isEmbedded","appearanceOrder","isLastInList","isInsideTopic","memoFirstUnreadIdRef","observeIntersectionForReading","observeIntersectionForLoading","observeIntersectionForPlaying","requestConfetti","useOnIntersect","noAppearanceAnimation","markShown","isSuggestedAvatar","useIsIntersecting","shouldShowConfettiRef","targetUsers","renderActionMessageText","contextMenuPosition","getMessageHtmlId","handlePremiumGiftClick","AnimatedIconFromSticker","play","noLoop","nonInteractive","anchor","EmbeddedMessage","customText","noUserColors","hasContextMenu","isIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","getUserColorKey","draggable","MessageMeta","outgoingStatus","signature","withReactionOffset","noReplies","isTranslated","onTranslationClick","onOpenThread","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","fullClassName","isImported","AnimatedCounter","formatTime","MessageOutgoingStatus","Sticker","observeIntersection","shouldLoop","shouldPlayEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","canPlay","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","cacheBuster","AnimatedSticker","tgsUrl","isLowPriority","onEnded","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","Audio","safePlay","once","performance","interactionMessageId","withEffects","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","AnimatedEmoji","forceLoadPreview","quality","forcePreview","LIKE_STICKER_ID","customEmojiId","AnimatedCustomEmoji","getCustomEmojiSize","isBig","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","inSelectMode","crossOrigin","getImageData","getAppendixColorFromImage","useBlurredMediaThumbRef","useCanvasBlur","getMessageMediaThumbDataUri","IS_CANVAS_FILTER_SUPPORTED","Photo","canAutoLoad","uploadProgress","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","fullMediaData","withThumb","noThumb","thumbRef","thumbClassNames","useMediaTransition","isSpoilerShown","hideSpoiler","downloadProgress","getMessageMediaFormat","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","prevShouldAffectAppendix","MESSAGE_CONTENT_SELECTOR","CUSTOM_APPENDIX_ATTRIBUTE","contentEl","appendixBg","dimensionsStyle","ProgressSpinner","withAnimation","Video","canAutoPlay","videoRef","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isPlayAllowed","setIsPlayAllowed","isFullMediaPreloaded","isPlayerReady","markPlayerReady","hasThumb","previewMediaHash","isPreviewPreloaded","canLoadPreview","previewClassNames","isInline","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","cancelMessageMediaDownload","OptimizedVideo","muted","loop","playsInline","onTimeUpdate","onReady","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","Contact","isRegistered","formatPhoneNumberWithCode","getPercentage","toFixed","PollOption","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","Poll","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","WebPage","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","siteName","displayUrl","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","SafeLink","Invoice","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","Skeleton","forceAspectRatio","InvoiceMediaPreview","loadExtendedMedia","refreshExtendedMedia","useInterval","dataUri","VENUE_COLORS","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","Location","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","prevShouldRenderText","long","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","Game","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","disablePictureInPicture","autoPlay","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","VideoWithSelect","activeDownloadIds","selectActiveDownloadIds","uploadsById","Album","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","RoundVideo","playingProgressRef","playerRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","shouldPlay","stopPlaying","fastRaf","capturePlaying","paused","stopCurrentAudio","InlineButtons","renderIcon","CommentButton","openComments","recentReplierIds","recentRepliers","hasUnread","commentsText","CENTER_ICON_SIZE","EFFECT_SIZE","ReactionAnimatedEmoji","genericEffects","stopActiveReaction","centerIconId","useCustomEmoji","assignedEffectId","assignedId","available","effectId","mediaHashCenterIcon","mediaDataCenterIcon","mediaDataEffect","activeReaction","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","onLoad","ReactionButton","withRecentReactors","recentReactors","recentReaction","Reactions","isOutside","metaChildren","noRecentReactors","getReactionUniqueKey","MessagePhoneCall","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","TOPIC_ICON_SIZE","TopicChip","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","APPENDIX_OWN","APPENDIX_NOT_OWN","QUICK_REACTION_SIZE","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsernames","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","isReplyToTopicStart","selectUploadProgress","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","isLocation","chatTranslations","selectChatTranslations","requestedTranslationLanguage","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","areTranslationsEnabled","canTranslate","selectOutgoingStatus","Message","observeIntersectionForBottom","noComments","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","hasReply","isReplyMessage","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","openAudioPlayer","sendPollVote","focusMessageInComments","openMessageLanguageModal","channelPostId","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","detectedLanguage","threshold","args","detectLanguage","useTextLanguage","isTranslationPending","translatedText","requestedLanguageCode","translateMessages","messageTranslation","byLangCode","useMessageTranslation","previousTranslatedText","currentText","currentTranslatedText","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","clientHeight","isAnimatingScroll","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useThrottledCallback","useResizeObserver","bottomMarker","isElementInViewport","calculatedWidth","noMediaCorners","extraPadding","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","postAuthorTitle","metaSafeAuthorWidth","isForAnimation","MessageText","withTranslucentThumbs","renderReactionsAndMeta","meta","forwardAuthor","chatUsername","c","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","fakeType","FakeIcon","renderSenderName","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","DotAnimation","renderContent","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","SponsoredMessage","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","MessageListContent","messageGroups","isViewportNewest","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","markMentionsRead","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","mentionIds","reactionIds","dataset","useBackgroundMode","margin","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_MIN_ID","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","toggleScrollToolsRef","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","isTopicTopMessage","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","ContactGreeting","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isLoadingBotInfo","isChatLoaded","isGroupChat","isCreator","threadFirstMessageId","selectFirstMessageId","linkedChatId","MessageList","hasTools","canPost","withBottomShift","withDefaultBg","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadMessageViews","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getDocumentMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","currentStuck","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","useStickyDates","handleScroll","parentElement","contentRect","windowHeight","normalHeight","String","preservedItemElements","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","patchChromiumScroll","resetScroll","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","isEmptyTopic","isBotInfoEmpty","onScroll","backgroundColor","ScrollDownButton","ariaLabelLang","onReadAll","Menu","autoClose","shouldShowCount","reactionsCount","mentionsCount","FloatingActionButtons","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","fabClassName","FILE_EXT_REGEX","buildAttachment","filename","quick","preloadImage","shouldShrink","GIF_MIME_TYPE","compressedBlobUrl","resizedUrl","videoWidth","videoHeight","preloadVideo","createPosterForVideo","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","uniqueId","prepareAttachmentsToSend","shouldSendCompressed","attach","shouldSendAsSpoiler","resetInput","applyIosAutoCapitalizationFix","inputEl","STARTS_ENDS_ON_EMOJI_IMG_REGEX","RegExp","EMOJI_IMG_REGEX","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","onstop","onerror","delayStop","GDOCS_ELEMENT_ID_REGEXP","parseHtml","html","DOMParser","parseFromString","wrapNodeAnchor","node","cloneNode","wrapNodeInline","wrapNode","inner","newNode","fontWeight","fontStyle","textDecoration","verticalAlign","applyInlineStyles","dirty","createTextNode","styledNode","nodeName","childNodes","getCleanNode","newWrapper","createDocumentFragment","items","applyBlockStyles","nodes","filterNode","nodeType","STYLE_TAG_REGEX","useClipboardPaste","insertTextAndUpdateCursor","setAttachments","editedMessage","shouldStripCustomEmoji","onCustomEmojiStripped","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_ID","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","pastedFormattedText","fragment","clipboardContent","filteredNodes","cleanNodes","getCleanDocument","textContents","getElementsByTagName","HTMLElement","tagName","replaceWith","entityType","ignoreOnPaste","ENTITY_CLASS_BY_NODE_NAME","innerText","ApiMessageEntityTypes","trimEnd","preparePastedHtml","containsCustomEmoji","stripCustomEmoji","getFilesFromDataTransferItems","newAttachments","textToPaste","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","buildQueryStateMemo","memoized","RE_COMMAND","isFrozen","DeleteMessageModal","openTimeout","isFirstTimeActivation","ResponsiveHoverButton","onActivate","buttonProps","_extends","COLOR_REPLACE_PATTERN","AttachBotIcon","iconSvg","mediaDataWithReplacedColors","doc","stroke","strokeWidth","outerHTML","IS_COMPACT_MENU","AttachBotItem","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","menuPosition","setMenuPosition","rect","right","bottom","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","Portal","destructive","AttachMenu","isButtonVisible","canAttachMedia","canAttachPolls","attachBots","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","canSendVideoAndPhoto","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleFileSelect","shouldSuggestCompression","validatedFiles","validateFiles","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","BotKeyboardMenu","isKeyboardSingleUse","keyboardButtons","noCompact","shouldForceShowEditing","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","ComposerEmbeddedMessage","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useContextMenuPosition","leftIcon","strippedMessage","strippedText","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RE_LINK_TEMPLATE","WebPagePreview","getHtml","loadWebPagePreview","toggleMessageWebPage","detectLinkDebounced","useDebouncedResolver","linkEntity","entity","getLink","useDerivedSignal","useDerivedState","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","BotMenuButton","textRef","textEl","scrollWidth","composerEl","removeProperty","MainButtonState","_ref","REPLIES_USER_ID","isChatWithUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","adminRights","anonymous","sendAsUser","requestedDraftText","selectRequestedDraftText","requestedDraftFiles","selectRequestedDraftFiles","isForCurrentMessageList","canSendVoiceByPrivacy","selectEditingScheduledDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","customEmojiForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","Composer","dropAreaState","onDropHide","clearDraft","closePollModal","loadScheduledHistory","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","addRecentCustomEmoji","appendixRef","inputRef","setHtml","useSignal","getSelectionRange","useGetSelectionRange","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","processMessageInputForCustomEmoji","customEmojiNotificationNumber","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsPeerIds","hasAttachments","canSendGifs","canAttachEmbedLinks","isComposerBlocked","shouldForceCompression","shouldForceAsFile","handleAppendFiles","onCaptionUpdate","handleClearAttachments","handleSetAttachments","setShouldForceAsFile","setShouldForceCompression","setShouldSuggestCompression","newValue","suggestCompression","useAttachmentModal","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","useVoiceRecording","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","SEND_MESSAGE_ACTION_INTERVAL","isEditingRef","useStateRef","isChatAdmin","slowMode","getChatSlowModeOptions","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","useEmojiTooltip","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","insertCustomEmoji","useCustomEmojiTooltip","isStickerTooltipOpen","closeStickerTooltip","loadStickersForEmoji","clearStickersForEmoji","isManuallyClosed","markManuallyClosed","unmarkManuallyClosed","getSingleEmoji","IS_EMOJI_SUPPORTED","twemojiRegex","cleanHtml","prepareForRegExp","parseEmojiOnlyString","hasStickers","useStickerTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetAllInlineBots","extractBotQueryThrottled","useThrottledResolver","getPlainText","parseBotQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","detectCommandThrottled","getCommand","nextFilteredBotCommands","useBotCommandTooltip","insertHtmlAndUpdateCursor","newHtml","selection","getSelection","messageInput","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertCustomEmojiAndUpdateCursor","buildCustomEmojiHtml","useDraft","saveDraft","isEditing","updateDraft","prevState","_prevState$chatId","_prevState$threadId","_prevState$chatId2","_prevState$threadId2","forceUpdateDraft","updateDraftRef","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevDraft","customEmojiIds","chatIdRef","threadIdRef","scopedShatId","scopedThreadId","resetComposer","shouldPreserveInput","handleEditComplete","handleEditCancel","useEditing","editMessage","setEditingDraft","setShouldForceShowEditing","prevEditedMessage","prevReplyingToId","edited","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","resetComposerRef","stopRecordingVoiceRef","showCustomEmojiPremiumNotification","notificationNumber","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isCustomSendMenuOpen","handleEmbeddedClear","validateTextLength","isAttachmentModal","maxLength","extraLength","textParams","checkSlowMode","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","sendAttachments","attachmentsToSend","sendCompressed","sendGrouped","shouldUpdateStickerSetsOrder","handleSendAttachments","handleSend","currentAttachments","record","handleClickBotMenu","handleActivateBotCommandMenu","handleMessageSchedule","restArgs","handleCustomEmojiSelect","isFree","handleCustomEmojiSelectAttachmentModal","handleGifSelect","isScheduleRequested","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","sendSilent","additionalArgs","handleSendAsMenuOpen","insertTextAndUpdateCursorAttachmentModal","removeSymbol","execCommand","tempInput","contentEditable","lastChild","textLength","range","createRange","setStart","setEnd","removeAllRanges","addRange","removeChild","deleteLastCharacterOutsideSelection","removeSymbolAttachmentModal","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","handleSendScheduled","handleSendSilent","handleSendScheduledAttachments","handleSendSilentAttachments","onSend","withBotMenuButton","isBotMenuButtonOpen","withBotCommands","DropAreaState","withQuick","onSendSilent","onSendScheduled","onFileAppend","onAttachmentsUpdate","onCustomEmojiSelect","onRemoveSymbol","onEmojiSelect","shouldBeAnonymous","selectedSendAsId","filteredUsers","onInsertUserName","withUsername","isSavedMessages","onSelectResult","SymbolMenuButton","onGifSelect","onStickerSelect","MessageInput","editableInputId","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","CustomEmojiTooltip","EmojiTooltip","allowDisabledClick","CustomSendMenu","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","MessageLanguageModal","isImage","kind","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isMessageLanguageModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","shouldJoinToSend","isJoinToSend","shouldLoadFullChat","shouldBlockSendInForum","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","MiddleColumn","unpinAllMessages","loadUser","joinChannel","restartBot","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","visualViewport","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","customBackgroundValue","useCustomBackground","settingValue","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","isEditingInvite","canViewStatistics","RightHeader","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","profileState","managementScreen","_useCurrentOrPrev","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleDeleteInviteClick","ManagementScreens","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleStatistics","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","CreateTopic","EditTopic","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","renderingActiveTab","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","isFirstTab","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","contextActions","memberId","handler","adminMember","forceShowSelf","FloatingActionButton","DeleteMemberModal","RightSearch","Management","StickerSearchAsync","GifSearchAsync","PollResultsAsync","localContactIds","isSearching","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewerAsync","MediaViewer","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","DownloadManager","cancelMessagesMediaDownload","handleMessageDownloaded","clear","activeMessages","downloadHash","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","GameModal","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","NotificationsAsync","Notifications","DialogsAsync","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","MessageListHistoryHandler","closeChat","MessageHistoryRecord","createLocationHash","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","CONFETTI_COLORS","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvasWidth","canvasHeight","clearRect","confettiToRemove","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","beginPath","ellipse","fill","prevConfettiTime","hideTimeout","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","deleteFolderDialogId","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","DEBUG_isLogged","wasTimeFormatSetManually","currentUser","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","isPremiumModalOpen","limitReached","isReceiptModalOpen","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadBundle","isDesktop","langCode","prevLastSyncTime","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","usePreventPinchZoomGesture","stickerSetShortName","UnreadCount","passcodeSettings","LockScreen","isLocked","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","AnimatedIconWithPreview","LOCAL_TGS_URLS","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}